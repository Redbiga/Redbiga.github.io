<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mybatisPlus</title>
    <link href="/2024/01/23/mybatis-plus/"/>
    <url>/2024/01/23/mybatis-plus/</url>
    
    <content type="html"><![CDATA[ <meta name="referrer" content="no-referrer"><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>采用的是黑马的mybatisPlus教程!<br><a href="https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc">mybatis教程！</a><br>使用的springboot3和JDK17完成的！和黑马的有点区别！</p><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><p>1.Hutool 是一个由 Java 编写的强大、完善且易用的 Java 工具类库，它封装了很多常用的 Java 方法，包括但不限于日期时间处理、字符串处理、文件操作、网络请求、加密解密、数据验证、反射工具等。通过引入 hutool-all 依赖，开发者可以方便地在项目中使用 Hutool 提供的各种便捷工具方法，以减少重复造轮子的工作，提高开发效率<br>2.@RequiredArgsConstructor 是 Lombok 库中的一个注解，它能够自动生成构造方法。当类中包含 final 或者非 null 的不可变字段时，Lombok 会为这些字段生成一个构造器，确保在创建对象实例时必须为这些字段提供值。<br>3.接口中可以有default修饰的方法！default修饰的方法为默认方法可以不用重写！</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalance</span><span class="hljs-params">(Long id, Integer money)</span> &#123;        <span class="hljs-comment">// 1.查询用户</span>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getById(id);        <span class="hljs-comment">// 2.判断用户状态</span>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == UserStatus.FROZEN) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户状态异常&quot;</span>);        &#125;        <span class="hljs-comment">// 3.判断用户余额</span>        <span class="hljs-keyword">if</span> (user.getBalance() &lt; money) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户余额不足&quot;</span>);        &#125;        <span class="hljs-comment">// 4.扣减余额</span>        baseMapper.deductMoneyById(id, money);    &#125;&#125;<span class="hljs-comment">// 上面是mybatisPlus中的代码片段；其中的IUserService接口继承了IService接口，IService中</span><span class="hljs-comment">// 有一个default修饰的getById方法，我们可以super.getById(id);调用该方法实现查询效果！</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String username; <span class="hljs-comment">// final 字段或 @NonNull 注解的字段</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> age;    <span class="hljs-comment">// Lombok 会自动生成以下构造方法：</span>    <span class="hljs-comment">// public User(String username, int age) &#123;</span>    <span class="hljs-comment">//     this.username = username;</span>    <span class="hljs-comment">//     this.age = age;</span>    <span class="hljs-comment">// &#125;</span>&#125;</code></pre></div><p>在这个例子中，由于 username 和 age 都是 final 字段，@RequiredArgsConstructor 会生成一个构造方法，要求在创建 User 类的新实例时必须传入这两个参数的值。这样可以确保这些关键字段在对象初始化时就具有有效的值，有助于防止 NullPointerException 等问题的发生。<br>3.@RequestParam 和@PathVariable的区别：<br>@RequestParam从请求中提取查询参数，也就是从url后面的？开始的数据：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><span class="hljs-meta">@Operation(summary = &quot;根据id集合查询用户&quot;)</span><span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">queryUserByIds</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;ids&quot;z List&lt;Long&gt; ids)</span></span><span class="hljs-params">// <span class="hljs-meta">@RequestParam(&quot;ids&quot;)</span>注解处理的是请求路径后面的参数：</span><span class="hljs-params">// http://localhost:<span class="hljs-number">8080</span>/users?ids=<span class="hljs-number">1</span>,<span class="hljs-number">2</span></span></code></pre></div><p>@PathVariable是以路径中某段为参数：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-meta">@Operation(summary = &quot;根据id查询用户&quot;)</span>    <span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span><span class="hljs-comment">// http://localhost:8080/users/1</span></code></pre></div><p>4.主键，外键，虚拟外键：<br><a href="https://www.cnblogs.com/dgp-zjz/p/16470132.html">https://www.cnblogs.com/dgp-zjz/p/16470132.html</a></p><div class="code-wrapper"><pre><code class="hljs">主键：用来保证数据完整性 外键：用来和其他表建立联系用的 索引：是提高查询排序的速度</code></pre></div><div class="code-wrapper"><pre><code class="hljs">主键：主键只能有一个外键：一个表可以有多个外键索引：一个表可以有多个唯一索引</code></pre></div><div class="code-wrapper"><pre><code class="hljs autohotkey">PRIMARY KEY设置主键 (&#x27;设置的主键字段&#x27;),KEY `自定义KEY名` (`定义外键字段名`),CONSTRAINT限制 `自定义KEY名` FOREIGN KEY外键 (`自定外键字段名`) REFERENCES 引用 `引用表` (`引用字段设为外键`))<span class="hljs-comment">;</span></code></pre></div><p>外键和主键建立了关系，那么外键所在的表中数据和主键表有关联关系就无法删除外键中的数据的！<br>虚拟外键表示的是表之间有逻辑上的关联关系！其实际上并没有实际的强制性约束！<br>5.mybatis-plus 开启与关闭 SQL 日志打印<br><a href="https://blog.csdn.net/jiangchao858/article/details/115676371">mybatis-plus 开启与关闭 SQL 日志打印_mybatis plus 开启sql记录-CSDN博客</a><br><a href="https://so.csdn.net/so/search?q=Mybatis&spm=1001.2101.3001.7020">Mybatis</a>-plus 需要通过下面的方式开启控制台 SQL 日志打印：</p><div class="code-wrapper"><pre><code class="hljs stylus">mybatis-plus:  configuration:    log-impl: org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.stdout</span><span class="hljs-selector-class">.StdOutImpl</span></code></pre></div><p>6.DTO(Data Transfer Object）是数据传输对象！一般用来映射传输过程中的数据的！<br>7.@Date  :</p><div class="code-wrapper"><pre><code class="hljs less">使用<span class="hljs-variable">@Data</span>注解可以简化Java类的编写，减少样板代码，并提高代码的可读性和可维护性。当在类级别上使用<span class="hljs-variable">@Data</span>注解时，Lombok会自动为该类的所有非静态字段生成以下方法：Getter方法：自动生成所有非静态字段的对应getter方法。Setter方法：自动生成所有非静态字段的对应setter方法。<span class="hljs-built_in">toString</span>()方法：生成一个包含所有字段的字符串表示，方便调试和日志输出。<span class="hljs-built_in">equals</span>()方法：自动生成基于所有字段的相等比较方法。<span class="hljs-built_in">hashCode</span>()方法：自动生成基于所有字段的散列码计算方法。</code></pre></div><h2 id="MyBatis-Plus的特性"><a href="#MyBatis-Plus的特性" class="headerlink" title="MyBatis Plus的特性:"></a>MyBatis Plus的特性:</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作.</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门:"></a>快速入门:</h2><h4 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h4><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--由于springboot3和mybatisplus兼容性的问题这里引入的依赖最好是这样的！  --&gt;</span></code></pre></div><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>mapper接口要继承BaseMapper<User> 这里的User对应查询结果的类型！同时要注意在启动类上添加组件@Mapper注解 不然spring扫描不到Mapper接口类就无法注入到容器中了！当然也可以在Mapper接口上添加@Mapper 注解  ；</p><div class="code-wrapper"><pre><code class="hljs xml">MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：- MybatisPlus会把PO实体的类名驼峰转下划线作为表名- MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型- MybatisPlus会把名为id的字段作为主键</code></pre></div><h4 id="常见注解："><a href="#常见注解：" class="headerlink" title="常见注解："></a>常见注解：</h4><h5 id="TableName："><a href="#TableName：" class="headerlink" title="@TableName："></a>@TableName：</h5><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><p>TableName注解除了指定表名以外，还可以指定很多其它属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必须指定</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>schema</td><td>String</td><td>否</td><td>“”</td><td>schema</td></tr><tr><td>keepGlobalPrefix</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td></tr><tr><td>resultMap</td><td>String</td><td>否</td><td>“”</td><td>xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td></tr><tr><td>autoResultMap</td><td>boolean</td><td>否</td><td>false</td><td>是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td></tr><tr><td>excludeProperty</td><td>String[]</td><td>否</td><td>{}</td><td>需要排除的属性名 @since 3.3.1</td></tr></tbody></table><h5 id="TableId："><a href="#TableId：" class="headerlink" title="@TableId："></a>@TableId：</h5><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p>TableId注解支持两个属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必须指定</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>IdType.NONE</td><td>指定主键类型</td></tr></tbody></table><p>IdType支持的类型有：</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>AUTO</td><td>数据库 ID 自增</td></tr><tr><td>NONE</td><td>无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td>INPUT</td><td>insert 前自行 set 主键值</td></tr><tr><td>ASSIGN_ID</td><td>分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td></tr><tr><td>ASSIGN_UUID</td><td>分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td></tr><tr><td><del>ID_WORKER</del></td><td>分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td></tr><tr><td><del>UUID</del></td><td>32 位 UUID 字符串(please use ASSIGN_UUID)</td></tr><tr><td><del>ID_WORKER_STR</del></td><td>分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td></tr></tbody></table><p>这里比较常见的有三种：</p><ul><li>AUTO：利用数据库的id自增长</li><li>INPUT：手动生成id</li><li>ASSIGN_ID：雪花算法生成Long类型的全局唯一id，这是默认的ID策略</li></ul><h5 id="TableField："><a href="#TableField：" class="headerlink" title="@TableField："></a>@TableField：</h5><p>描述：普通字段注解<br>一般情况下我们并不需要给字段添加@TableField注解，一些特殊情况除外：</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量是以isXXX命名，按照JavaBean的规范，MybatisPlus识别字段时会把is去除，这就导致与数据库不符。</li><li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用@TableField注解给字段名添加转义字符：&#96;&#96;</li></ul><p>支持的其它属性如下：<br>支持的其它属性如下：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必填</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>数据库字段名</td></tr><tr><td>exist</td><td>boolean</td><td>否</td><td>true</td><td>是否为数据库表字段</td></tr><tr><td>condition</td><td>String</td><td>否</td><td>“”</td><td>字段 where 实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局的 %s&#x3D;#</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>springboot3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis，spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>githubPage阿里云绑定域名</title>
    <link href="/2024/01/20/Github%20Pages%20%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D/"/>
    <url>/2024/01/20/Github%20Pages%20%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h5 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h5><p><strong>CNAME:</strong></p><p><strong>使用场景</strong>：</p><div class="code-wrapper"><pre><code class="hljs dns">当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 <span class="hljs-keyword">CNAME</span> 记录，最常用到 <span class="hljs-keyword">CNAME</span> 的场景包括做 CDN、企业邮箱、全局流量管理等。</code></pre></div><p><strong>设置方法</strong>:</p><div class="code-wrapper"><pre><code class="hljs dns">记录类型：选择 <span class="hljs-keyword">CNAME</span> 。主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入 “ www” ；如需实现dns-example.com的解析，主机记录输入“@”）。解析线路：默认为必填项，否则会导致部分用户无法解析。记录值：记录值为 <span class="hljs-keyword">CNAME</span> 指向的域名，只可以填写域名。TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为<span class="hljs-number">10</span>分钟。</code></pre></div><h5 id="Github-Pages-绑定阿里云域名："><a href="#Github-Pages-绑定阿里云域名：" class="headerlink" title="Github Pages 绑定阿里云域名："></a>Github Pages 绑定阿里云域名：</h5><p>1.阿里云购买的域名添加CNAME记录：</p><p><img src="/../images/image-20240120194744304-17058446004831.png" alt="image-20240120194744304"></p><p>2.在github page的页面添加域名：</p><p><img src="/../images/image-20240120194819452.png" alt="image-20240120194819452"></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis总结</title>
    <link href="/2024/01/16/mybits/"/>
    <url>/2024/01/16/mybits/</url>
    
    <content type="html"><![CDATA[<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>1.mybatis是一款半自动的ORM框架</p><p>2.ORM是对象关系映射</p><h1 id="MyBatis的CRUD操作："><a href="#MyBatis的CRUD操作：" class="headerlink" title="MyBatis的CRUD操作："></a>MyBatis的CRUD操作：</h1><h2 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h2><p>标签：&lt; select id&#x3D;”” resultType&#x3D;”” &gt;</p><p>id与接口中的相关方法是同名的，表示该方法对应的mapper中的sql语句为上面的！</p><p>resultType是查询返回结果的类型！</p><h3 id="序号参数绑定："><a href="#序号参数绑定：" class="headerlink" title="序号参数绑定："></a>序号参数绑定：</h3><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<span class="hljs-comment">//使用原生参数绑定</span>    <span class="hljs-keyword">public</span> User selectUserByIdAndPwd(Integer id , <span class="hljs-keyword">String</span> pwd);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByIdAndPwd&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">    SELECT * FROM t_users</span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;arg0&#125;</span><span class="language-xml"> AND password = #</span><span class="hljs-template-variable">&#123;arg1&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!--arg0 arg1 arg2 ...--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByIdAndPwd&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">SELECT * FROM t_users</span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;param1&#125;</span><span class="language-xml"> AND password = #</span><span class="hljs-template-variable">&#123;param2&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!--param1 param2 param3 ...--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h3 id="注解参数绑定"><a href="#注解参数绑定" class="headerlink" title="注解参数绑定:"></a>注解参数绑定:</h3><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.annotations</span><span class="hljs-selector-class">.Param</span>; <span class="hljs-comment">//引入注解</span><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">UserDao</span> &#123;    <span class="hljs-comment">//使用MyBatis提供的@Param进行参数绑定</span>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">selectUserByIdAndPwd</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;id&quot;</span>) Integer id , <span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;pwd&quot;</span>) String pwd);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByIdAndPwd&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">    SELECT * FROM t_users</span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"> AND password = #</span><span class="hljs-template-variable">&#123;pwd&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!-- 使用注解值 @Param(&quot;pwd&quot;) --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h3 id="Map参数绑定"><a href="#Map参数绑定" class="headerlink" title="Map参数绑定:"></a>Map参数绑定:</h3><div class="code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">UserDao</span> &#123;    <span class="hljs-comment">//添加Map进行参数绑定</span><span class="hljs-keyword">public</span> User selectUserByIdAndPwd_map(Map values);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs maxima">Map <span class="hljs-built_in">values</span> = <span class="hljs-built_in">new</span> HashMap(); //测试类创建Map<span class="hljs-built_in">values</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;myId&quot;</span>,<span class="hljs-number">1</span>); //自定义<span class="hljs-built_in">key</span>，绑定参数<span class="hljs-built_in">values</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;myPwd&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);User user = userDao.selectUserByIdAndPwd_map(<span class="hljs-built_in">values</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByIdAndPwd_map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">    SELECT * FROM t_users </span><span class="language-xml">  WHERE id = #</span><span class="hljs-template-variable">&#123;myId&#125;</span><span class="language-xml"> AND password = #</span><span class="hljs-template-variable">&#123;myPwd&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!-- 通过key获得value --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h3 id="对象参数绑定"><a href="#对象参数绑定" class="headerlink" title="对象参数绑定:"></a>对象参数绑定:</h3><div class="code-wrapper"><pre><code class="hljs crmsh">public interface UserDao &#123;    //使用对象属性进行参数绑定    public <span class="hljs-keyword">User</span> <span class="hljs-title">selectUserByUserInfo</span>(<span class="hljs-keyword">User</span> <span class="hljs-title">user</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByUserInfo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">    SELECT * FROM t_users</span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"> AND password = #</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!-- #</span></span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"><span class="hljs-comment">取User对象的id属性值、#</span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml"><span class="hljs-comment">同理 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询:"></a>模糊查询:</h3><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;User&gt; selectUsersByKeyword(<span class="hljs-meta">@Param</span>(<span class="hljs-string">&quot;keyword&quot;</span>) <span class="hljs-keyword">String</span> keyword);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part1.different.UserDao&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsersByKeyword&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">        SELECT * FROM t_users </span><span class="language-xml">  WHERE name LIKE concat(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;keyword&#125;</span><span class="language-xml">,&#x27;%&#x27;) <span class="hljs-comment">&lt;!-- 拼接&#x27;%&#x27; --&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre></div><h2 id="删除"><a href="#删除" class="headerlink" title="删除:"></a>删除:</h2><p>标签：&lt; delete id&#x3D;”” parameterType&#x3D;”” &gt;</p><p>parameterType：指定sql语句中的参数类型</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span></span><span class="language-xml">    DELETE FROM t_users</span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!--只有一个参数时，#</span></span><span class="hljs-template-variable">&#123;任意书写&#125;</span><span class="language-xml"><span class="hljs-comment">--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span></code></pre></div><h2 id="修改"><a href="#修改" class="headerlink" title="修改:"></a>修改:</h2><p>标签：&lt; update id&#x3D;”” parameterType&#x3D;”” &gt;</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">    UPDATE t_users SET name=#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml">, password=#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml">, sex=#</span><span class="hljs-template-variable">&#123;sex&#125;</span><span class="language-xml">, birthday=#</span><span class="hljs-template-variable">&#123;birthday&#125;</span><span class="language-xml"></span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"> <span class="hljs-comment">&lt;!--方法参数为对象时，可直接使用#</span></span><span class="hljs-template-variable">&#123;属性名&#125;</span><span class="language-xml"><span class="hljs-comment">进行获取--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre></div><h2 id="添加"><a href="#添加" class="headerlink" title="添加:"></a>添加:</h2><p>标签：&lt; insert id&#x3D;”” parameterType&#x3D;”” &gt;</p><p>这里的id和mapper相关接口同名，表示其相关方法对应！</p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">insert</span> id=&quot;insertUser&quot; parameterType=&quot;user&quot;&gt;    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_users <span class="hljs-keyword">VALUES</span>(#&#123;id&#125;,#&#123;<span class="hljs-type">name</span>&#125;,#&#123;<span class="hljs-keyword">password</span>&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,<span class="hljs-keyword">NULL</span>);&lt;/<span class="hljs-keyword">insert</span>&gt;</code></pre></div><h1 id="主键回填："><a href="#主键回填：" class="headerlink" title="主键回填："></a>主键回填：</h1><h2 id="通过last-insert-id-查询主键"><a href="#通过last-insert-id-查询主键" class="headerlink" title="通过last_insert_id()查询主键:"></a>通过last_insert_id()查询主键:</h2><p>标签：&lt; selectKey id&#x3D;”” parameterType&#x3D;”” order&#x3D;”AFTER|BEFORE”&gt;</p><p>一些情况下，新增一条数据信息，但其主键（id）是数据库自动在数据库生成（自增），而有些业务逻辑的处理是需要要到这个生成的主键（id）。上面的标签就是用来获取这个生成的主键（id）；</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.demo.pojo.User&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!--通过mybatis框架提供的selectKey标签获得自增产生的ID值--&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><span class="language-xml">select LAST_INSERT_ID()</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span></span><span class="language-xml">insert into user(code,name,remark,sex)</span><span class="language-xml">values</span><span class="language-xml">(#</span><span class="hljs-template-variable">&#123;code&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;remark&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;sex&#125;</span><span class="language-xml">)</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span></code></pre></div><p>1.selectKey 会将 SELECT LAST_INSERT_ID()的结果放入到传入的model的主键里面，即获取数据库里自动生成的id。</p><p>2.keyProperty：对应的model（这里的model就是User对象，这里表示User对象中的id对应数据库中的id）中的主键的属性名，跟数据库的主键对应。</p><p>3.order：AFTER 表示 SELECT LAST_INSERT_ID() 在insert执行之后执行,多用与自增主键；</p><p>4.BEFORE 表示 SELECT LAST_INSERT_ID() 在insert执行之前执行，这样的话就拿不到主键了，适合那种主键不是自增的类型<br>resultType：主键类型；</p><p>测试：</p><div class="code-wrapper"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.demo.pojo.User&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!--通过mybatis框架提供的selectKey标签获得自增产生的ID值；下面标签的意思是将插入后的主键值赋值给model也就是User的id--&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><span class="language-xml">select LAST_INSERT_ID()</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">insert into user(code,name,remark,sex)</span><span class="language-xml">values</span><span class="language-xml">(#</span><span class="language-xquery">&#123;code&#125;</span><span class="language-xml">,#</span><span class="language-xquery"><span class="hljs-built_in">&#123;name</span>&#125;</span><span class="language-xml">,#</span><span class="language-xquery">&#123;remark&#125;</span><span class="language-xml">,#</span><span class="language-xquery">&#123;sex&#125;</span><span class="language-xml">)</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span>UserServiceImpl:@Overridepublic void add(User user) &#123;//新增UserDao.add(user);Integer userId = user.getId();//其查询结果的主键值是赋值给model也就是User<span class="hljs-built_in">的id</span>的！System.out.println(<span class="hljs-string">&quot;添加信息的id为：&quot;</span> + userId);</code></pre></div><h2 id="通过uuid-查询主键："><a href="#通过uuid-查询主键：" class="headerlink" title="通过uuid()查询主键："></a>通过uuid()查询主键：</h2><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_order(  id <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">primary key</span>, # 字符型主键  <span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>))<span class="hljs-keyword">default</span> charset = utf8;</code></pre></div><div class="code-wrapper"><pre><code class="hljs haxe"><span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> id;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;    <span class="hljs-comment">//set+get ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part1.basic.OrderDao&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOrder&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 插入之前,之所以选择插入之前是因为我们的目的是先生成UUID然后把该uuid作为主键插入到表中 --&gt;</span></span><span class="language-xml">            SELECT REPLACE(UUID(),&#x27;-&#x27;,&#x27;&#x27;) </span><span class="language-xml">            <span class="hljs-comment">&lt;!-- 适用于字符类型主键 ;</span></span><span class="hljs-comment"><span class="language-xml">            SELECT REPLACE(UUID(),&#x27;-&#x27;,&#x27;&#x27;)：这是实际的SQL语句。它使用MySQL的UUID()函数生成一个通用唯一标识符（UUID），然后使用REPLACE()函数将其中的破折号（-）替换为空字符串，从而生成一个没有破折号的字符串类型的主键。--&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span></span><span class="language-xml">        INSERT INTO t_order(id,name) VALUES(#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml">)</span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre></div><h1 id="MyBatis自动（反射-get和set）ORM失效："><a href="#MyBatis自动（反射-get和set）ORM失效：" class="headerlink" title="MyBatis自动（反射  get和set）ORM失效："></a><strong>MyBatis自动（反射  get和set）ORM失效：</strong></h1><p>MyBatis只能自动维护库表”列名“与”属性名“相同时的一一对应关系，二者不同时，无法自动ORM。</p><p><img src="/../images/image-20240121190543443-17058454788323.png" alt="image-20240121190543443"></p><h2 id="方案一：列的别名"><a href="#方案一：列的别名" class="headerlink" title="方案一：列的别名:"></a>方案一：列的别名:</h2><p>在SQL中使用 as 为查询字段添加列别名，以匹配属性名。</p><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;mapper namespace=&quot;com.qf.mybatis.part2.orm.ManagerDao&quot;&gt;    &lt;<span class="hljs-keyword">select</span> id=&quot;selectManagerByIdAndPwd&quot; resultType=&quot;com.qf.mybatis.part2.orm.Manager&quot;&gt;        <span class="hljs-keyword">SELECT</span> mgr_id <span class="hljs-keyword">AS</span> id , mgr_name <span class="hljs-keyword">AS</span> username , mgr_pwd <span class="hljs-keyword">AS</span> <span class="hljs-keyword">password</span>        <span class="hljs-keyword">FROM</span> t_managers        <span class="hljs-keyword">WHERE</span> mgr_id = #&#123;id&#125; <span class="hljs-keyword">AND</span> mgr_pwd = #&#123;pwd&#125;    &lt;/<span class="hljs-keyword">select</span>&gt;&lt;/mapper&gt;</code></pre></div><h2 id="方案二：结果映射（ResultMap-查询结果的封装规则）"><a href="#方案二：结果映射（ResultMap-查询结果的封装规则）" class="headerlink" title="方案二：结果映射（ResultMap - 查询结果的封装规则）:"></a>方案二：结果映射（ResultMap - 查询结果的封装规则）:</h2><p>通过&lt; resultMap id&#x3D;”” type&#x3D;”” &gt;映射，匹配列名与属性名。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.orm.ManagerDao&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义resultMap标签--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;managerResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.orm.Manager&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!--关联主键与列名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;mgr_id&quot;</span> /&gt;</span>      <span class="hljs-comment">&lt;!--关联属性与列名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;mgr_name&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;mgr_pwd&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>     <span class="hljs-comment">&lt;!--使用resultMap作为ORM映射依据--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllManagers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;managerResultMap&quot;</span>&gt;</span>        SELECT mgr_id , mgr_name , mgr_pwd        FROM t_managers    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h1 id="MyBatis处理关联关系-多表连接"><a href="#MyBatis处理关联关系-多表连接" class="headerlink" title="MyBatis处理关联关系-多表连接:"></a>MyBatis处理关联关系-多表连接:</h1><h2 id="使用对象关系查询"><a href="#使用对象关系查询" class="headerlink" title="使用对象关系查询:"></a>使用对象关系查询:</h2><h3 id="OneToOne"><a href="#OneToOne" class="headerlink" title="OneToOne:"></a>OneToOne:</h3><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2one.PassengerDao&quot;</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 结果映射（查询结果的封装规则） --&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;passengerResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2one.Passenger&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span></span><span class="language-xml"></span><span class="language-xml">      <span class="hljs-comment">&lt;!-- 关系表中数据的封装规则 --&gt;</span> <span class="hljs-comment">&lt;!-- 指定关系表的实体类型 --&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;passport&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2one.Passport&quot;</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;passport_id&quot;</span> /&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nationality&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nationality&quot;</span> /&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;expire&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;expire&quot;</span> /&gt;</span></span><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;passenger_id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;passenger_id&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 多表连接查询 --&gt;</span>  <span class="hljs-comment">&lt;!-- 结果映射（查询结果的封装规则）--&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPassengerById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;passengerResultMap&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-comment">&lt;!-- 别名（避免与p1.id冲突） --&gt;</span></span><span class="language-xml">        SELECT p1.id , p1.name , p1.sex , p1.birthday , p2.id as passport_id , p2.nationality , p2.expire , p2.passenger_id</span><span class="language-xml">        FROM t_passengers p1 LEFT JOIN t_passports p2</span><span class="language-xml">        ON p1.id = p2.passenger_id</span><span class="language-xml">        WHERE p1.id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre></div><ul><li>注意：指定“一方”关系时（对象），使用&lt; association javaType&#x3D;”” &gt;</li></ul><h3 id="OneToMany"><a href="#OneToMany" class="headerlink" title="OneToMany:"></a>OneToMany:</h3><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2many.DepartmentDao&quot;</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 封装规则 --&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;departmentResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2many.Department&quot;</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;location&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;location&quot;</span> /&gt;</span></span><span class="language-xml">        </span><span class="language-xml">      <span class="hljs-comment">&lt;!-- 关系表中数据的封装规则 --&gt;</span><span class="hljs-comment">&lt;!-- 指定关系表的实体类型 --&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.one2many.Employee&quot;</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> /&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> /&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> /&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 多表连接查询 --&gt;</span>      <span class="hljs-comment">&lt;!-- 封装规则 --&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectDepartmentById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;departmentResultMap&quot;</span> &gt;</span></span><span class="language-xml">      <span class="hljs-comment">&lt;!-- 别名（避免与d.id、d.name冲突）--&gt;</span></span><span class="language-xml">        SELECT d.id , d.name , d.location , e.id AS emp_id , e.name emp_name , e.salary , e.dept_id</span><span class="language-xml">        FROM t_departments d LEFT JOIN t_employees e</span><span class="language-xml">        ON d.id = e.dept_id</span><span class="language-xml">        WHERE d.id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre></div><ul><li>注意：指定“多方”关系时（集合），使用&lt; collection ofType&#x3D;”” &gt;</li></ul><h3 id="关系总结"><a href="#关系总结" class="headerlink" title="关系总结:"></a>关系总结:</h3><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL:"></a>动态SQL:</h1><h2 id="sql"><a href="#sql" class="headerlink" title="&lt; sql &gt;:"></a>&lt; sql &gt;:</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.dynamic.BookDao&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BOOKS_FIELD&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 定义SQL片段 --&gt;</span>        SELECT id,name,author,publish,sort    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBookByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;BOOKS_FIELD&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 通过ID引用SQL片段 --&gt;</span>        FROM t_books    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h2 id="if"><a href="#if" class="headerlink" title="&lt; if &gt;:"></a>&lt; if &gt;:</h2><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBookByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;BOOKS_FIELD&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 通过ID引用SQL片段 --&gt;</span></span><span class="language-xml">    FROM t_books</span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name!=null&quot;</span>&gt;</span></span><span class="language-xml">        name=#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author!=null&quot;</span>&gt;</span></span><span class="language-xml">        and author=#</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="language-xml"></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h2 id="where"><a href="#where" class="headerlink" title="&lt; where &gt;:"></a>&lt; where &gt;:</h2><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBookByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.mybatis.part2.dynamic.Book&quot;</span>&gt;</span></span><span class="language-xml">    SELECT id , name , author , publish , sort</span><span class="language-xml">    FROM t_books</span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span> </span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- WHERE，会自动忽略前后缀（如：and | or） --&gt;</span></span><span class="language-xml">            id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span></span><span class="language-xml">            and name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="language-xml">            and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;publish != null&quot;</span>&gt;</span></span><span class="language-xml">            and publish = #</span><span class="hljs-template-variable">&#123;publish&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sort != null&quot;</span>&gt;</span></span><span class="language-xml">            and sort = #</span><span class="hljs-template-variable">&#123;sort&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><h2 id="set"><a href="#set" class="headerlink" title="&lt; set &gt;:"></a>&lt; set &gt;:</h2><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBookByCondition&quot;</span>&gt;</span></span><span class="language-xml">    UPDATE t_books</span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- where子句中满足条件的if，会自动忽略后缀（如：,） --&gt;</span></span><span class="language-xml">            name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"> ,</span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="language-xml">            author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="language-xml"> ,</span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;publish != null&quot;</span>&gt;</span></span><span class="language-xml">            publish = #</span><span class="hljs-template-variable">&#123;publish&#125;</span><span class="language-xml"> ,</span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sort != null&quot;</span>&gt;</span></span><span class="language-xml">            sort = #</span><span class="hljs-template-variable">&#123;sort&#125;</span><span class="language-xml"> ,</span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><span class="language-xml">    WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre></div><h2 id="trim"><a href="#trim" class="headerlink" title="&lt; trim &gt;:"></a>&lt; trim &gt;:</h2><p>&lt; trim prefix&#x3D;”” suffix&#x3D;”” prefixOverrides&#x3D;”” suffixOverrides&#x3D;”” &gt;代替&lt; where &gt; 、&lt; set &gt;</p><p>prefix:表示该字段的前缀； suffix：表示要去除多余的前缀； suffixOverrides：表示要去除多余的后缀；</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBookByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.mybatis.day2.dynamic.Book&quot;</span>&gt;</span></span><span class="language-xml">SELECT id,name,author,publish,sort</span><span class="language-xml">    FROM t_books</span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND|OR&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 增加WHERE前缀，自动忽略前缀 --&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span></span><span class="language-xml">            and id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span></span><span class="language-xml">            and name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="language-xml">            and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;publish != null&quot;</span>&gt;</span></span><span class="language-xml">            and publish = #</span><span class="hljs-template-variable">&#123;publish&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sort != null&quot;</span>&gt;</span></span><span class="language-xml">            and sort = #</span><span class="hljs-template-variable">&#123;sort&#125;</span><span class="language-xml"></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBookByCondition&quot;</span>&gt;</span></span><span class="language-xml">UPDATE t_books</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 增加SET前缀，自动忽略后缀 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span></span><span class="language-xml">name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"> ,</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="language-xml">author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="language-xml"> ,</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;publish != null&quot;</span>&gt;</span></span><span class="language-xml">publish = #</span><span class="hljs-template-variable">&#123;publish&#125;</span><span class="language-xml"> ,</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sort != null&quot;</span>&gt;</span></span><span class="language-xml">sort = #</span><span class="hljs-template-variable">&#123;sort&#125;</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><span class="language-xml">WHERE id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span></code></pre></div><h2 id="foreach"><a href="#foreach" class="headerlink" title="&lt; foreach &gt;:"></a>&lt; foreach &gt;:</h2><div class="code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">delete</span> id=&quot;deleteBookByIds&quot;&gt;<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> t_books<span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span>&lt;<span class="hljs-keyword">foreach</span> collection=&quot;list&quot; <span class="hljs-keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="hljs-keyword">close</span>=&quot;)&quot;  item=&quot;id&quot; <span class="hljs-keyword">index</span>=&quot;i&quot;&gt;#&#123;id&#125;&lt;/<span class="hljs-keyword">foreach</span>&gt;&lt;/<span class="hljs-keyword">delete</span>&gt;</code></pre></div><table><thead><tr><th>参数</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td>collection</td><td>容器类型</td><td>list、array、map</td></tr><tr><td>open</td><td>起始符</td><td>(</td></tr><tr><td>close</td><td>结束符</td><td>)</td></tr><tr><td>separator</td><td>分隔符</td><td>,</td></tr><tr><td>index</td><td>下标号</td><td>从0开始，依次递增</td></tr><tr><td>item</td><td>当前项</td><td>任意名称（循环中通过 #{任意名称} 表达式访问）</td></tr></tbody></table><h1 id="缓存（Cache）"><a href="#缓存（Cache）" class="headerlink" title="缓存（Cache）:"></a>缓存（Cache）:</h1><p>内存中的一块存储空间，服务于某个应用程序，旨在将频繁读取的数据临时保存在内存中，便于二次快速访问。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存:"></a>一级缓存:</h2><p>SqlSession级别的缓存，同一个SqlSession的发起多次同构查询，会将数据保存在一级缓存中。</p><ul><li>注意：无需任何配置，默认开启一级缓存。</li></ul><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存:"></a>二级缓存:</h2><p>SqlSessionFactory级别的缓存，同一个SqlSessionFactory构建的SqlSession发起的多次同构查询，会将数据保存在二级缓存中。</p><ul><li>注意：在sqlSession.commit()或者sqlSession.close()之后生效。</li><li>二级缓存：没有默认开启，需要手动开启，其存储的范围是Mapper NameSpace。即，其范围是Mapper映射器的某个命名空间</li></ul><h2 id="开启全局缓存"><a href="#开启全局缓存" class="headerlink" title="开启全局缓存:"></a>开启全局缓存:</h2><p>&lt; settings &gt;是MyBatis中极为重要的调整设置，他们会改变MyBatis的运行行为，其他详细配置可参考官方文档。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">...</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 注意书写位置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- mybaits-config.xml中开启全局缓存（默认开启） --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><h1 id="八股文："><a href="#八股文：" class="headerlink" title="八股文："></a>八股文：</h1><h2 id="和-的区别是什么？："><a href="#和-的区别是什么？：" class="headerlink" title="**#{}和${}**的区别是什么？："></a>**#{}<strong>和</strong>${}**的区别是什么？：</h2><p>#{}是预编译处理，${}是字符串替换。使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h2 id="模糊查询like语句该怎么写-："><a href="#模糊查询like语句该怎么写-：" class="headerlink" title="模糊查询like语句该怎么写**?**："></a>模糊查询<strong>like</strong>语句该怎么写**?**：</h2><p>1.让传递的参数为模糊处理过的：</p><p><img src="/../images/image-20240121205328569.png" alt="image-20240121205328569"></p><p>2.在mapper查询的时候使用函数：</p><div class="code-wrapper"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.mybatis.part1.different.UserDao&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsersByKeyword&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="language-xml">        SELECT * FROM t_users </span><span class="language-xml">  WHERE name LIKE concat(&#x27;%&#x27;,#</span><span class="hljs-template-variable">&#123;keyword&#125;</span><span class="language-xml">,&#x27;%&#x27;) <span class="hljs-comment">&lt;!-- 拼接&#x27;%&#x27; --&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span></code></pre></div><h2 id="分页插件："><a href="#分页插件：" class="headerlink" title="分页插件："></a>分页插件：</h2><p>分页插件针对ResultSet结果集执行的内存分页，而非物理分 页。分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截 待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><h2 id="延迟加载："><a href="#延迟加载：" class="headerlink" title="延迟加载："></a>延迟加载：</h2><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加 载lazyLoadingEnabled&#x3D;true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如    调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接   着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><p><strong>延迟加载</strong>：在真正使用数据的时候才发起查询，不用的时候不查询关联的数据，延迟加载又叫按需查询（懒加载）</p><p><strong>立即加载</strong>：不管用不用，只要一调用方法，马上发起查询。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo flouid总结</title>
    <link href="/2024/01/16/hexo%20flouid%E6%80%BB%E7%BB%93%EF%BC%9A/"/>
    <url>/2024/01/16/hexo%20flouid%E6%80%BB%E7%BB%93%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[ <meta name="referrer" content="no-referrer"><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1705318631263-a44e3cf7-bf2f-481e-bd67-b509b234a07d.png?x-oss-process=image/resize,w_706,limit_0#averageHue=%233e3753&from=url&id=OXEIR&originHeight=622&originWidth=706&originalType=binary&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&title="></h1><h1 id="常见操作："><a href="#常见操作：" class="headerlink" title="常见操作："></a>常见操作：</h1><div class="code-wrapper"><pre><code class="hljs python">语雀导出markdown然后在发布的时候！可以先不写标题！导出为markdown后在篇头就可以写标题了，不然无法写标题。</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 清除缓存文件</span>hexo clean<span class="hljs-comment">#  生成静态文件 </span> hexo g <span class="hljs-comment"># 部署网站</span>hexo d</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">---title: 文章标题categories: [分类名称]tags: [标签<span class="hljs-number">1</span>, 标签<span class="hljs-number">2</span>]---</code></pre></div><h1 id="基础教程："><a href="#基础教程：" class="headerlink" title="基础教程："></a>基础教程：</h1><p><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">【个人博客】Hexo个人博客搭建与配置详细教程 + Fluid主题 + Gitee发布_fluid文章页设置-CSDN博客</a><br>ps:想修改某些配置可以在_config.yml配置文件中根据想修改部位特征的关键字查询。</p><h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><h3 id="1-使用Valine评论无法正常评论："><a href="#1-使用Valine评论无法正常评论：" class="headerlink" title="1.使用Valine评论无法正常评论："></a>1.使用Valine评论无法正常评论：</h3><p>原因：<br>1.修改Valine配置的时候没有注意appid和后面的值要有空格。<br>2.要在LeanCloud的数据储存中创建Comment类</p> <meta name="referrer" content="no-referrer"><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1705325322444-95551c58-54e5-4f30-b743-8d13d62fba77.png#averageHue=%23c5c5c5&clientId=u4f2c0d6f-91a8-4&from=paste&height=442&id=u82d94f4a&originHeight=553&originWidth=971&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=77012&status=done&style=none&taskId=ub10de5ff-5e77-48e5-a801-adfcf2cf6e9&title=&width=776.8" alt="image.png"><br><a href="https://console.leancloud.cn/apps/NkSNF5NG3Uup8tDgwIfBlJ9d-gzGzoHsz/">LeanCloud</a></p><h3 id="2-上传的md文档使用了外部图片链接导致博客页面加载不出来报403错误（特别是语雀导为md文档时照片报403）："><a href="#2-上传的md文档使用了外部图片链接导致博客页面加载不出来报403错误（特别是语雀导为md文档时照片报403）：" class="headerlink" title="2.上传的md文档使用了外部图片链接导致博客页面加载不出来报403错误（特别是语雀导为md文档时照片报403）："></a>2.上传的md文档使用了外部图片链接导致博客页面加载不出来报403错误（特别是语雀导为md文档时照片报403）：</h3><p>原因：是语雀设置防盗链策略，不允许图片被其他域名引用。<br>解决方法：<br>方法一.在不能显示的md文档前添加</p><div class="code-wrapper"><pre><code class="hljs python">&lt;meta name=<span class="hljs-string">&quot;referrer&quot;</span> content=<span class="hljs-string">&quot;no-referrer&quot;</span>&gt;</code></pre></div><p>方法二：在全局CSS或者主题的某个样式表中（如layout&#x2F;_partials&#x2F;head.ejs）设置默认的referrer策略，也就是在layout&#x2F;_partials&#x2F;head.ejs中的head标签添加如下代码：</p><div class="code-wrapper"><pre><code class="hljs python">&lt;meta name=<span class="hljs-string">&quot;referrer&quot;</span> content=<span class="hljs-string">&quot;no-referrer&quot;</span>&gt;</code></pre></div><p>上面2种方法都需要执行hexo g命令启动后才能显示！直接是无法显示的！</p><h3 id="3-代码高亮使用了highlightjs库，就不用开启行号的功能了，不然md文档中的代码无法正常换行，显示在一行。"><a href="#3-代码高亮使用了highlightjs库，就不用开启行号的功能了，不然md文档中的代码无法正常换行，显示在一行。" class="headerlink" title="3.代码高亮使用了highlightjs库，就不用开启行号的功能了，不然md文档中的代码无法正常换行，显示在一行。"></a>3.代码高亮使用了highlightjs库，就不用开启行号的功能了，不然md文档中的代码无法正常换行，显示在一行。</h3><h3 id="4-在md中设置的文档标题无法在博客中显示的，需要在文章头部添加如下信息："><a href="#4-在md中设置的文档标题无法在博客中显示的，需要在文章头部添加如下信息：" class="headerlink" title="4.在md中设置的文档标题无法在博客中显示的，需要在文章头部添加如下信息："></a>4.在md中设置的文档标题无法在博客中显示的，需要在文章头部添加如下信息：</h3><div class="code-wrapper"><pre><code class="hljs python">---title: 文章标题categories: [分类名称]tags: [标签<span class="hljs-number">1</span>, 标签<span class="hljs-number">2</span>]---</code></pre></div><h3 id="5-每次上传文章后，githubpage绑定的域名消失："><a href="#5-每次上传文章后，githubpage绑定的域名消失：" class="headerlink" title="5.每次上传文章后，githubpage绑定的域名消失："></a>5.每次上传文章后，githubpage绑定的域名消失：</h3><p>在 <code>hexo</code> 生成的博客的 <code>source</code> 目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名</p><p><img src="/../images/70.png" alt="这里写图片描述"></p><h1 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h1> <meta name="referrer" content="no-referrer"><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/28066124/1705318498223-08e05c5d-94d0-462b-a6af-740ded57795b.gif#averageHue=%2301356b&clientId=ufca4afba-4b97-4&from=paste&id=FOjx3&originHeight=280&originWidth=476&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=ua55ddca9-4504-4386-bffd-3229798bd17&title="></p><h3 id="1-为了更好的管理博客可以安装：npm-install-–save-hexo-admin；"><a href="#1-为了更好的管理博客可以安装：npm-install-–save-hexo-admin；" class="headerlink" title="1.为了更好的管理博客可以安装：npm install –save hexo-admin；"></a>1.为了更好的管理博客可以安装：npm install –save hexo-admin；</h3><h3 id="2-添加网站运行时间："><a href="#2-添加网站运行时间：" class="headerlink" title="2.添加网站运行时间："></a>2.添加网站运行时间：</h3><p>页脚添加网站运行时间，只需要在主题配置中的 footer: content 添加：</p><div class="code-wrapper"><pre><code class="hljs python">footer:  content: <span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;div&gt;</span><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">  &#x27;</span></code></pre></div><p>之后在主题目录下创建 source&#x2F;js&#x2F;duration.js，内容如下：</p><div class="code-wrapper"><pre><code class="hljs python">var now = new Date();function createtime() &#123;    var grt= new Date(<span class="hljs-string">&quot;03/03/2021 12:00:00&quot;</span>);//在此处修改你的建站时间    now.setTime(now.getTime()+<span class="hljs-number">250</span>);    days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = Math.floor(days);    hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = Math.floor(hours);    <span class="hljs-keyword">if</span>(String(hnum).length ==<span class="hljs-number">1</span> )&#123;hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);    mnum = Math.floor(minutes); <span class="hljs-keyword">if</span>(String(mnum).length ==<span class="hljs-number">1</span> )&#123;mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;&#125;    seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);    snum = Math.<span class="hljs-built_in">round</span>(seconds); <span class="hljs-keyword">if</span>(String(snum).length ==<span class="hljs-number">1</span> )&#123;snum = <span class="hljs-string">&quot;0&quot;</span> + snum;&#125;    document.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="hljs-string">&quot; 天 &quot;</span>;    document.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>;&#125;setInterval(<span class="hljs-string">&quot;createtime()&quot;</span>,<span class="hljs-number">250</span>);</code></pre></div><h3 id="3-添加一言："><a href="#3-添加一言：" class="headerlink" title="3.添加一言："></a>3.添加一言：</h3><p>修改_config.yml的slogan配置为如下：</p><div class="code-wrapper"><pre><code class="hljs python">slogan:  enable: true  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span>  text: <span class="hljs-string">&quot;太阳初升之时！你会回想起曾经的自己吗？&quot;</span>  <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>  <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>  api:    enable: true    <span class="hljs-comment"># 请求地址</span>    <span class="hljs-comment"># Request url</span>    url: <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>    <span class="hljs-comment"># 请求方法</span>    <span class="hljs-comment"># Request method</span>    <span class="hljs-comment"># Available: GET | POST | PUT</span>    method: <span class="hljs-string">&quot;GET&quot;</span>    <span class="hljs-comment"># 请求头</span>    <span class="hljs-comment"># Request headers</span>    headers: &#123;&#125;    <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>    <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>    keys: [<span class="hljs-string">&#x27;hitokoto&#x27;</span>]</code></pre></div><h3 id="4-视频背景：目前是静态托管，以后再说"><a href="#4-视频背景：目前是静态托管，以后再说" class="headerlink" title="4.视频背景：目前是静态托管，以后再说:"></a>4.视频背景：目前是静态托管，以后再说:</h3><p><a href="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-video-bg-fixed/fluid-video-bg-fixed/">教程</a></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#---------------------------# 首页# Home Page#---------------------------index:  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同  # Path of Banner image, can be a relative path or an absolute path, the same on other pages  banner_img: /img/default.png   # 首页 Banner 使用随机视频  # true 开启  false 关闭  banner_video: true</span></code></pre></div><h3 id="5-添加背景黑色线条："><a href="#5-添加背景黑色线条：" class="headerlink" title="5.添加背景黑色线条："></a>5.添加背景黑色线条：</h3><div class="code-wrapper"><pre><code class="hljs python">!function()&#123;function o(w,v,i)&#123;<span class="hljs-keyword">return</span> w.getAttribute(v)||i&#125;function j(i)&#123;<span class="hljs-keyword">return</span> document.getElementsByTagName(i)&#125;function l()&#123;var i=j(<span class="hljs-string">&quot;script&quot;</span>),w=i.length,v=i[w-<span class="hljs-number">1</span>];<span class="hljs-keyword">return</span>&#123;l:w,z:o(v,<span class="hljs-string">&quot;zIndex&quot;</span>,-<span class="hljs-number">1</span>),o:o(v,<span class="hljs-string">&quot;opacity&quot;</span>,<span class="hljs-number">0.5</span>),c:o(v,<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;0,0,0&quot;</span>),n:o(v,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">99</span>)&#125;&#125;function k()&#123;r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight&#125;function b()&#123;e.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i)&#123;i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;r||i.x&lt;<span class="hljs-number">0</span>?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>,i.ya*=i.y&gt;n||i.y&lt;<span class="hljs-number">0</span>?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>,e.fillRect(i.x-<span class="hljs-number">0.5</span>,i.y-<span class="hljs-number">0.5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>;v&lt;w.length;v++)&#123;x=w[v];<span class="hljs-keyword">if</span>(i!==x&amp;&amp;null!==x.x&amp;&amp;null!==x.y)&#123;B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y&lt;x.<span class="hljs-built_in">max</span>&amp;&amp;(x===f&amp;&amp;y&gt;=x.<span class="hljs-built_in">max</span>/<span class="hljs-number">2</span>&amp;&amp;(i.x-=<span class="hljs-number">0.03</span>*B,i.y-=<span class="hljs-number">0.03</span>*z),A=(x.<span class="hljs-built_in">max</span>-y)/x.<span class="hljs-built_in">max</span>,e.beginPath(),e.lineWidth=A/<span class="hljs-number">2</span>,e.strokeStyle=<span class="hljs-string">&quot;rgba(&quot;</span>+s.c+<span class="hljs-string">&quot;,&quot;</span>+(A+<span class="hljs-number">0.2</span>)+<span class="hljs-string">&quot;)&quot;</span>,e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())&#125;&#125;w.splice(w.indexOf(i),<span class="hljs-number">1</span>)&#125;),m(b)&#125;var u=document.createElement(<span class="hljs-string">&quot;canvas&quot;</span>),s=l(),c=<span class="hljs-string">&quot;c_n&quot;</span>+s.l,e=u.getContext(<span class="hljs-string">&quot;2d&quot;</span>),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i)&#123;window.setTimeout(i,<span class="hljs-number">1000</span>/<span class="hljs-number">45</span>)&#125;,a=Math.random,f=&#123;x:null,y:null,<span class="hljs-built_in">max</span>:<span class="hljs-number">20000</span>&#125;;u.<span class="hljs-built_in">id</span>=c;u.style.cssText=<span class="hljs-string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+s.z+<span class="hljs-string">&quot;;opacity:&quot;</span>+s.o;j(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i)&#123;i=i||window.event,f.x=i.clientX,f.y=i.clientY&#125;,window.onmouseout=function()&#123;f.x=null,f.y=null&#125;;<span class="hljs-keyword">for</span>(var t=[],p=<span class="hljs-number">0</span>;s.n&gt;p;p++)&#123;var h=a()*r,g=a()*n,q=<span class="hljs-number">2</span>*a()-<span class="hljs-number">1</span>,d=<span class="hljs-number">2</span>*a()-<span class="hljs-number">1</span>;t.push(&#123;x:h,y:g,xa:q,ya:d,<span class="hljs-built_in">max</span>:<span class="hljs-number">6000</span>&#125;)&#125;setTimeout(function()&#123;b()&#125;,<span class="hljs-number">100</span>)&#125;();</code></pre></div><p>将上面的代码复制，并在此目录下 themes&#x2F;fluid&#x2F;source&#x2F;js&#x2F;DynamicLine.js 创建文件，将代码全部粘贴进去。<br>然后在主题配置 _config.yml 中找到 custom_js 或者 custom_css，修改如下：</p><div class="code-wrapper"><pre><code class="hljs python">custom_js:  - /js/DynamicLine.js</code></pre></div><h3 id="6-Note美化："><a href="#6-Note美化：" class="headerlink" title="6.Note美化："></a>6.Note美化：</h3><h3 id="7-固定背景："><a href="#7-固定背景：" class="headerlink" title="7.固定背景："></a>7.固定背景：</h3><p><a href="https://asteri5m.icu/archives/0c8538e7-5b5f-4897-8e8b-0cff84320473">魔改教程</a></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
