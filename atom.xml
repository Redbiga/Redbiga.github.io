<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山麋一笑</title>
  
  
  <link href="http://www.bojiboqi.fun/atom.xml" rel="self"/>
  
  <link href="http://www.bojiboqi.fun/"/>
  <updated>2024-04-09T03:52:50.962Z</updated>
  <id>http://www.bojiboqi.fun/</id>
  
  <author>
    <name>山麋一笑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quartz基础</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Quartz%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Quartz%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-09T03:47:00.948Z</published>
    <updated>2024-04-09T03:52:50.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、初识Quartz"><strong>一、初识Quartz</strong></h3><h3 id="1-概念"><strong>1. 概念</strong></h3><p><strong>quartz</strong>是一款开源且丰富特性的**“任务调度库”<strong>，能够集成与任何的</strong>java** 应用，下到独立应用，大到电子商业系统。<strong>quartz</strong>就是基于<strong>java</strong>实现的任务调度框架，用于执行你想要执行的任何任务。<br>什么是<strong>任务调度</strong>？任务调度就是我们系统中创建了<strong>N</strong>个任务，每个任务都有指定的时间进行执行，而这种多任务的执行策略就是任务调度。<br><strong>quartz</strong>的作用就是让任务调度变得更加丰富，高效，安全，而且是基于<strong>Java</strong>实现的，这样子开发者只需要调用几个接口坐下简单的配置，即可实现上述需求。</p><h3 id="2-核心"><strong>2. 核心</strong></h3><h3 id="1）任务-Job"><strong>1）任务 Job</strong></h3><p>我们想要调度的任务都必须实现<strong>org.quartz.job</strong>接口，然后实现接口中定义的**execute( )**方法即可</p><h3 id="2）触发器-Trigger"><strong>2）触发器 Trigger</strong></h3><p><strong>Trigger</strong>作为执行任务的调度器。我们如果想要凌晨1点执行备份数据的任务，那么<strong>Trigger</strong>就会设置凌晨1点执行该任务。其中<strong>Trigger</strong>又分为<strong>SimpleTrigger</strong>和<strong>CronTrigger</strong>两种</p><h3 id="3）调度器-Scheduler"><strong>3）调度器 Scheduler</strong></h3><p><strong>Scheduler</strong>为任务的调度器，它会将任务<strong>Job</strong>及触发器<strong>Trigger</strong>整合起来，负责基于<strong>Trigger</strong>设定的时间来执行<strong>Job</strong></p><h3 id="3-体系结构"><strong>3. 体系结构</strong></h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676654319-d4dfa07d-ccdd-4fff-b56a-b3322ce837f7.png#averageHue=%23f0f0ed&amp;from=url&amp;height=355&amp;id=bhwoV&amp;originHeight=355&amp;originWidth=657&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=657" alt=""></p><h3 id="二、实战Quartz"><strong>二、实战Quartz</strong></h3><p>上面我们大概介绍了<strong>Quartz</strong>，那么该如何使用了，请往下看：</p><ul><li>导入<strong>Quartz</strong>依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--quartz--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>自定义任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> LocalDateTime.now()</span><br><span class="line">            .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;START DATA BACKUP, current time ：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建任务调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取任务调度的实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        <span class="comment">// 定义任务调度实例, 并与TestJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">job</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">            .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 定义触发器, 会马上执行一次, 接着5秒执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 使用触发器调度任务的执行</span></span><br><span class="line">        scheduler.scheduleJob(job, trigger);</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">START DATA BACKUP, current time ：2020-11-17 21:48:30</span></span><br><span class="line"><span class="comment">START DATA BACKUP, current time ：2020-11-17 21:48:35</span></span><br><span class="line"><span class="comment">START DATA BACKUP, current time ：2020-11-17 21:48:40</span></span><br><span class="line"><span class="comment">START DATA BACKUP, current time ：2020-11-17 21:48:45</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>通过以上示例，我们成功执行了一个任务，我们来回顾一下程序中出现的几个重要参数：</p><ul><li><p><strong>Job</strong>和<strong>JobDetail</strong></p></li><li><p><strong>JobExecutionContext</strong></p></li><li><p><strong>JobDataMap</strong></p></li><li><p><strong>Trigger</strong></p></li></ul><h3 id="1-Job-和-JobDetail"><strong>1. Job 和 JobDetail</strong></h3><h3 id="1）Job"><strong>1）Job</strong></h3><p><strong>Job</strong>是工作任务调度的接口，任务类需要实现该接口。该接口中定义了<strong>execute</strong>方法，我们需要在里面编写任务执行的业务逻辑，类似<strong>JDK</strong>提供的<strong>TimeTask</strong>类的<strong>run</strong>方法。每次调度器执行<strong>Job</strong>时，在调用<strong>execute</strong>方法之前都会创建一个新的<strong>Job</strong>实例，当调用完成后，关联的<strong>Job</strong>对象示例会被释放，释放的实例会被垃圾回收机制回收</p><h3 id="2）JobDetail"><strong>2）JobDetail</strong></h3><p><strong>JobDetail</strong>是为<strong>Job</strong>实例提供了许多设置属性，以及<strong>JobDetailMap</strong>成员变量属性，它用来存储特定<strong>Job</strong>实例的状态信息，调度器需要借助<strong>JobDetail</strong>对象来添加<strong>Job</strong>实例。<br>其中有几个重要属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> jobDetail.getJobDataMap();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jobDetail.getKey().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> jobDetail.getKey().getGroup();</span><br><span class="line"><span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> jobDetail.getJobClass().getName();</span><br></pre></td></tr></table></figure><p><strong>两者之间的关系：</strong><br><strong>JobDetail</strong>定义的是任务数据，而真正的执行逻辑是是在<strong>Job</strong>中。这是因为任务是有可能并发执行，如果<strong>Scheduler</strong>直接使用<strong>Job</strong>，就会存在对同一个<strong>Job</strong>实例并发访问的问题。而 采用<strong>JobDetail &amp; Job</strong>方式，<strong>Scheduler</strong>每次执行，都会根据<strong>JobDetail</strong>创建一个新的<strong>Job</strong>实例，这样就可以规避并发访文的问题</p><h3 id="2-JobExecutionContext"><strong>2. JobExecutionContext</strong></h3><p>当<strong>Scheduler</strong>调用一个<strong>Job</strong>，就会将<strong>JobExecutionContext</strong>传递给<strong>Job</strong>的<strong>execute()<strong>方法。这样子在</strong>Job</strong>中就能通过<strong>JobExecutionContext</strong>对象来访问到<strong>Quartz</strong>运行时候的环境以及<strong>Job</strong>本身的明细数据。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676654435-622ccada-9264-441b-9b2b-50b236b33c45.png#averageHue=%23363d46&amp;from=url&amp;height=481&amp;id=yUmyb&amp;originHeight=481&amp;originWidth=767&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=767" alt=""></p><h3 id="3-JobDataMap"><strong>3. JobDataMap</strong></h3><p>顾名思义<strong>JobDataMap</strong>是一个<strong>Map</strong>，它实现了<strong>JDK</strong>中的<strong>Map</strong>接口，可以用来存取基本数据类型，也可以用来转载任何可序列化的数据对象，当<strong>Job</strong>实例对象被执行时这些参数对象会传递给它。示例如下：</p><ul><li>任务调度类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">    .usingJobData(<span class="string">&quot;testJobDetail&quot;</span>, <span class="string">&quot;jobDetail数据存放&quot;</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .usingJobData(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>Job 任务类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        System.out.println(jobExecutionContext.getJobDetail()</span><br><span class="line">                           .getJobDataMap().get(<span class="string">&quot;testJobDetail&quot;</span>));</span><br><span class="line">        System.out.println(jobExecutionContext.getTrigger()</span><br><span class="line">                           .getJobDataMap().get(<span class="string">&quot;testTrigger&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">jobDetail数据存放</span></span><br><span class="line"><span class="comment">trigger数据存放</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>以上我们是通过<strong>getJobDataMap( )<strong>方法来获取</strong>JobDataMap</strong>中的值，我们还可以使用另外一种方式来获取：</p><ul><li>Job 任务类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String testJobDetail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestJobDetail</span><span class="params">(String testJobDetail)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testJobDetail = testJobDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        System.out.println(testJobDetail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">jobDetail数据存放</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p><strong>以上方式便是：<strong>只要我们在Job实现类中添加对应key的setter方法，那么Quartz框架默认的JobFactory实现类在初始化 Job 实例对象时回自动地调用这些 setter 方法<br><strong>注：<strong>如果遇到同名的 key，比如我们在</strong>JobDetail</strong>中存放值的</strong>key</strong>与在<strong>Trigger</strong>中存放值的<strong>key</strong>相同，那么最终<strong>Trigger</strong>的值会覆盖掉<strong>JobDetail</strong>中的值，示例如下：</p><ul><li>任务调度类：两者中都存放了<strong>key</strong>为<strong>testInfo</strong>的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">    .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;jobDetail数据存放&quot;</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>Job 任务类：会输出<strong>Trigger</strong>中存放的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String testInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestInfo</span><span class="params">(String testInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testInfo = testInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        System.out.println(testInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">trigger数据存放</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h3 id="4-Job-的状态"><strong>4. Job 的状态</strong></h3><p>如果我们有个需求是统计每个任务的执行次数，那么你会怎么做？<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676654133-26e1e398-62f2-4989-ace0-5015631bac68.png#from=url&amp;height=172&amp;id=MBdUR&amp;originHeight=172&amp;originWidth=177&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=177" alt=""><br>也许你会想到使用上面说到的<strong>JobDataMap</strong>，那就让我们尝试下：</p><ul><li>任务调度类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们在 JobDataMap 中定义了一个值为 0 的初始值</span></span><br><span class="line"><span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">    .usingJobData(<span class="string">&quot;executeCount&quot;</span>, <span class="number">0</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>Job 任务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer executeCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExecuteCount</span><span class="params">(Integer executeCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.executeCount = executeCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> LocalDateTime.now()</span><br><span class="line">            .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;execute count: &#123;&#125;, current time: &#123;&#125;&quot;</span>,</span><br><span class="line">                 ++executeCount, data);</span><br><span class="line">        <span class="comment">//将累加的 count 存入JobDataMap中</span></span><br><span class="line">        jobExecutionContext.getJobDetail()</span><br><span class="line">            .getJobDataMap().put(<span class="string">&quot;executeCount&quot;</span>, executeCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">execute count: 1, current time: 2020-11-17 22:38:48</span></span><br><span class="line"><span class="comment">execute count: 1, current time: 2020-11-17 22:38:52</span></span><br><span class="line"><span class="comment">execute count: 1, current time: 2020-11-17 22:38:57</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>按照上面的想法我们写出了这部分代码，但貌似打脸了，结果并没有按照我们预计的发展，是逻辑不对吗，貌似写的也没什么问题。这时你会不会回忆到上面我讲过的一句话：<strong>“在调用 execute 方法之前都会创建一个新的 Job 实例”</strong>，这就牵引出了<strong>Job</strong>状态的概念：</p><ul><li>无状态的<strong>Job</strong></li></ul><p>每次调用时都会创建一个新的<strong>JobDataMap</strong></p><ul><li>有状态的<strong>Job</strong></li></ul><p>多次<strong>Job</strong>调用可以持有一些状态信息，这些状态信息存储在<strong>JobDataMap</strong>中<br>那么问题来了，如果让<strong>Job</strong>变成有状态？这个时候我们可以借助一个注解：@PersistJobDataAfterExecution，加上这个注解后，我们再来试下：<br><strong>Job 任务类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer executeCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExecuteCount</span><span class="params">(Integer executeCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.executeCount = executeCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> LocalDateTime.now().</span><br><span class="line">            format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;execute count: &#123;&#125;, current time: &#123;&#125;&quot;</span>,</span><br><span class="line">                 ++executeCount, data);</span><br><span class="line">        <span class="comment">//将累加的 count 存入JobDataMap中</span></span><br><span class="line">        jobExecutionContext.getJobDetail().</span><br><span class="line">            getJobDataMap().put(<span class="string">&quot;executeCount&quot;</span>, executeCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">execute count: 1, current time: 2020-11-17 22:28:48</span></span><br><span class="line"><span class="comment">execute count: 2, current time: 2020-11-17 22:28:52</span></span><br><span class="line"><span class="comment">execute count: 3, current time: 2020-11-17 22:28:57</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>可以看到加了**@PersistJobDataAfterExecution**，我们已经成功达到了我们的目的。</p><h3 id="5-Trigger"><strong>5. Trigger</strong></h3><p>经过以上示例，我们已经大概知道了<strong>Quartz</strong>的组成，我们定义了任务之后，需要用触发器<strong>Trigger</strong>去指定<strong>Job</strong>的执行时间，执行间隔，运行次数等，那么<strong>Job</strong>与<strong>Trigger</strong>的结合，我们中间还需要<strong>Scheduler</strong>去调度，三者关系大致如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676654197-54cebf41-c0d4-4a02-b3a4-5cf58776ecbb.png#from=url&amp;height=220&amp;id=Bujhh&amp;originHeight=220&amp;originWidth=373&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=373" alt=""><br>其中<strong>Trigger</strong>又有几种实现类如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676654290-5d7e52c4-2e58-4d59-b408-8709d68adfa1.png#from=url&amp;height=393&amp;id=nrujQ&amp;originHeight=393&amp;originWidth=1075&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1075" alt=""><br>大致有四个实现类，但是我们平时用的最多的还是<strong>CronTriggerImpl</strong>和<strong>SimpleTriggerImpl</strong><br>我们如果想要定义任务何时执行，何时结束，我们可以这样做：</p><ul><li>任务调度类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">startTime.setTime(startTime.getTime() + <span class="number">5000</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">endTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">endTime.setTime(startTime.getTime() + <span class="number">10000</span>);</span><br><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">    .startAt(startTime)</span><br><span class="line">    .endAt(endTime)</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>Job 任务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> jobExecutionContext.getTrigger();</span><br><span class="line">        log.info(<span class="string">&quot;start time : &#123;&#125;, end time: &#123;&#125;&quot;</span>,</span><br><span class="line">                 trigger.getStartTime(), trigger.getEndTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">start time : Thu Nov 17 22:42:51 CST 2020, end time: Thu Nov 17 22:43:01 CST 2020</span></span><br><span class="line"><span class="comment">start time : Thu Nov 17 22:42:51 CST 2020, end time: Thu Nov 17 22:43:01 CST 2020</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>通过控制台可以看到，任务执行了两次便已经停止了，因为已经超过了停止时间Thu Nov 17 22:43:01 CST 2020</p><h4 id="1）SimpleTrigger">1）SimpleTrigger</h4><p>我们上面看到示例，用到的都是<strong>SimpleTrigger</strong>，<strong>SimpleTrigger</strong>对于设置和使用是最为简单的一种<strong>QuartzTrigger</strong>，它是为那种需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行<strong>n</strong>次的<strong>Job任务</strong>所设计的。<br>比如我想要在一个指定的时间段内执行一次任务，我们只需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .startAt(startTime) <span class="comment">//自定义执行时间</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>再者我想在指定的时间间隔内多次执行该任务，我们可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">    .withRepeatCount(<span class="number">2</span>)) <span class="comment">// 每5秒执行一次，连续执行3次后停止，从 0 开始计数</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>我们来总结一下上面的示例：</p><ul><li><p><strong>SimpleTrigger具备的属性有</strong>：开始时间、结束时间、重复次数和重复的时间间隔</p></li><li><p><strong>重复次数</strong>的值可以为<strong>0</strong>、<strong>正整数</strong>、<strong>或常量 SimpleTrigger.REPEAT_INDEFINITELY</strong></p></li><li><p>重复的时间间隔属性值必须大于<strong>0</strong>或长整型的正整数，以<strong>毫秒</strong>作为时间单位，当重复的时间间隔为<strong>0</strong>时，意味着与<strong>Trigger</strong>同时触发执行</p></li><li><p>结束时间和重复次数同时存在时，以结束时间优先</p></li></ul><h4 id="2）CronTrigger">2）CronTrigger</h4><p>跟<strong>SimpleTrigger</strong>执行间隔时间触发的相比，<strong>CronTrigger</strong>更加灵活，它是基于日历的作业调度器。使用<strong>CronTrigger</strong>我们可以执行某个时间点执行，例如 “每天的凌晨1点执行”、“每个工作日的 12 点执行”，也可以像<strong>SimpleTrigger</strong>那样执行一个开始时间和结束时间运行任务<br>学习<strong>CronTrigger</strong>之前我们得先学习<strong>Cron 表达式</strong></p><ul><li><strong>Cron表达式</strong></li></ul><p><strong>Cron表达式</strong>是用来配置<strong>CronTrigger</strong>实例，它是一个由<strong>7</strong>个子表达式组成的字符串，每个字符都表示不同的日程细节：</p><ol><li><p>Seconds：秒</p></li><li><p>Minutes：分钟</p></li><li><p>Hours：小时</p></li><li><p>Day-of-Month：月中的哪几天</p></li><li><p>Month：月</p></li><li><p>Day-of-Week：周中的哪几天</p></li><li><p>Year：年</p></li></ol><table><thead><tr><th><strong>字段</strong></th><th><strong>是否必填</strong></th><th><strong>允许值</strong></th><th><strong>可用特殊字符</strong></th></tr></thead><tbody><tr><td>秒</td><td>是</td><td>0-59</td><td>， - * /</td></tr><tr><td>分</td><td>是</td><td>0-59</td><td>， - * /</td></tr><tr><td>小时</td><td>是</td><td>0-23</td><td>， - * /</td></tr><tr><td>月中的哪几天</td><td>是</td><td>1-31</td><td>， - * / ? L W C</td></tr><tr><td>月</td><td>是</td><td>1-12 或 JAN-DEC</td><td>， - * /</td></tr><tr><td>周中的哪几天</td><td>是</td><td>1-7 或 SUN-SAT</td><td>， - * / ? L C #</td></tr><tr><td>年</td><td>否</td><td>不填写 或 1970-2099</td><td>， - * /</td></tr></tbody></table><ul><li><strong>特殊符号</strong><br>| <strong>特殊符号</strong> | <strong>含义</strong> |<br>| — | — |<br>| * | 可用在所有字段中，表示对应时间域的每一个时刻，例如，***** 在分钟字段时，表示“每分钟” |<br>| ? | 该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符 |<br>| - | 表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12 |<br>| , | 表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五 |<br>| / | x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y |<br>| L | 该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；如果L用在星期中，则表示星期六，等同于7。但是，如果L出现在星期字段里，而且在前面有一个数值 X，则表示“这个月的最后X天”，例如，6L表示该月的最后星期五 |<br>| W | 该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期，而不能指定日期范围 |<br>| # | 该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发 |</li></ul><p>Cron表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。</p><ul><li><strong>实战演习</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;0 0 10,14,16 * * ?&quot;</span> 每天上午<span class="number">10</span>点，下午<span class="number">2</span>点，<span class="number">4</span>点</span><br><span class="line"><span class="string">&quot;0 0/30 9-17 * * ?&quot;</span>   朝九晚五工作时间内每半小时，从<span class="number">0</span>分开始每隔<span class="number">30</span>分钟发送一次</span><br><span class="line"><span class="string">&quot;0 0 12 ? * WED&quot;</span> 表示每个星期三中午<span class="number">12</span>点 </span><br><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span> 每天中午<span class="number">12</span>点触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span> 每天上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ? 2005&quot;</span> <span class="number">2005</span>年的每天上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 * 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">59</span>期间的每<span class="number">1</span>分钟触发 </span><br><span class="line"><span class="string">&quot;0 0/55 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">55</span>期间，从<span class="number">0</span>开始到<span class="number">55</span>分钟触发 </span><br><span class="line"><span class="string">&quot;0 0-5 14 * * ?&quot;</span> 在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">05</span>期间的每<span class="number">1</span>分钟触发 </span><br><span class="line"><span class="string">&quot;0 10,44 14 ? 3 WED&quot;</span> 每年三月的星期三的下午<span class="number">2</span>:<span class="number">10</span>和<span class="number">2</span>:<span class="number">44</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * MON-FRI&quot;</span> 周一至周五的上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 15 * ?&quot;</span> 每月<span class="number">15</span>日上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 L * ?&quot;</span> 每月最后一日的上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L&quot;</span> 每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L 2002-2005&quot;</span> <span class="number">2002</span>年至<span class="number">2005</span>年的每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6#3&quot;</span> 每月的第三个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br></pre></td></tr></table></figure><ul><li>使用示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">    .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * 6 4 ?&quot;</span>))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h3 id="6-Scheduler"><strong>6. Scheduler</strong></h3><p><strong>Quartz</strong>是以模块的方式构建的，<strong>Job</strong>和<strong>Trigger</strong>之间的结合需要靠<strong>Scheduler</strong>。</p><ul><li><strong>创建</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br></pre></td></tr></table></figure><p>创建是通过<strong>Quartz</strong>默认的<strong>SchedulerFactory</strong>，我们可以使用自定义参数（<strong>Properties</strong>）来创建和初始化<strong>Quartz</strong>调度器，配置参数一般存储在<strong>quartz.properties</strong>中。<br>我们上面是通过<strong>scheduleJob()<strong>方法来结合</strong>Job</strong>和<strong>Trigger</strong>，这个方法有个时间类型的返回值，我们可以获取到调度器开始的时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> scheduler.scheduleJob(jobDetail, trigger);</span><br></pre></td></tr></table></figure><p>关联完任务和触发器，我们就可以启动任务调度了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.start();</span><br></pre></td></tr></table></figure><p>将任务调度挂起（暂停）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.standby();</span><br></pre></td></tr></table></figure><p>将任务关闭：<br>shutdown(true);//表示等待所有正在执行的job执行完毕之后，再关闭Scheduler shutdown(false);//表示直接关闭Scheduler<br>我们再来了解下<strong>quartz.properties</strong>文件，先看一个示例：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676655586-231c14e3-8e98-46fe-ba3a-78206e8e765e.png#from=url&amp;height=1422&amp;id=NsGU8&amp;originHeight=1422&amp;originWidth=1645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1645" alt=""><br>也可以编写程序代码操作quartz.properties文件的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建工厂实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建配置工厂的属性对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, <span class="string">&quot;org.quartz.simpl.SimpleThreadPool&quot;</span>); <span class="comment">// 线程池定义</span></span><br><span class="line">        props.put(<span class="string">&quot;org.quartz.threadPool.threadCount&quot;</span>, <span class="string">&quot;5&quot;</span>); <span class="comment">// 默认Scheduler的线程数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用定义的属性初始化工厂</span></span><br><span class="line">            factory.initialize(props);</span><br><span class="line">            <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Properties设置工厂属性的缺点在用硬编码，假如需要修改例子中线程数量，将不得不修改代码，然后重新编译，所以不推荐使用。</p><h3 id="三、Quartz-监听器"><strong>三、Quartz 监听器</strong></h3><p>在<strong>Quartz</strong>实战中我们了解到三个核心模块分别是<strong>Job</strong>、<strong>Trigger</strong>、<strong>Scheduler</strong>，既然<strong>Quartz</strong>中存在监听器，相应的，这三者也分别有对应的监听器。监听器的作用便是用于当任务调度中你所关注事件发生时，能够及时获取这一事件的通知</p><h3 id="1-JobListener"><strong>1. JobListener</strong></h3><p>任务调度中，与任务<strong>Job</strong>相关的事件包括： Job 开始要执行的提示，执行完成的提示，接口如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676655166-caa71934-9168-4bc7-93d5-1abb3364d9d4.png#from=url&amp;height=836&amp;id=ixUwD&amp;originHeight=836&amp;originWidth=1645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1645" alt=""></p><h3 id="1）方法解析"><strong>1）方法解析</strong></h3><ul><li>getName()：用于获取改<strong>JobListener</strong>的名称</li><li>jobToBeExecuted()：<strong>Scheduler</strong>在<strong>JobDetail</strong>将要被执行时调用这个方法</li><li>``jobExecutionVetoed()`：<strong>Scheduler</strong>在<strong>JobDetail</strong>即将被执行，但又被<strong>TriggerListener</strong>否决时会调用该方法</li><li>jobWasExecuted()：<strong>Scheduler</strong>在<strong>JobDetail</strong>被执行之后调用这个方法</li></ul><h3 id="2）示例"><strong>2）示例</strong></h3><ul><li><strong>Job 任务类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestJob 执行啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>JobListener</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJobListener</span> <span class="keyword">implements</span> <span class="title class_">JobListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;监听器的名称是：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> + jobName + <span class="string">&quot;\tScheduler在JobDetail将要被执行时调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> + jobName + <span class="string">&quot;\tScheduler在JobDetail即将被执行，但又被TriggerListerner否决时会调用该方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException jobException)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> + jobName + <span class="string">&quot;\tScheduler在JobDetail被执行之后调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>任务调度类</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取任务调度的实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        <span class="comment">// 定义任务调度实例, 并与TestJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">            .usingJobData(<span class="string">&quot;executeCount&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 定义触发器, 会马上执行一次, 接着5秒执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">            .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 创建并注册一个全局的Job Listener</span></span><br><span class="line">        scheduler.getListenerManager()</span><br><span class="line">            .addJobListener(<span class="keyword">new</span> <span class="title class_">MyJobListener</span>(),</span><br><span class="line">                            EverythingMatcher.allJobs());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用触发器调度任务的执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">监听器的名称是：MyJobListener</span></span><br><span class="line"><span class="comment">Job的名称是：testJob Scheduler在JobDetail将要被执行时调用这个方法</span></span><br><span class="line"><span class="comment">TestJob 执行啦</span></span><br><span class="line"><span class="comment">监听器的名称是：MyJobListener</span></span><br><span class="line"><span class="comment">Job的名称是：testJob Scheduler在JobDetail被执行之后调用这个方法</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h3 id="2-TriggerListener"><strong>2. TriggerListener</strong></h3><p>任务调度中，与触发器<strong>Trigger</strong>相关的事件包括： 触发器触发、触发器未正常触发、触发器完成等：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676655752-514e0519-1cc6-43b9-9592-56f935c4e28b.png#from=url&amp;height=1026&amp;id=hbDna&amp;originHeight=1026&amp;originWidth=1645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1645" alt=""></p><h3 id="1）方法解析-2"><strong>1）方法解析</strong></h3><ul><li><p>getName()：用于获取触发器的名称</p></li><li><p>triggerFired()：当与监听器相关联的<strong>Trigger</strong>被触发，Job上的**execute()**方法将被执行时，Scheduler就调用该方法</p></li><li><p>vetoJobExecution()：在<strong>Trigger</strong>触发后，<strong>Job</strong>将要被执行时由<strong>Scheduler</strong>调用这个方法。<strong>TriggerListener</strong>给了一个选择去否决<strong>Job</strong>的执行。假如这个方法返回<strong>true</strong>，这个<strong>Job</strong>将不会为此次<strong>Trigger</strong>触发而得到执行</p></li><li><p>triggerMisfired()：<strong>Scheduler</strong>调用这个方法是在<strong>Trigger</strong>错过触发时。你应该关注此方法中持续时间长的逻辑：在出现许多错过触发的<strong>Trigger</strong>时，长逻辑会导致骨牌效应，所以应当保持这方法尽量的小</p></li><li><p>triggerComplete()：<strong>Trigger</strong>被触发并且完成了<strong>Job</strong>的执行时，<strong>Scheduler</strong>调用这个方法。</p></li></ul><h3 id="2）示例-2"><strong>2）示例</strong></h3><ul><li><strong>Job 任务类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestJob 执行啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TriggerListener：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTriggerListener</span> <span class="keyword">implements</span> <span class="title class_">TriggerListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTriggerListener</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">triggerName</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        System.out.println(triggerName + <span class="string">&quot; 被触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">triggerName</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        System.out.println(triggerName + <span class="string">&quot; 没有被触发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// true：表示不会执行Job的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerMisfired</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">triggerName</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        System.out.println(triggerName + <span class="string">&quot; 错过触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext jobExecutionContext, Trigger.CompletedExecutionInstruction completedExecutionInstruction)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">triggerName</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        System.out.println(triggerName + <span class="string">&quot; 完成之后触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>任务调度类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取任务调度的实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        <span class="comment">// 定义任务调度实例, 并与TestJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">            .usingJobData(<span class="string">&quot;executeCount&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 定义触发器, 会马上执行一次, 接着5秒执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">            .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">            .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个全局的Trigger Listener</span></span><br><span class="line">        scheduler.getListenerManager().addTriggerListener(<span class="keyword">new</span> <span class="title class_">MyTriggerListener</span>(<span class="string">&quot;simpleTrigger&quot;</span>), EverythingMatcher.allTriggers());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用触发器调度任务的执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">testTrigger 被触发</span></span><br><span class="line"><span class="comment">testTrigger 没有被触发</span></span><br><span class="line"><span class="comment">TestJob 执行啦</span></span><br><span class="line"><span class="comment">testTrigger 完成之后触发</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h3 id="3-SchedulerListener"><strong>3. SchedulerListener</strong></h3><p><strong>SchedulerListener</strong>会在<strong>Scheduler</strong>的生命周期中关键事件发生时被调用。与<strong>Scheduler</strong>有关的事件包括：增加一个<strong>job/trigger</strong>，删除一个<strong>job/trigger</strong>，<strong>scheduler</strong>发生严重错误，关闭<strong>scheduler</strong>等。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/8432623/1657676656484-46199b30-ae2c-4105-b473-fee52d7d7865.png#from=url&amp;height=2382&amp;id=UabON&amp;originHeight=2382&amp;originWidth=1645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1645" alt=""></p><h3 id="1）方法解析-3"><strong>1）方法解析</strong></h3><ul><li>jobScheduled()：用于部署JobDetail时调用</li><li>jobUnscheduled()：用于卸载JobDetail时调用</li><li>triggerFinalized()：当一个 Trigger 来到了再也不会触发的状态时调用这个方法。除非这个 Job 已设置成了持久性，否则它就会从 Scheduler 中移除。</li><li>triggersPaused()：Scheduler 调用这个方法是发生在一个 Trigger 或 Trigger 组被暂停时。假如是 Trigger 组的话，triggerName 参数将为 null。</li><li>triggersResumed()：Scheduler 调用这个方法是发生成一个 Trigger 或 Trigger 组从暂停中恢复时。假如是 Trigger 组的话，假如是 Trigger 组的话，triggerName 参数将为 null。参数将为 null。</li><li>jobsPaused()：当一个或一组 JobDetail 暂停时调用这个方法。</li><li>jobsResumed()：当一个或一组 Job 从暂停上恢复时调用这个方法。假如是一个 Job 组，jobName 参数将为 null。</li><li>schedulerError()：在 Scheduler 的正常运行期间产生一个严重错误时调用这个方法。</li><li>schedulerStarted()：当Scheduler 开启时，调用该方法</li><li>schedulerInStandbyMode()： 当Scheduler处于StandBy模式时，调用该方法</li><li>schedulerShutdown())：当Scheduler停止时，调用该方法</li><li>schedulingDataCleared()：当Scheduler中的数据被清除时，调用该方法。</li></ul><h3 id="2）示例-3"><strong>2）示例</strong></h3><ul><li><strong>Job 任务类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestJob 执行啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>SchedulerListener：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySchedulerListener</span> <span class="keyword">implements</span> <span class="title class_">SchedulerListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobScheduled</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> trigger.getJobKey().getName();</span><br><span class="line">        System.out.println(jobName + <span class="string">&quot; 完成部署&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        System.out.println(triggerKey + <span class="string">&quot; 完成卸载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFinalized</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器被移除 &quot;</span> + trigger.getJobKey().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerPaused</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        System.out.println(triggerKey + <span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersPaused</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组 &quot;</span> + triggerGroup + <span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerResumed</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        System.out.println(triggerKey + <span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersResumed</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组 &quot;</span> + triggerGroup + <span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobAdded</span><span class="params">(JobDetail jobDetail)</span> &#123;</span><br><span class="line">        System.out.println(jobDetail.getKey() + <span class="string">&quot; 添加工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobDeleted</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey + <span class="string">&quot; 删除工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobPaused</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey + <span class="string">&quot; 工作任务正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsPaused</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作任务组 &quot;</span> + jobGroup + <span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobResumed</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey + <span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsResumed</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作任务组 &quot;</span> + jobGroup + <span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerError</span><span class="params">(String msg, SchedulerException cause)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产生严重错误时调用：   &quot;</span> + msg + <span class="string">&quot;  &quot;</span> + cause.getUnderlyingException());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerInStandbyMode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器在挂起模式下调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器 开启时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器 正在开启时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器 已经被关闭 时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShuttingdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器 正在被关闭 时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingDataCleared</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器的数据被清除时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>任务调度类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取任务调度的实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        <span class="comment">// 定义任务调度实例, 并与TestJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">                .usingJobData(<span class="string">&quot;executeCount&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>, <span class="string">&quot;testJobGroup&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 定义触发器, 会马上执行一次, 接着5秒执行一次</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">endTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        endTime.setTime(endTime.getTime()+<span class="number">5000</span>);</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .usingJobData(<span class="string">&quot;testInfo&quot;</span>, <span class="string">&quot;trigger数据存放&quot;</span>)</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>, <span class="string">&quot;testTriggerGroup&quot;</span>)</span><br><span class="line">                .startNow()</span><br><span class="line">                .endAt(endTime) <span class="comment">//设置了停止时间</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SchedulerListener</span></span><br><span class="line">        scheduler.getListenerManager().addSchedulerListener(<span class="keyword">new</span> <span class="title class_">MySchedulerListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用触发器调度任务的执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** OUTPUT:</span></span><br><span class="line"><span class="comment">testJobGroup.testJob 添加工作任务</span></span><br><span class="line"><span class="comment">testJob 完成部署</span></span><br><span class="line"><span class="comment">调度器 正在开启时调用</span></span><br><span class="line"><span class="comment">调度器 开启时调用</span></span><br><span class="line"><span class="comment">TestJob 执行啦</span></span><br><span class="line"><span class="comment">触发器被移除 testJob</span></span><br><span class="line"><span class="comment">testJobGroup.testJob 删除工作任务</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>通过以上三个监听器的示例，我们也可以大概了解到监听器执行的时机，具体的我们可以实际上手操练一番</p><blockquote><p>来自: <a href="https://www.yuque.com/diaomaoshou/tqeueb/px6l9y">Quartz</a></p></blockquote><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、初识Quartz&quot;&gt;&lt;strong&gt;一、初识Quartz&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;1-概念&quot;&gt;&lt;strong&gt;1. 概念&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;quartz&lt;/strong&gt;是一款开源且丰富特性的**“任务调度库</summary>
      
    
    
    
    <category term="test" scheme="http://www.bojiboqi.fun/categories/test/"/>
    
    
    <category term="test" scheme="http://www.bojiboqi.fun/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>深入Quartz</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/%E6%B7%B1%E5%85%A5Quartz/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/%E6%B7%B1%E5%85%A5Quartz/</id>
    <published>2024-04-09T03:38:40.141Z</published>
    <updated>2024-04-09T03:57:01.746Z</updated>
    
    <content type="html"><![CDATA[<p>Github：<a href="https://github.com/ThinkMugz/springboot-demo-major%EF%BC%8C%E9%9C%80%E8%A6%81%E7%9A%84%E4%BC%99%E4%BC%B4%E5%84%BF%E8%87%AA%E5%8F%96%E3%80%82">https://github.com/ThinkMugz/springboot-demo-major，需要的伙伴儿自取。</a><br>本文主要有以下内容：</p><ul><li>Quartz的基本认知和源码初探</li><li>Quartz的基本使用</li><li>Quartz的进阶使用，包括Job中注入Mapper层、Quartz的持久化</li></ul><p>在Java领域，有很多定时任务框架，这里简单对比一下目前比较流行的三款：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/8432623/1681661011543-11e270fc-6d79-4094-b5e1-393f1730c9fa.png#from=url&amp;height=449&amp;id=TMiIg&amp;originHeight=449&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt=""><br>网络资源：</p><ul><li>Quartz文档：<a href="https://www.w3cschool.cn/quartz_doc/">https://www.w3cschool.cn/quartz_doc/</a></li><li>xxl-job博客：<a href="https://www.cnblogs.com/xuxueli/p/5021979.html">https://www.cnblogs.com/xuxueli/p/5021979.html</a></li></ul><h2 id="1-初识Quartz">1 初识Quartz</h2><p>如果你的定时任务没有分布式需求，但需要对任务有一定的动态管理，例如任务的启动、暂停、恢复、停止和触发时间修改，那么Quartz非常适合你。<br>Quartz是Java定时任务领域一个非常优秀的框架，由OpenSymphony（一个开源组织）开发，这个框架进行了优良地解耦设计，整个模块可以分为三大部分：</p><ul><li><strong>Job</strong>：顾名思义，指待定时执行的具体工作内容；</li><li><strong>Trigger</strong>：触发器，指定运行参数，包括运行次数、运行开始时间和技术时间、运行时长等；</li><li><strong>Scheduler</strong>：调度器，将Job和Trigger组装起来，使定时任务被真正执行；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/8432623/1681661011519-c4cecda2-a66d-45e9-9cdb-c556a6bf5e4e.png#from=url&amp;height=516&amp;id=hbekB&amp;originHeight=516&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt="">下面这个图简略地描述了三者之间的关系：</p><ul><li>一个JobDetail（Job的实现类）可以绑定多个Trigger，但一个Trigger只能绑定一个JobDetail；</li><li>每个JobDetail和Trigger通过group和name来标识唯一性；</li><li>一个Scheduler可以调度多组JobDetail和Trigger。</li></ul><p>为了便于理解和记忆，可以把这套设计机制与工厂车间相关联：</p><ul><li><strong>Job</strong>：把Job比作车间要生产的一类产品，例如汽车、电脑等。</li><li><strong>Trigger</strong>：trigger可以理解为一条生产线，一条生产线只能生产一类产品，但一类产品可以由多条生产线生产。</li><li><strong>Scheduler</strong>：Scheduler则可以理解为车间主任，指挥调度着车间内的生产任务（Scheduler内置线程池，线程池内的工作线程即为车间工人，每个工人承担着一组任务的真正执行）。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/8432623/1681661011672-ffc7fa65-3f76-4390-9f32-5b1e3b3a1a9b.png#from=url&amp;height=479&amp;id=qLzN6&amp;originHeight=479&amp;originWidth=720&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=720" alt=""></p><h2 id="2-Quartz基础使用">2 Quartz基础使用</h2><p>Quartz提供了丰富的API，下面我们在Springboot中使用Quartz完成一些简单的demo。</p><h3 id="2-1-基于时间间隔的定时任务">2.1 基于时间间隔的定时任务</h3><p>基于时间间隔和时间长度实现定时任务，借助SimpleTrigger，例如这个场景——每隔2s在控制台输出线程名和当前时间，持续30s。<br>1.导入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.新建Job，实现我们想要定时执行的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个事件，下面仅创建一个输出语句作演示</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&quot;</span></span><br><span class="line">                + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建Scheduler和Trigger，执行定时任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.quartz.demo.schedule.SimpleJob;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQuartzTest</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 基于时间间隔的定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleTest</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 1、创建Scheduler（调度器）</span></span><br><span class="line">        <span class="type">SchedulerFactory</span> <span class="variable">schedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，并与SimpleJob类绑定(Job执行内容)</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(SimpleJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 3、构建Trigger（触发器），定义执行频率和时长</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                <span class="comment">// 指定group和name，这是唯一身份标识</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger-1&quot;</span>, <span class="string">&quot;trigger-group&quot;</span>)</span><br><span class="line">                .startNow()  <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每隔2s执行一次</span></span><br><span class="line">                        .repeatForever())  <span class="comment">// 永久执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//4、将Job和Trigger交给Scheduler调度</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        <span class="comment">// 5、启动Scheduler</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">        <span class="comment">// 休眠，决定调度器运行时间，这里设置30s</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 关闭Scheduler</span></span><br><span class="line">        scheduler.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试方法后，控制台观察现象即可。注意到这么一句日志：Using thread pool ‘org.quartz.simpl.SimpleThreadPool’ - with 10 threads.，这说明Scheduler确实是内置了10个线程的线程池，通过打印线程名也印证了这一点。<br>另外要尤其注意的是，我们之所以通过TimeUnit.SECONDS.sleep(30);设置休眠，是因为定时任务是交由线程池异步执行的，而测试方法运行结束，主线程随之结束导致定时任务也不再执行了，所以需要设置休眠hold住主线程。在真实项目中，项目的进程是一直存活的，因此不需要设置休眠时间。<br>这其中的区别可以参考<br><a href="https://github.com/ThinkMugz/springboot-demo-major%E3%80%82">https://github.com/ThinkMugz/springboot-demo-major。</a></p><h3 id="2-2-基于Cron表达式的定时任务">2.2 基于Cron表达式的定时任务</h3><p>基于Cron表达式的定时任务demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.quartz.demo.schedule.SimpleJob;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQuartzTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 基于cron表达式的定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cronTest</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 1、创建Scheduler（调度器）</span></span><br><span class="line">        <span class="type">SchedulerFactory</span> <span class="variable">schedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，并与SimpleJob类绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(SimpleJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job-1&quot;</span>, <span class="string">&quot;job-group&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 3、构建Trigger（触发器），定义执行频率和时长</span></span><br><span class="line">        <span class="type">CronTrigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger-1&quot;</span>, <span class="string">&quot;trigger-group&quot;</span>)</span><br><span class="line">                .startNow()  <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;* 30 10 ? * 1/5 *&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、执行</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">        <span class="comment">// 休眠，决定调度器运行时间，这里设置30s</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 关闭Scheduler</span></span><br><span class="line">        scheduler.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Quartz解读">3 Quartz解读</h2><p>整个Quartz体系涉及的类及之间的关系如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/8432623/1681661011578-20ef96f6-1ea8-4adc-a5c9-fec06a5e0ad7.jpeg#from=url&amp;height=647&amp;id=XMqAx&amp;originHeight=647&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt=""></p><ul><li><strong>JobDetail</strong>：Job接口的实现类，由JobBuilder将具体定义任务的类包装而成。</li><li><strong>Trigger</strong>：触发器，定义定时任务的触发规则，包括执行间隔、时长等，使用TriggerBuilder创建，JobDetail和Trigger可以一对多，反之不可。触发器可以拥有多种状态。</li><li><strong>Scheduler</strong>：调度器，将Job和Trigger组装起来，使定时任务被真正执行；是Quartz的核心，提供了大量API。</li><li><strong>JobDataMap</strong>：集成Map，通过键值对为JobDetail存储一些额外信息。</li><li><strong>JobStore</strong>：用来存储任务和触发器相关的信息，例如任务名称、数量、状态等等。Quartz 中有两种存储任务的方式，一种在在内存（RAMJobStore），一种是在数据库（JDBCJobStore）。</li></ul><h3 id="3-1-Job">3.1 Job</h3><p>Job是一个接口，只有一个方法execute()，我们创建具体的任务类时要继承Job并重写execute()方法，使用JobBuilder将具体任务类包装成一个JobDetail（使用了建造者模式）交给Scheduler管理。每个JobDetail由name和group作为其唯一身份标识。</p><ul><li>JobDataMap中可以包含不限量的（序列化的）数据对象，在job实例执行的时候，可以使用其中的数据。</li><li>JobDataMap继承Map，可通过键值对为JobDetail存储一些额外信息。</li></ul><h3 id="3-2-Trigger">3.2 Trigger</h3><p>Trigger有四类实现，分别如下：</p><ul><li><strong>SimpleTrigger</strong>：简单触发器，支持定义任务执行的间隔时间，执行次数的规则有两种，一是定义重复次数，二是定义开始时间和结束时间。如果同时设置了结束时间与重复次数，先结束的会覆盖后结束的，以先结束的为准。</li><li><strong>CronTrigger</strong>：基于Cron表达式的触发器。</li><li><strong>CalendarIntervalTrigger</strong>：基于日历的触发器，比简单触发器更多时间单位，且能智能区分大小月和平闰年。</li><li><strong>DailyTimeIntervalTrigger</strong>：基于日期的触发器，如每天的某个时间段。</li></ul><p>Trigger是有状态的：NONE, NORMAL, PAUSED, COMPLETE, ERROR, BLOCKED，状态之间转换关系：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/8432623/1681661011579-ae9616dd-0327-424b-947d-bffd78589dde.png#from=url&amp;height=337&amp;id=RIwRg&amp;originHeight=337&amp;originWidth=810&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=810" alt="">COMPLETE状态比较特殊，我在实际操作中发现，当Trigger长时间暂停后（具体时长不太确定）再恢复，状态就会变为COMPLETE，这种状态下无法再次启动该触发器。</p><h3 id="3-3-Scheduler">3.3 Scheduler</h3><p>调度器，是 Quartz 的指挥官，由 StdSchedulerFactory 产生，它是单例的。Scheduler中提供了 Quartz 中最重要的 API，默认是实现类是 StdScheduler。<br>Scheduler中主要的API大概分为三种：</p><ul><li><strong>操作Scheduler本身</strong>：例如start、shutdown等；</li><li><strong>操作Job</strong>：例如：addJob、pauseJob、pauseJobs、resumeJob、resumeJobs、getJobKeys、getJobDetail等</li><li><strong>操作Trigger</strong>：例如pauseTrigger、resumeTrigger等</li></ul><p>这些API使用非常简单，源码中也有完善的注释，这里不再赘述。</p><h2 id="4-Quartz进阶使用">4 Quartz进阶使用</h2><p>除了基本使用外，Quartz还有一些较为复杂的应用场景。</p><h3 id="4-1-多触发器的定时任务">4.1 多触发器的定时任务</h3><p>前文提过，一个JobDetail可以绑定多个触发器，这种场景还是有一些注意点的：</p><ul><li>首先，要通过storeDurably()方法将JobDetail设置为孤立后保存存储（没有触发器指向该作业的情况）；</li><li>Scheduler通过addJob()将给定的作业添加到计划程序中-没有关联的触发器。作业将处于“休眠”状态，直到使用触发器或调度程序对其进行调度；</li><li>触发器通过forJob(JobDetail jobDetail)指定要绑定的JobDetail，scheduleJob()方法只传入触发器，触发后将自动执行addJob过的绑定JobDetail。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.quartz.demo.schedule.SimpleJob;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiQuartzTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiJobTest</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 1、创建Scheduler（调度器）</span></span><br><span class="line">        <span class="type">SchedulerFactory</span> <span class="variable">schedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，与执行内容类SimpleJob绑定，注意要设置 .storeDurably()，否则报错</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(SimpleJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;job-group&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、分别构建Trigger实例</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;trigger-group&quot;</span>)</span><br><span class="line">                .startNow()<span class="comment">//立即生效</span></span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder</span><br><span class="line">                        .simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每隔3s执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">// 永久循环</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger2</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger2&quot;</span>, <span class="string">&quot;trigger-group&quot;</span>)</span><br><span class="line">                .startNow()<span class="comment">//立即生效</span></span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>) <span class="comment">//每隔5s执行一次</span></span><br><span class="line">                        .repeatForever()).build(); <span class="comment">// 永久循环</span></span><br><span class="line">        <span class="comment">//4、调度器中添加job</span></span><br><span class="line">        scheduler.addJob(jobDetail, <span class="literal">false</span>);</span><br><span class="line">        scheduler.scheduleJob(trigger);</span><br><span class="line">        scheduler.scheduleJob(trigger2);</span><br><span class="line">        <span class="comment">// 启动调度器</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">        <span class="comment">// 休眠任务执行时长</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">        scheduler.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Job中注入Bean">4.2 Job中注入Bean</h3><p>有时候，我们要在定时任务中操作数据库，但Job中无法直接注入数据层，解决这种问题，有两种解决方案。</p><h5 id="方案一：借助JobDataMap">方案一：借助JobDataMap</h5><p>在构建JobDetail时，可以将数据放入JobDataMap，基本类型的数据通过usingJobData方法直接放入，mapper这种类型数据手动put进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PersonMapper personMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建定时任务</span></span><br><span class="line"><span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(MajorJob.class)</span><br><span class="line">        .withIdentity(jobName, jobGroupName)</span><br><span class="line">        .usingJobData(<span class="string">&quot;jobName&quot;</span>, <span class="string">&quot;QuartzDemo&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 将mapper放入jobDetail的jobDataMap中</span></span><br><span class="line">jobDetail.getJobDataMap().put(<span class="string">&quot;personMapper&quot;</span>, personMapper);</span><br></pre></td></tr></table></figure><p>在job的执行过程中，可以从JobDataMap中取出数据，如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.quartz.demo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.quartz.demo.mapper.PersonMapper;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDataMap;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MajorJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="type">JobDataMap</span> <span class="variable">dataMap</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> dataMap.getString(<span class="string">&quot;jobName&quot;</span>);</span><br><span class="line">        <span class="type">PersonMapper</span> <span class="variable">personMapper</span> <span class="operator">=</span> (PersonMapper) dataMap.get(<span class="string">&quot;personMapper&quot;</span>);</span><br><span class="line">        <span class="comment">// 这样就可以执行mapper层方法了</span></span><br><span class="line">        List&lt;Person&gt; personList = personMapper.queryList();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&quot;</span></span><br><span class="line">                + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()) + <span class="string">&quot;--&quot;</span></span><br><span class="line">                + jobName + <span class="string">&quot;--&quot;</span> + personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案相对简单，但在持久化中会遇到mapper的序列化问题：<br>java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property ‘personMapper’ is not serializable: org.mybatis.spring.SqlSessionTemplate</p><h5 id="方案二：静态工具类">方案二：静态工具类</h5><p>创建工具类SpringContextJobUtil，实现ApplicationContextAware接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextJobUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;static-access&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext contex)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = contex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name获取bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getMessage(key, <span class="literal">null</span>, Locale.getDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper类上打上@Service注解，并赋予其name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;personMapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select id,name,age,sex,address,sect,skill,power,create_time createTime,modify_time modifyTime from mytest.persons&quot;)</span></span><br><span class="line">    List&lt;Person&gt; <span class="title function_">queryList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Job中通过SpringContextJobUtil的getBean获取mapper的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MajorJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> &#123;</span><br><span class="line">        <span class="type">JobDataMap</span> <span class="variable">dataMap</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobName</span> <span class="operator">=</span> dataMap.getString(<span class="string">&quot;jobName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonMapper</span> <span class="variable">personMapper</span> <span class="operator">=</span> (PersonMapper) SpringContextJobUtil.getBean(<span class="string">&quot;personMapper&quot;</span>);</span><br><span class="line">        List&lt;Person&gt; personList = personMapper.queryList();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&quot;</span></span><br><span class="line">                + DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(LocalDateTime.now()) + <span class="string">&quot;--&quot;</span></span><br><span class="line">                + jobName + <span class="string">&quot;--&quot;</span> + personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用这个方法。</p><h3 id="4-3-Quartz的持久化">4.3 Quartz的持久化</h3><p>定时任务的诸多要素，如任务名称、数量、状态、运行频率、运行时间等，是要存储起来的。JobStore，就是用来存储任务和触发器相关的信息的。<br>Quartz 中有两种存储任务的方式，一种在在内存（RAMJobStore），一种是在数据库（JDBCJobStore）。<br>Quartz 默认的 JobStore 是 RAMJobstore，也就是把任务和触发器信息运行的信息存储在内存中，用到了 HashMap、TreeSet、HashSet 等等数据结构，如果程序崩溃或重启，所有存储在内存中的数据都会丢失。所以我们需要把这些数据持久化到磁盘。<br>实现Quartz的持久化并不困难，按下列步骤操作即可：<br>1.添加相关依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Quartz 使用的连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.5</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.编写配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.ee.servlet.QuartzInitializerListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.PropertiesFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> muguozheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022/4/19 18:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Quartz配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取quartz.properties,将值初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">quartzProperties</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PropertiesFactoryBean</span> <span class="variable">propertiesFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertiesFactoryBean</span>();</span><br><span class="line">        propertiesFactoryBean.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;/quartz.properties&quot;</span>));</span><br><span class="line">        propertiesFactoryBean.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> propertiesFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将配置文件的数据加载到SchedulerFactoryBean中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SchedulerFactoryBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">schedulerFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        schedulerFactoryBean.setQuartzProperties(quartzProperties());</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化监听器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> QuartzInitializerListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> QuartzInitializerListener <span class="title function_">executorListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QuartzInitializerListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Scheduler对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Scheduler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Scheduler <span class="title function_">scheduler</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean().getScheduler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建quartz.properties配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 实例化ThreadPool时，使用的线程类为SimpleThreadPool</span><br><span class="line">org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool</span><br><span class="line"># 并发个数</span><br><span class="line">org.quartz.threadPool.threadCount=<span class="number">10</span></span><br><span class="line"># 优先级</span><br><span class="line">org.quartz.threadPool.threadPriority=<span class="number">3</span></span><br><span class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=<span class="literal">true</span></span><br><span class="line">org.quartz.jobStore.misfireThreshold=<span class="number">5000</span></span><br><span class="line"># 持久化使用的类</span><br><span class="line">org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="line"># 数据库中表的前缀</span><br><span class="line">org.quartz.jobStore.tablePrefix=QRTZ_</span><br><span class="line"># 数据源命名</span><br><span class="line">org.quartz.jobStore.dataSource=qzDS</span><br><span class="line"># qzDS 数据源</span><br><span class="line">org.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver</span><br><span class="line">org.quartz.dataSource.qzDS.URL=jdbc:mysql:<span class="comment">//localhost:3306/mytest?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">org.quartz.dataSource.qzDS.user=root</span><br><span class="line">org.quartz.dataSource.qzDS.password=root</span><br><span class="line">org.quartz.dataSource.qzDS.maxConnections=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>4.创建Quartz持久化数据的表<br>数据表初始化sql放置在External Libraries的org/quartz/impl/jdbcjobstore中，直接用其初始化相关表即可。要注意的是，用来放置这些表的库要与quartz.properties的库一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># In your Quartz properties file, you<span class="string">&#x27;ll need to set</span></span><br><span class="line"><span class="string"># org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># By: Ron Cordell - roncordell</span></span><br><span class="line"><span class="string">#  I didn&#x27;</span>t see <span class="built_in">this</span> anywhere, so I thought I<span class="string">&#x27;d post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_LOCKS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_CALENDARS;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_JOB_DETAILS(</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">DESCRIPTION VARCHAR(250) NULL,</span></span><br><span class="line"><span class="string">JOB_CLASS_NAME VARCHAR(250) NOT NULL,</span></span><br><span class="line"><span class="string">IS_DURABLE VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">IS_NONCONCURRENT VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">IS_UPDATE_DATA VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">REQUESTS_RECOVERY VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">DESCRIPTION VARCHAR(250) NULL,</span></span><br><span class="line"><span class="string">NEXT_FIRE_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">PREV_FIRE_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">PRIORITY INTEGER NULL,</span></span><br><span class="line"><span class="string">TRIGGER_STATE VARCHAR(16) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_TYPE VARCHAR(8) NOT NULL,</span></span><br><span class="line"><span class="string">START_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">END_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">CALENDAR_NAME VARCHAR(190) NULL,</span></span><br><span class="line"><span class="string">MISFIRE_INSTR SMALLINT(2) NULL,</span></span><br><span class="line"><span class="string">JOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SIMPLE_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">REPEAT_COUNT BIGINT(7) NOT NULL,</span></span><br><span class="line"><span class="string">REPEAT_INTERVAL BIGINT(12) NOT NULL,</span></span><br><span class="line"><span class="string">TIMES_TRIGGERED BIGINT(10) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_CRON_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">CRON_EXPRESSION VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TIME_ZONE_ID VARCHAR(80),</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SIMPROP_TRIGGERS</span></span><br><span class="line"><span class="string">  (</span></span><br><span class="line"><span class="string">    SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">    TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">    TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_1 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_2 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_3 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    INT_PROP_1 INT NULL,</span></span><br><span class="line"><span class="string">    INT_PROP_2 INT NULL,</span></span><br><span class="line"><span class="string">    LONG_PROP_1 BIGINT NULL,</span></span><br><span class="line"><span class="string">    LONG_PROP_2 BIGINT NULL,</span></span><br><span class="line"><span class="string">    DEC_PROP_1 NUMERIC(13,4) NULL,</span></span><br><span class="line"><span class="string">    DEC_PROP_2 NUMERIC(13,4) NULL,</span></span><br><span class="line"><span class="string">    BOOL_PROP_1 VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">    BOOL_PROP_2 VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_BLOB_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">BLOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_CALENDARS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">CALENDAR_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">CALENDAR BLOB NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_FIRED_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">ENTRY_ID VARCHAR(95) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">INSTANCE_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">FIRED_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">SCHED_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">PRIORITY INTEGER NOT NULL,</span></span><br><span class="line"><span class="string">STATE VARCHAR(16) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(190) NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(190) NULL,</span></span><br><span class="line"><span class="string">IS_NONCONCURRENT VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">REQUESTS_RECOVERY VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,ENTRY_ID))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SCHEDULER_STATE (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">INSTANCE_NAME VARCHAR(190) NOT NULL,</span></span><br><span class="line"><span class="string">LAST_CHECKIN_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">CHECKIN_INTERVAL BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_LOCKS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">LOCK_NAME VARCHAR(40) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,LOCK_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">commit;</span></span><br></pre></td></tr></table></figure><blockquote><p>来自: <a href="https://www.yuque.com/diaomaoshou/tqeueb/mut4c5cvkhxk8zlp">深入Quartz，更优雅地管理你的定时任务</a></p></blockquote><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Github：&lt;a href=&quot;https://github.com/ThinkMugz/springboot-demo-major%EF%BC%8C%E9%9C%80%E8%A6%81%E7%9A%84%E4%BC%99%E4%BC%B4%E5%84%BF%E8%87%A</summary>
      
    
    
    
    <category term="test" scheme="http://www.bojiboqi.fun/categories/test/"/>
    
    
    <category term="test" scheme="http://www.bojiboqi.fun/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>分布式基础理论：</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%EF%BC%9A/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%EF%BC%9A/</id>
    <published>2024-04-09T02:41:28.631Z</published>
    <updated>2024-04-09T04:01:36.725Z</updated>
    
    <content type="html"><![CDATA[<p><a name="NP7Vx"></a></p><h2 id="CAP和BASE理论：">CAP和BASE理论：</h2><ul><li><strong>CAP</strong> 也就是 <strong>Consistency（一致性）</strong>、<strong>Availability（可用性）</strong>、<strong>Partition Tolerance（分区容错性）</strong> 这三个单词首字母组合。</li><li>分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫网络分区。</li><li>网络分区容错性是分布式最基本的要求，如果不满足这个就是单体服务了</li><li><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong> 、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong></li><li>**基本可用：**基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用。</li><li>软状态：允许系统中的数据存在中间状态（<strong>CAP 理论中的数据不一致</strong>），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>最终一致性：是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</li><li><a href="https://www.bilibili.com/video/BV1rN4y1v76d/?spm_id_from=333.337.search-card.all.click">字节二面：什么是 CAP 定理？为什么CAP不能同时被满足?你再说说Base理论？_哔哩哔哩_bilibili</a><br><a name="roBuR"></a></li></ul><h2 id="基础概念：">基础概念：</h2><ul><li>微服务：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行</li><li>集群：是一种物理形态，将几台服务器集中在一起，实现同一业务</li><li>分布式：是一种工作方式</li><li>若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</li><li>将不同的业务分布在不同的地方</li><li>雪崩：在微服务之间进行服务调用是由于某一个服务故障，导致级联服务故障的现象，称为雪崩效应。雪崩效应描述的是提供方不可用，导致消费方不可用并将不可用逐渐放大的过程。</li><li>服务熔断：服务熔断是指调用方访问服务时通过断路器做代理进行访问，断路器会持续观察服务返回的成功、失败的状态，当失败超过设置的阈值时断路器打开，请求就不能真正地访问到服务了。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710217791490-e5ff7d6e-4fcd-4276-ac9f-5c500d011121.png#averageHue=%23fefdfd&amp;clientId=u4f6b4c10-ee61-4&amp;from=paste&amp;id=ud5e83c51&amp;originHeight=505&amp;originWidth=482&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u280ac7ef-d2be-4569-affc-d7f9222dc96&amp;title=" alt=""></p><ul><li>降级：对非核心业务降级运行：某些服务不处理，或者简单处理（抛异常、返回Null、返回Mock数据）<br><a name="eKj0T"></a></li></ul><h2 id="分布式一致性算法：">分布式一致性算法：</h2><p><a href="https://pdai.tech/md/arch/arch-z-theory.html#%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95">分布式系统 - 理论基础,理论及一致性算法</a><br><a name="XH58K"></a></p><h2 id="全局唯一ID实现：">全局唯一ID实现：</h2><p>UUID，雪花算法<br><a name="ZHSQC"></a></p><h2 id="分布式事务：">分布式事务：</h2><p><a href="https://pdai.tech/md/arch/arch-z-transection.html">https://pdai.tech/md/arch/arch-z-transection.html</a><br><a name="xZHrY"></a></p><h3 id="两段提交（2PC）：">两段提交（2PC）：</h3><p>两阶段提交，顾名思义就是要分两步提交。存在一个负责协调各个本地资源管理器的事务管理器，本地资源管理器一般是由数据库实现，事务管理器在第一阶段的时候询问各个资源管理器是否都就绪？如果收到每个资源的回复都是 yes，则在第二阶段提交事务，如果其中任意一个资源的回复是 no, 则回滚事务。<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710221219085-f041f0f6-55c0-400d-8dc4-d82a27518115.png#averageHue=%23f3e7da&amp;clientId=ua5c5ad91-1bf9-4&amp;from=paste&amp;id=uf20772bf&amp;originHeight=424&amp;originWidth=936&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=163451&amp;status=done&amp;style=none&amp;taskId=u0e8ee999-746a-4ccc-a26f-32330baf991&amp;title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710221233260-6e969300-e2da-431e-bbd6-66e5d705e29d.png#averageHue=%23f4e9dc&amp;clientId=ua5c5ad91-1bf9-4&amp;from=paste&amp;id=u6a038481&amp;originHeight=422&amp;originWidth=970&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=145857&amp;status=done&amp;style=none&amp;taskId=u6e090747-58a2-4db1-bfab-769aa4a52e7&amp;title=" alt="image.png"></p><p>存在的问题：</p><ul><li><strong>网络抖动导致的数据不一致</strong>：第二阶段中协调者向参与者发送commit命令之后，一旦此时发生网络抖动，导致一部分参与者接收到了commit请求并执行，可其他未接到commit请求的参与者无法执行事务提交。进而导致整个分布式系统出现了数据不一致。</li><li><strong>超时导致的同步阻塞问题</strong>：2PC中的所有的参与者节点都为事务阻塞型，当某一个参与者节点出现通信超时，其余参与者都会被动阻塞占用资源不能释放。</li><li><strong>单点故障的风险</strong>：由于严重的依赖协调者，一旦协调者发生故障，而此时参与者还都处于锁定资源的状态，无法完成事务commit操作。虽然协调者出现故障后，会重新选举一个协调者，可无法解决因前一个协调者宕机导致的参与者处于阻塞状态的问题。<br><a name="UStYH"></a></li></ul><h3 id="三段提交（3PC）：">三段提交（3PC）：</h3><p><strong>3PC的三个阶段分别是CanCommit、PreCommit、DoCommit</strong>：</p><ul><li><strong>CanCommit</strong>：协调者向所有参与者发送CanCommit命令，询问是否可以执行事务提交操作。如果全部响应YES则进入下一个阶段。</li><li><strong>PreCommit</strong>：协调者向所有参与者发送PreCommit命令，询问是否可以进行事务的预提交操作，参与者接收到PreCommit请求后，如参与者成功的执行了事务操作，则返回Yes响应，进入最终commit阶段。一旦参与者中有向协调者发送了No响应，或因网络造成超时，协调者没有接到参与者的响应，协调者向所有参与者发送abort请求，参与者接受abort命令执行事务的中断。</li><li><strong>DoCommit</strong>：在前两个阶段中所有参与者的响应反馈均是YES后，协调者向参与者发送DoCommit命令正式提交事务，如协调者没有接收到参与者发送的ACK响应，会向所有参与者发送abort请求命令，执行事务的中断。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710221500122-87fdab18-74eb-49f7-a517-98f2d8a40315.png#averageHue=%23fbf9f3&amp;clientId=ua5c5ad91-1bf9-4&amp;from=paste&amp;height=644&amp;id=ued00879a&amp;originHeight=805&amp;originWidth=541&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=147029&amp;status=done&amp;style=none&amp;taskId=u16553309-7e2b-43e4-820d-7171ea9c24b&amp;title=&amp;width=432.8" alt="image.png"></p><p><a name="LQioF"></a></p><h2 id="分布式事务方案之柔性事务：">分布式事务方案之柔性事务：</h2><blockquote><p>柔性事务：分布式理论的AP，遵循BASE，允许一定时间内不同节点的数据不一致，但要求最终一致。</p></blockquote><p><a name="ZTZbQ"></a></p><h3 id="补偿事务-TCC">补偿事务 (TCC)</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710221684912-a3b68840-73cc-43da-bb4e-12a6b821cd1b.png#averageHue=%23f8f6f5&amp;clientId=ua5c5ad91-1bf9-4&amp;from=paste&amp;height=399&amp;id=u080baafd&amp;originHeight=499&amp;originWidth=1062&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=91373&amp;status=done&amp;style=none&amp;taskId=u0343e58a-eb67-4f83-9551-6445824b567&amp;title=&amp;width=849.6" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710221927506-73fde269-c2fa-4e36-ab8f-41bc43694861.png#averageHue=%23f5ebe1&amp;clientId=ua5c5ad91-1bf9-4&amp;from=paste&amp;id=u01dd6578&amp;originHeight=868&amp;originWidth=1508&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=508569&amp;status=done&amp;style=none&amp;taskId=u195e4eb8-a57a-4c73-889d-754f0a56807&amp;title=" alt="image.png"><br><a name="t59Al"></a></p><h2 id="如何保证接口的幂等性：">如何保证接口的幂等性：</h2><p><a href="https://www.bilibili.com/video/BV1JJ4m1x7yg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=add54d0fcd49c96c6c124259f9775bc3">https://www.bilibili.com/video/BV1JJ4m1x7yg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=add54d0fcd49c96c6c124259f9775bc3</a><a href="https://mp.weixin.qq.com/s/7P2KbWjjX5YPZCInoox-xQ">高并发下如何保证接口的幂等性？</a></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;NP7Vx&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CAP和BASE理论：&quot;&gt;CAP和BASE理论：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CAP&lt;/strong&gt; 也就是 &lt;strong&gt;Consistency（一致性）&lt;/strong&gt;、&lt;stron</summary>
      
    
    
    
    <category term="分布式" scheme="http://www.bojiboqi.fun/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="分布式基础" scheme="http://www.bojiboqi.fun/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>幂等</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/%E5%B9%82%E7%AD%89/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/%E5%B9%82%E7%AD%89/</id>
    <published>2024-04-09T02:40:29.961Z</published>
    <updated>2024-04-09T04:01:38.905Z</updated>
    
    <content type="html"><![CDATA[<p><a name="NFWGq"></a></p><h4 id="HTTP请求的幂等：">HTTP请求的幂等：</h4><p>Http请求的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET">GET</a> ， <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD">HEAD</a> ， <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT">PUT</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE">DELETE</a> 等方法都是<strong>幂等</strong>的，而 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST">POST</a> 方法不是。<br><a name="Y1GkV"></a></p><h4 id="幂等问题产生原因：">幂等问题产生原因：</h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712118929826-ccd3fd56-e1bf-4e78-adad-0fa1f7879f94.png#averageHue=%23eeeeee&amp;clientId=uf4303387-4bd9-4&amp;from=paste&amp;height=236&amp;id=u2abf33ca&amp;originHeight=236&amp;originWidth=771&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33571&amp;status=done&amp;style=none&amp;taskId=u35fd01dc-a851-4e3d-a593-cce6c44bbd8&amp;title=&amp;width=771" alt="Snipaste_2024-04-03_12-35-28.png"><br><a name="wiM4C"></a></p><h4 id="实现幂等的方案：">实现幂等的方案：</h4><p><a href="https://blog.csdn.net/youanyyou/article/details/114464708">Spring Boot 实现接口幂等性的 4 种方案！还有谁不会？-CSDN博客</a><br />1.数据库唯一主键<br />2.数据库乐观锁：<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712119880908-663fd4dc-59c6-4a1e-b99b-8ae54d231ed2.png#averageHue=%23c3c18c&amp;clientId=uf4303387-4bd9-4&amp;from=paste&amp;height=354&amp;id=uafdca0d7&amp;originHeight=354&amp;originWidth=941&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=300509&amp;status=done&amp;style=none&amp;taskId=u4be90042-dbe9-4418-9c25-f6fdede7af8&amp;title=&amp;width=941" alt="image.png"><br />3.防重Token:<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712119994513-f536f876-270f-4cda-afc4-599e6d10907e.png#averageHue=%23bcc684&amp;clientId=uf4303387-4bd9-4&amp;from=paste&amp;height=470&amp;id=ud01bf0a6&amp;originHeight=470&amp;originWidth=953&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=346051&amp;status=done&amp;style=none&amp;taskId=u1154d3cd-3e8a-4c12-ab14-00146879c3f&amp;title=&amp;width=953" alt="image.png"><br />4.分布式锁保证接口幂等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="title class_">RLock</span> lock = redissonClient.<span class="title function_">getLock</span>(<span class="variable constant_">LOCK_USER_REGISTER_KEY</span> + requestParam.<span class="title function_">getUsername</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            tryLock表示尝试获取锁，获取成功返回true否则返回false</span></span><br><span class="line">            <span class="keyword">if</span> (lock.<span class="title function_">tryLock</span>()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    int inserted = baseMapper.<span class="title function_">insert</span>(<span class="title class_">BeanUtil</span>.<span class="title function_">toBean</span>(requestParam, <span class="title class_">UserDO</span>.<span class="property">class</span>));</span><br><span class="line">                    <span class="keyword">if</span> (inserted &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="variable constant_">USER_SAVE_ERROR</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="title class_">DuplicateKeyException</span> ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="variable constant_">USER_EXIST</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                userRegisterCachePenetrationBloomFilter.<span class="title function_">add</span>(requestParam.<span class="title function_">getUsername</span>());</span><br><span class="line">                groupService.<span class="title function_">saveGroup</span>(requestParam.<span class="title function_">getUsername</span>(), <span class="string">&quot;默认分组&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="variable constant_">USER_NAME_EXIST</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.<span class="title function_">unlock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.状态机实现幂等：</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;NFWGq&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;HTTP请求的幂等：&quot;&gt;HTTP请求的幂等：&lt;/h4&gt;
&lt;p&gt;Http请求的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Method</summary>
      
    
    
    
    <category term="分布式" scheme="http://www.bojiboqi.fun/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="分布式基础" scheme="http://www.bojiboqi.fun/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Netty_</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Netty_/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Netty_/</id>
    <published>2024-04-09T02:39:11.590Z</published>
    <updated>2024-04-09T04:01:27.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xiaolincoding.com/network/2_http/http_rpc.html#%E4%BB%8E-tcp-%E8%81%8A%E8%B5%B7">3.8 既然有 HTTP 协议，为什么还要有 RPC？</a><br /><a href="https://nyimac.gitee.io/2021/04/18/Netty%E5%AD%A6%E4%B9%A0%E4%B9%8BNIO%E5%9F%BA%E7%A1%80/">Netty学习之NIO基础 - Nyima’s Blog</a><br /><a href="https://dongzl.github.io/netty-handbook/#/_content/chapter03">Netty 学习手册</a><br><a name="yfgQ6"></a></p><h2 id="JavaNIO">JavaNIO:</h2><p><a name="ya8Rr"></a></p><h4 id="基本概念：">基本概念：</h4><p>Netty可以理解为NIO的改进，为了更好的理解Netty我们需要先了解NIO：</p><blockquote><p>1.NIO 有三大核心部分: <strong>Channel（通道）、Buffer（缓冲区）、Selector（选择器）</strong><br>2.NIO 是<strong>面向缓冲区，或者面向块编程</strong>的。<br>3.NIO 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情<br>4.NIO 是可以做到用一个线程来处理多个操作的。假设有 10000 个请求过来,根据实际情况，可以分配 50 或者 100 个线程来处理。不像之前的阻塞 IO 那样，非得分配 10000 个。<br>5.HTTP 2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160319655-a0b22e2e-e3a0-4022-b7b0-782cd58e5171.png#averageHue=%230c0c0c&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u7a658407&amp;originHeight=1005&amp;originWidth=904&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=61052&amp;status=done&amp;style=none&amp;taskId=u14db07ca-09f6-41a2-8b4e-8664270d8b7&amp;title=" alt="image.png"></p><ol><li>每个 Channel 都会对应一个 Buffer。</li><li>Selector 对应一个线程，一个线程对应多个 Channel（连接）。</li><li>该图反应了有三个 Channel 注册到该 Selector //程序</li><li>程序切换到哪个 Channel 是由事件决定的，Event 就是一个重要的概念。事件是指发生在通道上的某种状态或操作，比如通道已准备好读取数据、通道已准备好写入数据等。</li><li>Selector 会根据不同的事件，在各个通道上切换。</li><li>Buffer 就是一个内存块，底层是有一个数组。</li><li>数据的读取写入是通过 Buffer，这个和 BIO，BIO 中要么是输入流，或者是输出流，不能双向，但是 NIO 的 Buffer 是可以读也可以写，需要 flip 方法切换 Channel 是双向的，可以返回底层操作系统的情况，比如 Linux，底层的操作系统通道就是双向的。</li><li>客户端总是跟 Buffer 读写, 后由 Channel 完成服务器与 Buffer 间通信<br><a name="pYzI5"></a></li></ol><h4 id="缓冲区：">缓冲区：</h4><p>缓冲区（Buffer）：缓冲区本质上是一个<strong>可以读写数据的内存块</strong>，可以理解成是一个<strong>容器对象（含数组）</strong><br><a name="tZvrO"></a></p><h6 id="核心属性：">核心属性：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span><br><span class="line">private int mark = -1;</span><br><span class="line">private int position = 0;</span><br><span class="line">private int limit;</span><br><span class="line">private int capacity;</span><br><span class="line"></span><br><span class="line">capacity：缓冲区的容量。</span><br><span class="line">limit：缓冲区的界限；</span><br><span class="line">position：下一个读写位置的索引；</span><br><span class="line">mark：记录当前position的值</span><br></pre></td></tr></table></figure><p>put方法：</p><ul><li>put()方法可以将一个数据放入到缓冲区中。</li><li>进行该操作后，postition的值会+1，指向下一个可以放入的位置。capacity = limit ，为缓冲区容量的值。</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145709.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160807731-94eef9dd-10a4-4ccf-be6f-9fc274b6630e.png#averageHue=%23f7f3f3&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u077e5d4f&amp;originHeight=258&amp;originWidth=858&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ub2c4dfa3-2356-432b-820f-83605d23c2a&amp;title=" alt=""></a><br><a name="WjwkD"></a></p><h6 id="flip-方法">flip()方法</h6><ul><li>flip()方法会<strong>切换对缓冲区的操作模式</strong>，由写-&gt;读 / 读-&gt;写</li><li>进行该操作后<ul><li>如果是写模式-&gt;读模式，position = 0 ， limit 指向最后一个元素的下一个位置，capacity不变</li><li>如果是读-&gt;写，则恢复为put()方法中的值</li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145753.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160813308-ff6cb82c-2880-4bb3-a81b-edb638aeb7de.png#averageHue=%23f6f1f1&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u9381044f&amp;originHeight=221&amp;originWidth=883&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uca325aa6-7976-412f-8e8c-80aae29fcaf&amp;title=" alt=""></a><br><a name="SgQ7Y"></a></p><h6 id="get-方法">get()方法</h6><ul><li>get()方法会读取缓冲区中的一个值</li><li>进行该操作后，position会+1，如果超过了limit则会抛出异常</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201109145822.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160832934-da656d20-ff09-487d-8a6e-398481408c87.png#averageHue=%23f5f0f0&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u3a0ccd38&amp;originHeight=197&amp;originWidth=853&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uc15dd6bb-cf29-4b9e-ac66-723852d9ddf&amp;title=" alt=""></a><br><a name="wUL6z"></a></p><h6 id="还有rewind-和clean-方法">还有rewind()和clean()方法</h6><p><a name="mS49M"></a></p><h6 id="分散读取">分散读取</h6><p>分散读取（Scattering Reads）是指<strong>从Channel 中读取的数据“分散”到多个Buffer 中</strong><br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160925055-2a376e5f-12df-41c7-bead-31691407c7db.png#averageHue=%23f8f8f8&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u8425a429&amp;originHeight=343&amp;originWidth=549&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u28f79cf7-3c7a-4412-b1ce-22a9e77132b&amp;title=" alt=""><br><a name="fnoof"></a></p><h6 id="聚集写入">聚集写入</h6><p>聚集写入（Gathering Writes）是指将<strong>多个Buffer 中的数据“聚集”到Channel</strong><br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710160933821-eae55eaf-de2b-4505-832c-3b83a67a266e.png#averageHue=%23f8f7f7&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u4f38b8e2&amp;originHeight=309&amp;originWidth=574&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uea8ea6bd-abc2-423b-8baa-1ebbe9a6690&amp;title=" alt=""><br><a name="rf1h9"></a></p><h4 id="通道：">通道：</h4><ol><li>NIO 的通道类似于流，但有些区别如下：<ul><li>通道可以同时进行读写，而流只能读或者只能写</li><li>通道可以实现异步读写数据</li><li>通道可以从缓冲读数据，也可以写数据到缓冲:</li><li>socket 就绪会形成⼀个通道. 通道代表⼀个就绪的socket</li><li><br /></li></ul><a name="sNmrI"></a></li></ol><h4 id="选择器：">选择器：</h4><p>NIO中⾮阻塞I/O采⽤了基于Reactor模式的⼯作⽅式，I/O调⽤不会被阻塞，⽽是注册感兴趣的特 定I/O事件，如可读数据到达、新的套接字连接等，在发⽣特定事件时，系统再通知我们。NIO中 实现⾮阻塞I/O的核⼼对象是Selector，Selector是注册各种I/O事件的地⽅，⽽且当那些事件发⽣ 时，就是Seleetor告诉我们所发⽣的事件</p><ol><li>Java 的 NIO，用非阻塞的 IO 方式。可以用一个线程，处理多个的客户端连接，就会使用到 Selector（选择器）。</li><li>Selector 能够检测多个注册的通道上是否有事件发生（注意：多个 Channel 以事件的方式可以注册到同一个 Selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。【示意图】</li><li>只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。</li><li>避免了多线程之间的上下文切换导致的开销。</li><li><br /></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710161074610-72c661ca-474c-48ef-ba6d-31e420360899.png#averageHue=%23555965&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=ub00062c9&amp;originHeight=575&amp;originWidth=589&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=145647&amp;status=done&amp;style=none&amp;taskId=u2be3d532-8d30-4554-946f-eb83512c44c&amp;title=" alt="image.png"></p><ol><li>Netty 的 IO 线程 NioEventLoop 聚合了 Selector（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。</li><li>当线程从某客户端 Socket 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。</li><li>线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。</li><li>由于读写操作都是非阻塞的，这就可以充分提升 IO 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。</li><li>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I/O 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。<br><a name="P7inN"></a></li></ol><h2 id="Netty概述：">Netty概述：</h2><p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端<br /><strong>注意</strong>：netty的异步还是基于多路复用的，并没有实现真正意义上的异步IO<br><a name="jACK6"></a></p><h4 id="工作原理：">工作原理：</h4><p>主从反应模型的Reactor:<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710202161583-1c46c3f0-cc35-4f4e-9f4d-caf65d8f5328.png#averageHue=%23f7f7f7&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;height=511&amp;id=ufd473515&amp;originHeight=639&amp;originWidth=945&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=115981&amp;status=done&amp;style=none&amp;taskId=u8d4af0d9-480b-4acc-9b67-95f69ace073&amp;title=&amp;width=756" alt="image.png"><br />简单版：<br />Netty 主要基于主从 Reactors 多线程模型（如图）做了一定的改进，其中主从 Reactor 多线程模型有多个 Reactor<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710162603004-57a345fa-7c96-4d02-ab4f-9325ff21b475.png#averageHue=%23beca88&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=u868b9a01&amp;originHeight=432&amp;originWidth=1440&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=109330&amp;status=done&amp;style=none&amp;taskId=ubb9e8e42-e9a5-4ee9-aa47-99aa3232223&amp;title=" alt="image.png"></p><ol><li>BossGroup 线程维护 Selector，只关注 Accecpt</li><li>当接收到 Accept 事件，获取到对应的 SocketChannel，封装成 NIOScoketChannel 并注册到 Worker 线程（事件循环），并进行维护</li><li>当 Worker 线程监听到 Selector 中通道发生自己感兴趣的事件后，就进行处理（就由 handler），注意 handler 已经加入到通道</li></ol><p>详细版：<br /><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710162668323-13682f37-e03b-4498-8418-cdeff4d78676.png#averageHue=%23545864&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;id=uf548ed95&amp;originHeight=595&amp;originWidth=711&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=282846&amp;status=done&amp;style=none&amp;taskId=u9aa9a32f-117e-4f48-9f6c-ba789b021dd&amp;title=" alt="image.png"></p><ol><li>Netty 抽象出两组线程池 BossGroup 专门负责接收客户端的连接，WorkerGroup 专门负责网络的读写</li><li>BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup</li><li>NioEventLoopGroup 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 NioEventLoop</li><li>NioEventLoop 表示一个不断循环的执行处理任务的线程，每个 NioEventLoop 都有一个 Selector，用于监听绑定在其上的 socket 的网络通讯</li><li>NioEventLoopGroup 可以有多个线程，即可以含有多个 NioEventLoop</li><li>每个 BossNioEventLoop 循环执行的步骤有 3 步<ul><li>轮询 accept 事件</li><li>处理 accept 事件，与 client 建立连接，生成 NioScocketChannel，并将其注册到某个 worker NIOEventLoop 上的 Selector</li><li>处理任务队列的任务，即 runAllTasks</li></ul></li><li>每个 Worker NIOEventLoop 循环执行的步骤<ul><li>轮询 read，write 事件</li><li>处理 I/O 事件，即 read，write 事件，在对应 NioScocketChannel 处理</li><li>处理任务队列的任务，即 runAllTasks</li></ul></li><li>每个 Worker NIOEventLoop 处理业务时，会使用 pipeline（管道），pipeline 中包含了 channel，即通过 pipeline 可以获取到对应通道，管道中维护了很多的处理器<br><a name="VNk0p"></a></li></ol><h4 id="案例：">案例：</h4><p>eg1:</p><ol><li>Netty 服务器在 6668 端口监听，客户端能发送消息给服务器&quot;hello,服务器~&quot;</li><li>服务器可以回复消息给客户端&quot;hello,客户端~&quot;</li><li>目的：对 Netty 线程模型有一个初步认识，便于理解 Netty 模型理论</li><li>看老师代码演示 5.1 编写服务端 5.2 编写客户端 5.3 对 netty 程序进行分析，看看 netty 模型特点 说明：创建 Maven 项目，并引入 Netty 包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class NettyServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //创建BossGroup 和 WorkerGroup</span><br><span class="line">        //说明</span><br><span class="line">        //1. 创建两个线程组 bossGroup 和 workerGroup</span><br><span class="line">        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span><br><span class="line">        //3. 两个都是无限循环</span><br><span class="line">        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span><br><span class="line">        //   默认实际 cpu核数 * 2</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //创建服务器端的启动对象，配置参数</span><br><span class="line">            ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class="line">            //使用链式编程来进行设置</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup) //设置两个线程组</span><br><span class="line">                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态</span><br><span class="line">                    //          .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span><br><span class="line">                    </span><br><span class="line">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;//创建一个通道初始化对象(匿名对象)</span><br><span class="line">                        //给pipeline 设置处理器</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            System.out.println(&quot;客户socketchannel hashcode=&quot; + ch.hashCode());</span><br><span class="line">                            //可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel </span><br><span class="line">                            //对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue</span><br><span class="line">                            ch.pipeline().addLast(new NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;.....服务器 is ready...&quot;);</span><br><span class="line"></span><br><span class="line">            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span><br><span class="line">            //启动服务器(并绑定端口)</span><br><span class="line">            ChannelFuture cf = bootstrap.bind(6668).sync();</span><br><span class="line"></span><br><span class="line">            //给cf 注册监听器，监控我们关心的事件</span><br><span class="line"></span><br><span class="line">            cf.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                    if (cf.isSuccess()) &#123;</span><br><span class="line">                        System.out.println(&quot;监听端口 6668 成功&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        System.out.println(&quot;监听端口 6668 失败&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //对关闭通道进行监听</span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 说明</span><br><span class="line"> * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span><br><span class="line"> * 2. 这时我们自定义一个Handler , 才能称为一个handler</span><br><span class="line"> */</span><br><span class="line">public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    //读取数据实际(这里我们可以读取客户端发送的消息)</span><br><span class="line">    /**</span><br><span class="line">     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span><br><span class="line">     * 2. Object msg: 就是客户端发送的数据 默认Object</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName() + &quot; channle =&quot; + ctx.channel());</span><br><span class="line">        System.out.println(&quot;server ctx =&quot; + ctx);</span><br><span class="line">        System.out.println(&quot;看看channel 和 pipeline的关系&quot;);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站</span><br><span class="line"></span><br><span class="line">        //将 msg 转成一个 ByteBuf</span><br><span class="line">        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;客户端发送消息是:&quot; + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(&quot;客户端地址:&quot; + channel.remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //数据读取完毕</span><br><span class="line">    @Override</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //writeAndFlush 是 write + flush</span><br><span class="line">        //将数据写入到缓存，并刷新</span><br><span class="line">        //一般讲，我们对这个发送的数据进行编码</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理异常, 一般是需要关闭通道</span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class NettyClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //客户端需要一个事件循环组</span><br><span class="line">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            //创建客户端启动对象</span><br><span class="line">            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            //设置相关参数</span><br><span class="line">            bootstrap.group(group) //设置线程组</span><br><span class="line">                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)</span><br><span class="line">                    .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;客户端 ok..&quot;);</span><br><span class="line">            //启动客户端去连接服务器端</span><br><span class="line">            //关于 ChannelFuture 要分析，涉及到netty的异步模型</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6668).sync();</span><br><span class="line">            //给关闭通道进行监听</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class NettyClientHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    //当通道就绪就会触发该方法</span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;client &quot; + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, server: (&gt;^ω^&lt;)喵&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //当通道有读取事件时，会触发</span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;服务器回复的消息:&quot; + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(&quot;服务器的地址： &quot; + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示： 每个 Channel 都将会被分配⼀个 ChannelPipeline  ，而ChannelPipeline中都有一个handler相当于Channel中都绑定了一个handler处理器。<br />eg2:</p><ol><li>用户程序自定义的普通任务【举例说明】</li><li>用户自定义定时任务</li><li>非当前 Reactor 线程调用 Channel 的各种方法 例如在推送系统的业务线程里面，根据用户的标识，找到对应的 Channel 引用，然后调用 Write 类方法向该用户推送消息，就会进入到这种场景。最终的 Write 会提交到任务队列中后被异步消费<br><a name="tR40n"></a></li></ol><h2 id="Netty异步模型：">Netty异步模型：</h2><p>NioEventLoop 中可以按照一定顺序进行数据处理 , 如数据到来后 , 按照下面的流程执行一系列操作 ;<br /><strong>读取数据 -&gt; 数据解码 -&gt; 业务逻辑处理 -&gt; 数据编码 -&gt; 数据发送</strong><br><a name="gchJ2"></a></p><h4 id="NioEventLoop-中封装内容">NioEventLoop 中封装内容 :</h4><ul><li>选择器 Selector</li><li>任务队列 TaskQueue</li><li>调度任务队列 ScheduleTaskQueue</li><li>NIO 通道 NioChannel</li><li>管道 ChannelPipeline<br><a name="qyOta"></a></li></ul><h4 id="1-异步操作概念">1 . 异步操作概念 :</h4><p>调用者调用一个异步操作后 , 并不能马上知道该操作的返回值 , 该操作也不会马上执行完成 , 该操作完成后 , 会通过回调机制 , 如 通知 , 注册的回调函数等机制通知调用者 ;<br><a name="Qxtlf"></a></p><h4 id="2-Netty-中的异步操作与-ChannelFuture-返回值">2 . Netty 中的异步操作与 ChannelFuture 返回值 :</h4><p>① 异步操作 : Netty 模型中凡是关于 IO 的操作 , 如绑定端口 ( Bind ) , 远程连接 ( Connect ) , 读取数据 ( Read ) , 写出数据 ( Write ) 等操作都是异步操作 ;<br />② 异步操作返回值 : 上述 IO 操作返回值都是 ChannelFuture 类型实例 , ChannelFuture 是异步 IO 操作的返回结果 ;<br />③ 在服务器端绑定端口号时 , 调用 Bootstrap 的 bind 方法 , 会返回 ChannelFuture 对象 ;<br />④ 在客户端调用 Bootstrap 的 connect 方法 , 也会返回 ChannelFuture 对象 ;<br><a name="uvVqY"></a></p><h4 id="3-Netty-中的异步操作机制">3 . Netty 中的异步操作机制 :</h4><p>① Future-Listener 机制 : Future 表示当前不知道结果 , 在未来的某个时刻才知道结果 , Listener 表示监听操作 , 监听返回的结果 ;<br />② Netty 异步模型的两个基础 : Future ( ChannelFuture 未来知道结果 ) , Callback ( 监听回调 ) ;<br><a name="FTkfY"></a></p><h4 id="4-以客户端写出数据到服务器端为例">4 . 以客户端写出数据到服务器端为例 :</h4><p>客户端写出数据 : 客户端调用写出数据方法 ChannelFuture writeAndFlush(Object msg) , 向服务器写出数据 ;<br />操作耗时 : 假设在服务器中接收到该数据后 , 要执行一个非常耗时的操作才能返回结果 , 就是操作非常耗时 ;<br />客户端不等待 : 客户端这里写出了数据 , 肯定不能阻塞等待写出操作的结果 , 需要立刻执行下面的操作 , 因此该方法是异步的 ;<br />客户端监听 : writeAndFlush 方法返回一个 ChannelFuture 对象 , 如果客户端需要该操作的返回结果 , 那么通过 ChannelFuture 可以监听该写出方法是否成功 ;<br /><strong>5 . 异步操作返回结果 :</strong><br /><strong>① 返回结果 : Future 表示异步 IO 操作执行结果 , 通过该 Future 提供的 检索 , 计算 等方法检查异步操作是否执行完成 ;</strong><br /><strong>② 常用接口 : ChannelFuture 继承了 Future , 也是一个接口 , 可以为该接口对象注册监听器 , 当异步任务完成后会回调该监听器方法 ;</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface ChannelFuture extends Future&lt;Void&gt;</span><br></pre></td></tr></table></figure><p><strong>6 . Future 链式操作 :</strong> 这里以读取数据 , 处理后返回结果为例 ;</p><ul><li>数据读取操作 ;</li><li>对读取的数据进行解码处理 ;</li><li>执行业务逻辑</li><li>将数据编码 ;</li><li>将编码后的数据写出 ;</li></ul><p>上述 5 个步骤 , 每个数据处理操作 , 都有与之对应的 Handler 处理器 ;<br />异步机制 : 在 Handler 处理器中需要实现异步机制 , 一般使用 Callback 回调 , 或 Future 机制 ;<br />链式操作优势 : 上述的链式操作 , 简洁 , 高效 , 可以让开发者快速开发高性能 , 高可靠性服务器 , 只关注业务逻辑 , 不用过多的将精力浪费在网络基础功能开发上 ;这里的网络基础功能就是高可靠性 , 高性能的网络传输模块 ;<br><a name="rDhra"></a></p><h4 id="Future-Listener-机制：">Future-Listener 机制：</h4><p>1 . Future-Listener 机制 :<br />① Future 返回值 : 在 Netty 中执行 IO 操作 , 如 bind , read , write , connect 等方法 , 会立刻返回 ChannelFuture 对象 ;<br />② ChannelFuture 返回时状态 : 调用 IO 方法后 , 立刻返回 ChannelFuture 对象 , 此时该操作未完成 ;<br />③ 注册监听器 : ChannelFuture 可以设置 ChannelFutureListener 监听器 , 监听该 IO 操作完成状态 , 如果 IO 操作完成 , 那么会回调其 public void operationComplete(ChannelFuture future) throws Exception 接口实现方法 ;<br />④ IO 操作执行状态判定 : 在 operationComplete 方法中通过 调用 ChannelFuture future 参数的如下方法 , 判定当前 IO 操作完成状态 ;<br />future.isDone() : IO 操作是否完成 ;<br />future.isSuccess() : IO 操作是否成功 ; ( 常用 )<br />future.isCancelled() : IO 操作是否被取消 ;<br />future.cause() : IO 操作的失败原因 ;<br><a name="lcUDo"></a></p><h4 id="案例：-2">案例：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package com.example.nettyFuture;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author redA</span><br><span class="line"> * @时间: 2024年03月12日 8:19</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import io.netty.bootstrap.ServerBootstrap;</span><br><span class="line">import io.netty.channel.*;</span><br><span class="line">import io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Netty 案例服务器端</span><br><span class="line"> */</span><br><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 1. 创建 BossGroup 线程池 和 WorkerGroup 线程池, 其中维护 NioEventLoop 线程</span><br><span class="line">        //     NioEventLoop 线程中执行无限循环操作</span><br><span class="line"></span><br><span class="line">        // BossGroup 线程池 : 负责客户端的连接</span><br><span class="line">        // 指定线程个数 : 客户端个数很少, 不用很多线程维护, 这里指定线程池中线程个数为 1</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class="line">        // WorkerGroup 线程池 : 负责客户端连接的数据读写</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        // 2. 服务器启动对象, 需要为该对象配置各种参数</span><br><span class="line">        ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class="line">        bootstrap.group(bossGroup, workerGroup) // 设置 主从 线程组 , 分别对应 主 Reactor 和 从 Reactor</span><br><span class="line">                .channel(NioServerSocketChannel.class)  // 设置 NIO 网络套接字通道类型</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, 128)  // 设置线程队列维护的连接个数</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, true)  // 设置连接状态行为, 保持连接状态</span><br><span class="line">                .childHandler(  // 为 WorkerGroup 线程池对应的 NioEventLoop 设置对应的事件 处理器 Handler</span><br><span class="line">                        new ChannelInitializer&lt;SocketChannel&gt;() &#123;// 创建通道初始化对象</span><br><span class="line">                            @Override</span><br><span class="line">                            protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                                // 该方法在服务器与客户端连接建立成功后会回调</span><br><span class="line">                                // 为 管道 Pipeline 设置处理器 Hanedler</span><br><span class="line">                                // 这里暂时设置为 null , 执行不会失败 , 服务器绑定端口会成功</span><br><span class="line">                                ch.pipeline().addLast(null);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">        System.out.println(&quot;服务器准备完毕 ...&quot;);</span><br><span class="line"></span><br><span class="line">        ChannelFuture channelFuture = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 绑定本地端口, 进行同步操作 , 并返回 ChannelFuture</span><br><span class="line">            channelFuture = bootstrap.bind(8888).sync();</span><br><span class="line">            System.out.println(&quot;服务器开始监听 8888 端口 ...&quot;);</span><br><span class="line"></span><br><span class="line">            // ( 本次示例核心代码 ) ----------------------------------------------------------</span><br><span class="line">            // 监听绑定操作的结果 ( 本次示例核心代码 )</span><br><span class="line">            // 添加 ChannelFutureListener 监听器, 监听 bind 操作的结果</span><br><span class="line">            channelFuture.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">                    if(future.isDone())&#123;</span><br><span class="line">                        System.out.println(&quot;绑定端口完成&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if(future.isSuccess())&#123;</span><br><span class="line">                        System.out.println(&quot;绑定端口成功&quot;);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        System.out.println(&quot;绑定端口失败&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if(future.isCancelled())&#123;</span><br><span class="line">                        System.out.println(&quot;绑定端口取消&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(&quot;失败原因 : &quot; + future.cause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            // ( 本次示例核心代码 ) ----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            // 关闭通道 , 开始监听操作</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 出现异常后, 优雅的关闭</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1710202909664-a1c749a2-1045-4761-b4b6-1635a0186ccc.png#averageHue=%232e2d30&amp;clientId=ucb4dd446-2aa3-4&amp;from=paste&amp;height=211&amp;id=u1400ef28&amp;originHeight=264&amp;originWidth=687&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=62728&amp;status=done&amp;style=none&amp;taskId=u6de89306-c833-48e7-be73-e1369c4c5d6&amp;title=&amp;width=549.6" alt="image.png"><br><a name="Mvvxw"></a></p><h2 id="创建HTTP服务：">创建HTTP服务：</h2><ol><li>实例要求：使用 IDEA 创建 Netty 项目</li><li>Netty 服务器在 6668 端口监听，浏览器发出请求 <a href="http://localhost:6668/">http://localhost:6668/</a></li><li>服务器可以回复消息给客户端&quot;Hello!我是服务器5&quot;,并对特定请求资源进行过滤。</li><li>目的：Netty 可以做 Http 服务开发，并且理解 Handler 实例和客户端及其请求的关系。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class TestServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = new ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(6668).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //向管道加入处理器</span><br><span class="line"></span><br><span class="line">        //得到管道</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        //加入一个netty 提供的httpServerCodec codec =&gt;[coder - decoder]</span><br><span class="line">        //HttpServerCodec 说明</span><br><span class="line">        //1. HttpServerCodec 是netty 提供的处理http的 编-解码器</span><br><span class="line">        pipeline.addLast(&quot;MyHttpServerCodec&quot;, new HttpServerCodec());</span><br><span class="line">        //2. 增加一个自定义的handler</span><br><span class="line">        pipeline.addLast(&quot;MyTestHttpServerHandler&quot;, new TestHttpServerHandler());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;ok~~~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 说明</span><br><span class="line"> * 1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter</span><br><span class="line"> * 2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject</span><br><span class="line"> */</span><br><span class="line">public class TestHttpServerHandler extends SimpleChannelInboundHandler&lt;HttpObject&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //channelRead0 读取客户端数据</span><br><span class="line">    @Override</span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对应的channel=&quot; + ctx.channel() + &quot; pipeline=&quot; + ctx</span><br><span class="line">                .pipeline() + &quot; 通过pipeline获取channel&quot; + ctx.pipeline().channel());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;当前ctx的handler=&quot; + ctx.handler());</span><br><span class="line"></span><br><span class="line">        //判断 msg 是不是 httprequest请求</span><br><span class="line">        if (msg instanceof HttpRequest) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;ctx 类型=&quot; + ctx.getClass());</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;pipeline hashcode&quot; + ctx.pipeline().hashCode() + &quot; TestHttpServerHandler hash=&quot; + this.hashCode());</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;msg 类型=&quot; + msg.getClass());</span><br><span class="line">            System.out.println(&quot;客户端地址&quot; + ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">            //获取到</span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line">            //获取uri, 过滤指定的资源</span><br><span class="line">            URI uri = new URI(httpRequest.uri());</span><br><span class="line">            if (&quot;/favicon.ico&quot;.equals(uri.getPath())) &#123;</span><br><span class="line">                System.out.println(&quot;请求了 favicon.ico, 不做响应&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //回复信息给浏览器 [http协议]</span><br><span class="line"></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(&quot;hello, 我是服务器&quot;, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">            //构造一个http的相应，即 httpresponse</span><br><span class="line">            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line"></span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, &quot;text/plain&quot;);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line"></span><br><span class="line">            //将构建好 response返回</span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="LD1c8"></a></p><h2 id="核心组件：">核心组件：</h2><p><a href="https://dongzl.github.io/netty-handbook/#/_content/chapter06">Netty 学习手册</a><br><a name="sqIL8"></a></p><h2 id="源码分析1：">源码分析1：</h2><p><a href="https://xiaohuang.blog.csdn.net/article/details/125493995">【Netty 从成神到升仙系列 一】Netty 服务端的启动源码剖析（一）-CSDN博客</a></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xiaolincoding.com/network/2_http/http_rpc.html#%E4%BB%8E-tcp-%E8%81%8A%E8%B5%B7&quot;&gt;3.8 既然有 HTTP 协议，为什么还要有 RPC？&lt;/a&gt;&lt;br /&gt;&lt;a</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.bojiboqi.fun/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Netty" scheme="http://www.bojiboqi.fun/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Nginx — 深入浅出</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Nginx%20%E2%80%94%20%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Nginx%20%E2%80%94%20%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</id>
    <published>2024-04-09T02:38:48.391Z</published>
    <updated>2024-04-09T04:00:54.982Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是目前负载均衡技术中的主流方案，<br>【更新记录】</p><h1>引言</h1><p>早期的业务都是基于单体节点部署，由于前期访问流量不大，因此单体结构也可满足需求，但随着业务增长，流量也越来越大，那么最终单台服务器受到的访问压力也会逐步增高。时间一长，单台服务器性能无法跟上业务增长，就会造成线上频繁宕机的现象发生，最终导致系统瘫痪无法继续处理用户的请求。<br>从上面的描述中，主要存在两个问题：<br>① 单体结构的部署方式无法承载日益增长的业务流量。<br>② 当后端节点宕机后，整个系统会陷入瘫痪，导致整个项目不可用。<br>因此在这种背景下，引入负载均衡技术可带来的收益：</p><ul><li><strong>「系统的高可用」</strong>： 当某个节点宕机后可以迅速将流量转移至其他节点。</li><li><strong>「系统的高性能」</strong>： 多台服务器共同对外提供服务，为整个系统提供了更高规模的吞吐。</li><li><strong>「系统的拓展性」</strong>： 当业务再次出现增长或萎靡时，可再加入/减少节点，灵活伸缩。</li></ul><p>既然引入负载均衡技术可给我们带来如此巨大的好处，那么又有那些方案可供选择呢？主要有两种负载方案，<strong>「「硬件层面与软件层面」」</strong> ，比较常用的硬件负载器有A10、F5等，但这些机器动辄大几万乃至几十万的成本，因此一般大型企业会采用该方案，如银行、国企、央企等。而成本有限，但依旧想做负载均衡的项目，那么可在软件层面实现，如典型的Nginx等，软件层的负载也是本文的重点，毕竟 Boss 们的准则之一就是：<strong>「「能靠技术实现的就尽量不花钱。」」</strong></p><h1>一、性能怪兽-Nginx 概念深入浅出</h1><p>Nginx是目前负载均衡技术中的主流方案，几乎绝大部分项目都会使用它，Nginx是一个轻量级的高性能HTTP反向代理服务器，同时它也是一个通用类型的代理服务器，支持绝大部分协议，如TCP、UDP、SMTP、HTTPS等。<br>Nginx与Redis相同，都是基于多路复用模型构建出的产物，因此它与Redis同样具备 <strong>「「资源占用少、并发支持高」」</strong> 的特点，在理论上单节点的Nginx同时支持5W并发连接，而实际生产环境中，硬件基础到位再结合简单调优后确实能达到该数值。<br>先来看看Nginx引入前后，客户端请求处理流程的对比：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1678293386371-7a5c2474-c6e7-4984-96d2-ecb84e4084f8.jpeg#averageHue=%23f0efef&amp;from=url&amp;id=eAb2a&amp;originHeight=567&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><br>原本客户端是直接请求目标服务器，由目标服务器直接完成请求处理工作，但加入Nginx后，所有的请求会先经过Nginx，再由其进行分发到具体的服务器处理，处理完成后再返回Nginx，最后由Nginx将最终的响应结果返回给客户端。<br>了解了Nginx的基本概念后，再来快速搭建一下环境，以及了解一些Nginx的高级特性，如动静分离、资源压缩、缓存配置、IP黑名单、高可用保障等。</p><h1>二、Nginx 环境搭建</h1><p>此处为语雀内容卡片，点击链接查看：<a href="https://www.yuque.com/lzy8684/environment2linux/ergyzvvr5int0un7">https://www.yuque.com/lzy8684/environment2linux/ergyzvvr5int0un7</a></p><h1>三、Nginx 反向代理-负载均衡</h1><p>首先通过 SpringBoot+Freemarker 快速搭建一个 WEB 项目：springboot-web-nginx，然后在该项目中，创建一个 IndexNginxController.java 文件，逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexNginxController</span> &#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String port;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();  </span><br><span class="line">        model.addObject(<span class="string">&quot;port&quot;</span>, port);  </span><br><span class="line">        model.setViewName(<span class="string">&quot;index&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> model;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该 Controller 类中，存在一个成员变量：port，它的值即是从application.properties配置文件中获取server.port值。当出现访问/资源的请求时，跳转前端index页面，并将该值携带返回。<br>前端的 index.ftl 文件代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Nginx演示页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;nginx_style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid red;margin: auto;width: 800px;text-align: center&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">&quot;nginx_title&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到熊猫高级会所，我是竹子$&#123;port&#125;号！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上可以看出其逻辑并不复杂，仅是从响应中获取了port输出。<br>OK~，前提工作准备就绪后，再简单修改一下nginx.conf的配置即可：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nginx_boot&#123;  </span><br><span class="line">  <span class="comment"># 30s内检查心跳发送两次包，未回复就代表该机器宕机，请求分发权重比为1:2  </span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.000:8080</span> weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;   </span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.000:8090</span> weight=<span class="number">200</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;  </span><br><span class="line">  <span class="comment"># 这里的IP请配置成你WEB服务所在的机器IP  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">  <span class="section">location</span> / &#123;  </span><br><span class="line">    <span class="attribute">root</span>   html;  </span><br><span class="line">    <span class="comment"># 配置一下index的地址，最后加上index.ftl。  </span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm index.jsp index.ftl;  </span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;  </span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  </span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  </span><br><span class="line">    <span class="comment"># 请求交给名为nginx_boot的upstream上  </span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://nginx_boot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，所有的前提工作准备就绪，紧接着再启动Nginx，然后再启动两个web服务，第一个WEB服务启动时，在application.properties配置文件中，将端口号改为8080，第二个WEB服务启动时，将其端口号改为8090。<br>最终来看看效果：<br><img src="https://cdn.nlark.com/yuque/0/2023/gif/27044221/1678108139001-8a065c93-0ada-422c-b8b4-242802206f6b.gif#from=url&amp;height=270&amp;id=qfDPm&amp;originHeight=270&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1079" alt=""><br>因为配置了请求分发的权重，8080、8090 的权重比为 1:2，因此请求会根据权重比均摊到每台机器，也就是 8080 一次、8090 两次、8080 一次、8090 两次…</p><h2 id="Nginx请求分发原理">Nginx请求分发原理</h2><p>客户端发出的请求 192.168.12.129 最终会转变为：<a href="http://192.168.12.129:80/%EF%BC%88%E4%B8%8D%E8%BE%93%E5%85%A5%E7%AB%AF%E5%8F%A3%E5%8F%B7%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%BA">http://192.168.12.129:80/（不输入端口号，默认指定的端口号为</a> 80），然后再向目标IP发起请求，流程如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1678358302638-922778e8-267c-4d8a-b936-2c76a6f51b25.jpeg#averageHue=%23c1bfbb&amp;from=url&amp;id=Wyv9D&amp;originHeight=847&amp;originWidth=1035&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ul><li>由于 Nginx 监听了 192.168.12.129 的 80 端口，所以最终该请求会找到 Nginx 进程；</li><li>Nginx 首先会根据配置的 location 规则进行匹配，根据客户端的请求路径 / ，会定位到 location /{} 规则；</li><li>然后根据该 location 中配置的 proxy_pass 会再找到名为 nginx_boot 的 upstream；</li><li>最后根据 upstream 中的配置信息，将请求转发到运行 WEB 服务的机器处理，由于配置了多个WEB 服务，且配置了权重值，因此 Nginx 会依次根据权重比分发请求。</li></ul><h1>四、Nginx 动静分离</h1><h2 id="为什么需要动静分离">为什么需要动静分离</h2><p>动静分离应该是听的次数较多的性能优化方案，那先思考一个问题：<strong>「「为什么需要做动静分离呢？它带来的好处是什么？」」</strong> 其实这个问题也并不难回答，当你搞懂了网站的本质后，自然就理解了动静分离的重要性。先来以淘宝为例分析看看：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1678597161520-3f4690f8-6704-4ea7-b7a4-57f8ea0c3989.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_26%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23f4efed&amp;from=url&amp;height=938&amp;id=Q7tSa&amp;originHeight=938&amp;originWidth=922&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=922" alt=""><br>当浏览器输入www.taobao.com访问淘宝首页时，打开开发者调试工具可以很明显的看到，首页加载会出现100+的请求数，而正常项目开发时，静态资源一般会放入到resources/static/目录下：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1678556588051-494c6a58-1886-4910-9436-ebcc0e0023a9.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23cacaca&amp;from=url&amp;height=441&amp;id=ZLIdy&amp;originHeight=441&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=640" alt=""><br>在项目上线部署时，这些静态资源会一起打成包，那此时思考一个问题：<strong>「「假设淘宝也是这样干的，那么首页加载时的请求最终会去到哪儿被处理？」」</strong> 答案毋庸置疑，首页100+的所有请求都会来到部署WEB服务的机器处理，那则代表着一个客户端请求淘宝首页，就会对后端服务器造成100+的并发请求。毫无疑问，这对于后端服务器的压力是尤为巨大的。<br>但此时不妨分析看看，首页100+的请求中，是不是至少有60+是属于*.js、<em>.css、</em>.html、*.jpg…这类静态资源的请求呢？答案是Yes。<br>既然有这么多请求属于静态的，这些资源大概率情况下，长时间也不会出现变动，那为何还要让这些请求到后端再处理呢？能不能在此之前就提前处理掉？当然OK，因此经过分析之后能够明确一点：<strong>「「做了动静分离之后，至少能够让后端服务减少一半以上的并发量。」」</strong> 到此时大家应该明白了动静分离能够带来的性能收益究竟有多大。</p><h2 id="动静分离的配置">动静分离的配置</h2><p>OK~，搞清楚动静分离的必要性之后，如何实现动静分离呢？其实非常简单，实战看看。</p><ol><li>先在部署 Nginx 的机器，Nginx 目录下创建一个目录 static_resources：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> static_resources</span><br></pre></td></tr></table></figure><ol><li>将项目中所有的静态资源全部拷贝到该目录下，而后将项目中的静态资源移除重新打包。</li><li>稍微修改一下 nginx.conf 的配置，增加一条 location 匹配规则：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)</span>&#123;  </span><br><span class="line">    <span class="attribute">root</span>   /soft/nginx/static_resources;  </span><br><span class="line">    <span class="attribute">expires</span> <span class="number">7d</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>location 规则解读：</strong><br>location ~ .*.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)</p><ul><li>~：代表匹配时区分大小写</li><li>.*：代表任意字符都可以出现零次或多次，即资源名不限制</li><li>.：代表匹配后缀分隔符.</li><li>(html|…|css)：代表匹配括号里所有静态资源类型</li></ul><p>综上所述，简单一句话概述：该配置表示匹配以.html~.css为后缀的所有资源请求。<br>然后照常启动nginx和移除了静态资源的WEB服务，你会发现原本的样式、js效果、图片等依旧有效，如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1678596416896-38dadb7c-57a8-4f46-97d6-0b174b4508e4.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23f7f7f5&amp;from=url&amp;height=327&amp;id=Ct4yN&amp;originHeight=327&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=640" alt=""><br>其中static目录下的nginx_style.css文件已被移除，但效果依旧存在（绿色字体+蓝色大边框)：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1678596442963-ed5f146d-322e-4424-82c2-cf30fdca3c76.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23e4e9db&amp;from=url&amp;height=160&amp;id=VzqII&amp;originHeight=160&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=640" alt=""><br><strong>最后提一嘴，也可以将静态资源上传到文件服务器中，然后location中配置一个新的upstream指向。</strong></p><h1>五、Nginx 资源压缩</h1><p>建立在动静分离的基础之上，如果一个静态资源的 Size 越小，那么自然传输速度会更快，同时也会更节省带宽，因此我们在部署项目时，也可以通过 Nginx 对于静态资源实现压缩传输，一方面可以节省带宽资源，第二方面也可以加快响应速度并提升系统整体吞吐。<br>在 Nginx 也提供了三个支持资源压缩的模块 ngx_http_gzip_module、ngx_http_gzip_static_module、ngx_http_gunzip_module，其中 ngx_http_gzip_module 属于内置模块，代表着可以直接使用该模块下的一些压缩指令，后续的资源压缩操作都基于该模块，先来看看压缩配置的一些参数/指令：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1678621460970-391c2c37-98c8-4b8f-86b2-f12ca512b0ad.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23eeeeee&amp;from=url&amp;height=471&amp;id=TFPpF&amp;originHeight=471&amp;originWidth=659&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=659" alt=""><br>了解了Nginx中的基本压缩配置后，接下来可以在Nginx中简单配置一下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 开启压缩机制</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 指定会被压缩的文件类型(也可自己配置其他类型)</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span><br><span class="line">    <span class="comment"># 设置压缩级别，越高资源消耗越大，但压缩效果越好</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment"># 在头部中添加Vary: Accept-Encoding（建议开启）</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 处理压缩请求的缓冲区数量和大小</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line">    <span class="comment"># 对于不支持压缩功能的客户端请求不开启压缩机制</span></span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>; <span class="comment"># 低版本的IE浏览器不支持压缩</span></span><br><span class="line">    <span class="comment"># 设置压缩响应所支持的HTTP最低版本</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="comment"># 设置触发压缩的最小阈值</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">2k</span>;</span><br><span class="line">    <span class="comment"># 关闭对后端服务器的响应结果进行压缩</span></span><br><span class="line">    <span class="attribute">gzip_proxied</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的压缩配置中，最后一个gzip_proxied选项，可以根据系统的实际情况决定，总共存在多种选项：</p><ul><li>off：关闭Nginx对后台服务器的响应结果进行压缩。</li><li>expired：如果响应头中包含Expires信息，则开启压缩。</li><li>no-cache：如果响应头中包含Cache-Control:no-cache信息，则开启压缩。</li><li>no-store：如果响应头中包含Cache-Control:no-store信息，则开启压缩。</li><li>private：如果响应头中包含Cache-Control:private信息，则开启压缩。</li><li>no_last_modified：如果响应头中不包含Last-Modified信息，则开启压缩。</li><li>no_etag：如果响应头中不包含ETag信息，则开启压缩。</li><li>auth：如果响应头中包含Authorization信息，则开启压缩。</li><li>any：无条件对后端的响应结果开启压缩机制。</li></ul><p>OK~，简单修改好了Nginx的压缩配置后，可以在原本的index页面中引入一个jquery-3.6.0.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分别来对比下压缩前后的区别：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1678621663682-6ecdba50-06f5-4ed3-a5c0-dc15e707f1c8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23f7f7f7&amp;from=url&amp;height=464&amp;id=Gjr5f&amp;originHeight=464&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt=""><br>从图中可以很明显看出：</p><ul><li>未开启压缩机制前访问时，js 文件的原始大小为 230K，</li><li>开启压缩机制后访问时：会发现文件大小从 230KB→69KB，效果立竿见影</li></ul><p><strong>【注意】</strong></p><ol><li>对于图片、视频类型的数据，会默认开启压缩机制，因此一般无需再次开启压缩。</li><li>对于.js文件而言，需要指定压缩类型为application/javascript，而并非text/javascript、application/x-javascript。</li></ol><h1>六、Nginx 缓冲区</h1><p>先来思考一个问题，接入 Nginx 的项目一般请求流程为：“客户端 → Nginx → 服务端”，在这个过程中存在两个连接：“客户端 → Nginx、Nginx → 服务端”，那么两个不同的连接速度不一致，就会影响用户的体验（比如浏览器的加载速度跟不上服务端的响应速度）。<br>其实也就类似电脑的内存跟不上 CPU 速度，所以对于用户造成的体验感极差，因此在CPU设计时都会加入三级高速缓冲区，用于缓解 CPU 和内存速率不一致的矛盾。在 Nginx 也同样存在缓冲区的机制，主要目的就在于：<strong>「用来解决两个连接之间速度不匹配造成的问题」</strong> ，有了缓冲后，Nginx代理可暂存后端的响应，然后按需供给数据给客户端。先来看看一些关于缓冲区的配置项：</p><ul><li>proxy_buffering：是否启用缓冲机制，默认为on关闭状态。</li><li>client_body_buffer_size：设置缓冲客户端请求数据的内存大小。</li><li>proxy_buffers：为每个请求/连接设置缓冲区的数量和大小，默认4 4k/8k。</li><li>proxy_buffer_size：设置用于存储响应头的缓冲区大小。</li><li>proxy_busy_buffers_size：在后端数据没有完全接收完成时，Nginx可以将busy状态的缓冲返回给客户端，该参数用来设置busy状态的buffer具体有多大，默认为proxy_buffer_size*2。</li><li>proxy_temp_path：当内存缓冲区存满时，可以将数据临时存放到磁盘，该参数是设置存储缓冲数据的目录。</li><li>path是临时目录的路径。<ul><li>语法：proxy_temp_path path; path是临时目录的路径</li></ul></li><li>proxy_temp_file_write_size：设置每次写数据到临时文件的大小限制。</li><li>proxy_max_temp_file_size：设置临时的缓冲目录中允许存储的最大容量。</li><li>非缓冲参数项：<ul><li>proxy_connect_timeout：设置与后端服务器建立连接时的超时时间。</li><li>proxy_read_timeout：设置从后端服务器读取响应数据的超时时间。</li><li>proxy_send_timeout：设置向后端服务器传输请求数据的超时时间。</li></ul></li></ul><p>具体的nginx.conf配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http&#123;  </span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">10</span>;  </span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">120</span>;  </span><br><span class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">10</span>;  </span><br><span class="line">    <span class="attribute">proxy_buffering</span> <span class="literal">on</span>;  </span><br><span class="line">    <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;  </span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">64k</span>;  </span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">16k</span>;  </span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span> <span class="number">128k</span>;  </span><br><span class="line">    <span class="attribute">proxy_temp_file_write_size</span> <span class="number">128k</span>;  </span><br><span class="line">    <span class="attribute">proxy_temp_path</span> /soft/nginx/temp_buffer;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的缓冲区参数，是基于每个请求分配的空间，而并不是所有请求的共享空间。当然，具体的参数值还需要根据业务去决定，要综合考虑机器的内存以及每个请求的平均数据大小。<br><strong>【注意】</strong><br>使用缓冲也可以减少即时传输带来的带宽消耗。</p><h1>七、Nginx 缓存机制</h1><p><strong>对于性能优化而言，缓存是一种能够大幅度提升性能的方案</strong>，因此几乎可以在各处都能看见缓存，如客户端缓存、代理缓存、服务器缓存等等，Nginx 的缓存则属于代理缓存的一种。<br>对于整个系统而言，加入缓存带来的优势额外明显：</p><ul><li>减少了再次向后端或文件服务器请求资源的带宽消耗。</li><li>降低了下游服务器的访问压力，提升系统整体吞吐。</li><li>缩短了响应时间，提升了加载速度，打开页面的速度更快。</li></ul><p>那么在 Nginx 中，又该如何配置代理缓存呢？先来看看缓存相关的配置项：</p><h2 id="「proxy-cache-path」：代理缓存的路径">「proxy_cache_path」：代理缓存的路径</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> path [levels=levels] [use_temp_path=<span class="literal">on</span>|<span class="literal">off</span>] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=<span class="literal">on</span>|<span class="literal">off</span>] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br></pre></td></tr></table></figure><p><strong>【参数解析】</strong></p><ul><li>path：缓存的路径地址。</li><li>levels：缓存存储的层次结构，最多允许三层目录。</li><li>use_temp_path：是否使用临时目录。</li><li>keys_zone：指定一个共享内存空间来存储热点Key(1M可存储8000个Key)。</li><li>inactive：设置缓存多长时间未被访问后删除（默认是十分钟）。</li><li>max_size：允许缓存的最大存储空间，超出后会基于LRU算法移除缓存，Nginx会创建一个Cache manager的进程移除数据，也可以通过purge方式。</li><li>manager_files：manager进程每次移除缓存文件数量的上限。</li><li>manager_sleep：manager进程每次移除缓存文件的时间上限。</li><li>manager_threshold：manager进程每次移除缓存后的间隔时间。</li><li>loader_files：重启Nginx载入缓存时，每次加载的个数，默认100。</li><li>loader_sleep：每次载入时，允许的最大时间上限，默认200ms。</li><li>loader_threshold：一次载入后，停顿的时间间隔，默认50ms。</li><li>purger：是否开启purge方式移除数据。</li><li>purger_files：每次移除缓存文件时的数量。</li><li>purger_sleep：每次移除时，允许消耗的最大时间。</li><li>purger_threshold：每次移除完成后，停顿的间隔时间。</li></ul><hr><h2 id="「proxy-cache」：开启或关闭代理缓存，开启时需要指定一个共享内存区域">「proxy_cache」：开启或关闭代理缓存，开启时需要指定一个共享内存区域</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache</span> zone | <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><p>zone 为内存区域的名称，即上面中 keys_zone 设置的名称。</p><hr><h2 id="「proxy-cache-key」：定义如何生成缓存的键">「proxy_cache_key」：定义如何生成缓存的键</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_key</span> string;</span><br></pre></td></tr></table></figure><p>string 为生成 Key 的规则，如 $scheme$proxy_host$request_uri。</p><hr><h2 id="「proxy-cache-valid」：缓存生效的状态码与过期时间">「proxy_cache_valid」：缓存生效的状态码与过期时间</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_valid</span> [code ...] time;</span><br></pre></td></tr></table></figure><p>code 为状态码，time 为有效时间，可以根据状态码设置不同的缓存时间。<br>例如：proxy_cache_valid 200 302 30m;</p><hr><h2 id="「proxy-cache-min-uses」：设置资源被请求多少次后被缓存">「proxy_cache_min_uses」：设置资源被请求多少次后被缓存</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_min_uses</span> number;</span><br></pre></td></tr></table></figure><p>number 为次数，默认为 1。</p><hr><h2 id="「proxy-cache-use-stale」：当后端出现异常时，是否允许Nginx返回缓存作为响应">「proxy_cache_use_stale」：当后端出现异常时，是否允许Nginx返回缓存作为响应</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_use_stale</span> <span class="literal">error</span>;</span><br></pre></td></tr></table></figure><p>error 为错误类型，可配置 timeout|invalid_header|updating|http_500…。</p><hr><h2 id="「proxy-cache-lock」：对于相同的请求，是否开启锁机制，只允许一个请求发往后端">「proxy_cache_lock」：对于相同的请求，是否开启锁机制，只允许一个请求发往后端</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_lock</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>「proxy_cache_lock_timeout」</strong>：配置锁超时机制，超出规定时间后会释放请求</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_lock_timeout</span> time;</span><br></pre></td></tr></table></figure><hr><h2 id="「proxy-cache-methods」：设置对于那些HTTP方法开启缓存">「proxy_cache_methods」：设置对于那些HTTP方法开启缓存</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_methods</span> method;</span><br></pre></td></tr></table></figure><p>method 为请求方法类型，如GET、HEAD等。</p><hr><h2 id="「proxy-no-cache」：定义不存储缓存的条件，符合时不会保存">「proxy_no_cache」：定义不存储缓存的条件，符合时不会保存</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_no_cache</span> string...;</span><br></pre></td></tr></table></figure><p>string 为条件，例如$cookie_nocache $arg_nocache $arg_comment;</p><hr><h2 id="「proxy-cache-bypass」：定义不读取缓存的条件，符合时不会从缓存中读取">「proxy_cache_bypass」：定义不读取缓存的条件，符合时不会从缓存中读取</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_bypass</span> string...;</span><br></pre></td></tr></table></figure><p>和上面 proxy_no_cache 的配置方法类似。</p><hr><h2 id="「add-header」：往响应头中添加字段信息">「add_header」：往响应头中添加字段信息</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> fieldName fieldValue;</span><br></pre></td></tr></table></figure><hr><h2 id="「-upstream-cache-status」：记录了缓存是否命中的信息，存在多种情况：">「$upstream_cache_status」：记录了缓存是否命中的信息，存在多种情况：</h2><ul><li>MISS：请求未命中缓存。</li><li>HIT：请求命中缓存。</li><li>EXPIRED：请求命中缓存但缓存已过期。</li><li>STALE：请求命中了陈旧缓存。</li><li>REVALIDDATED：Nginx验证陈旧缓存依然有效。</li><li>UPDATING：命中的缓存内容陈旧，但正在更新缓存。</li><li>BYPASS：响应结果是从原始服务器获取的。</li></ul><p><strong>【注意】</strong><br>这个和之前的不同，之前的都是参数项，这个是一个Nginx内置变量。</p><hr><p>以上均为 nginx 中的缓存配置项，接着下面来配置一下 nginx 代理缓存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">http&#123;  </span><br><span class="line">    <span class="comment"># 设置缓存的目录，并且内存中缓存区名为hot_cache，大小为128m，  </span></span><br><span class="line">    <span class="comment"># 三天未被访问过的缓存自动清楚，磁盘中缓存的最大容量为2GB。  </span></span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /soft/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=hot_cache:<span class="number">128m</span> inactive=<span class="number">3d</span> max_size=<span class="number">2g</span>;  </span><br><span class="line">      </span><br><span class="line">    server&#123;  </span><br><span class="line">        <span class="section">location</span> / &#123;  </span><br><span class="line">            <span class="comment"># 使用名为nginx_cache的缓存空间  </span></span><br><span class="line">            <span class="attribute">proxy_cache</span> hot_cache;  </span><br><span class="line">            <span class="comment"># 对于200、206、304、301、302状态码的数据缓存1天  </span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">304</span> <span class="number">301</span> <span class="number">302</span> <span class="number">1d</span>;  </span><br><span class="line">            <span class="comment"># 对于其他状态的数据缓存30分钟  </span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> any <span class="number">30m</span>;  </span><br><span class="line">            <span class="comment"># 定义生成缓存键的规则（请求的url+参数作为key）  </span></span><br><span class="line">            <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;  </span><br><span class="line">            <span class="comment"># 资源至少被重复访问三次后再加入缓存  </span></span><br><span class="line">            <span class="attribute">proxy_cache_min_uses</span> <span class="number">3</span>;  </span><br><span class="line">            <span class="comment"># 出现重复请求时，只让一个去后端读数据，其他的从缓存中读取  </span></span><br><span class="line">            <span class="attribute">proxy_cache_lock</span> <span class="literal">on</span>;  </span><br><span class="line">            <span class="comment"># 上面的锁超时时间为3s，超过3s未获取数据，其他请求直接去后端  </span></span><br><span class="line">            <span class="attribute">proxy_cache_lock_timeout</span> <span class="number">3s</span>;  </span><br><span class="line">            <span class="comment"># 对于请求参数或cookie中声明了不缓存的数据，不再加入缓存  </span></span><br><span class="line">            <span class="attribute">proxy_no_cache</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span> <span class="variable">$arg_comment</span>;  </span><br><span class="line">            <span class="comment"># 在响应头中添加一个缓存是否命中的状态（便于调试）  </span></span><br><span class="line">            <span class="attribute">add_header</span> Cache-status <span class="variable">$upstream_cache_status</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1684828191137-40109b9b-fe74-4244-9e16-e85a45de6416.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#averageHue=%23f9f8f8&amp;from=url&amp;height=398&amp;id=Clkyx&amp;originHeight=398&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt=""><br>第一次访问时，因为还没有请求过资源，所以缓存中没有数据，因此没有命中缓存。第二、三次，依旧没有命中缓存，直至第四次时才显示命中，这是为什么呢？因为在前面的缓存配置中，我们配置了加入缓存的最低条件为：<strong>「「资源至少要被请求三次以上才会加入缓存。」」</strong> 这样可以避免很多无效缓存占用空间。</p><h2 id="缓存清理">缓存清理</h2><p>当缓存过多时，如果不及时清理会导致磁盘空间被“吃光”，因此我们需要一套完善的缓存清理机制去删除缓存，在之前的proxy_cache_path参数中有purger相关的选项，开启后可以帮我们自动清理缓存，但遗憾的是：** purger系列参数只有商业版的NginxPlus才能使用，因此需要付费才可使用。**<br>不过天无绝人之路，我们可以通过强大的第三方模块ngx_cache_purge来替代，先来安装一下该插件：</p><ol><li>首先去到 Nginx 的安装目录下，创建一个 cache_purge 目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># mkdir cache_purge &amp;&amp; cd cache_purge</span></span><br></pre></td></tr></table></figure><ol><li>通过 wget 指令从 github 上拉取安装包的压缩文件并解压：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  </span></span><br><span class="line">[root@localhost]<span class="comment"># tar -xvzf 2.3.tar.gz</span></span><br></pre></td></tr></table></figure><ol><li>再次去到之前 Nginx 的解压目录下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># cd /soft/nginx/nginx1.21.6</span></span><br></pre></td></tr></table></figure><ol><li>重新构建一次 Nginx，通过 --add-module 的指令添加刚刚的第三方模块：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># ./configure --prefix=/soft/nginx/ --add-module=/soft/nginx/cache_purge/ngx_cache_purge-2.3/</span></span><br></pre></td></tr></table></figure><ol><li>重新根据刚刚构建的 Nginx，再次编译一下，<strong>「但切记不要make install」</strong> ：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># make</span></span><br></pre></td></tr></table></figure><ol><li>删除之前 Nginx 的启动文件，不放心的也可以移动到其他位置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># rm -rf /soft/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure><ol><li>从生成的 objs 目录中，重新复制一个 Nginx 的启动文件到原来的位置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># cp objs/nginx /soft/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure><ol><li>至此，第三方缓存清除模块 ngx_cache_purge 就安装完成了，接下来稍微修改一下 nginx.conf 配置，再添加一条 location 规则：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ /purge(/.*)</span> &#123;  </span><br><span class="line">  <span class="comment"># 配置可以执行清除操作的IP（线上可以配置成内网机器）  </span></span><br><span class="line">  <span class="comment"># allow 127.0.0.1; # 代表本机  </span></span><br><span class="line">  <span class="attribute">allow</span> all; <span class="comment"># 代表允许任意IP清除缓存  </span></span><br><span class="line">  <span class="attribute">proxy_cache_purge</span> <span class="variable">$host</span><span class="variable">$1</span><span class="variable">$is_args</span><span class="variable">$args</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再重启 Nginx ，接下来即可通过 <a href="http://xxx/purge/xx">http://xxx/purge/xx</a> 的方式清除缓存。</p><h1>八、Nginx 实现 IP 黑白名单</h1><p>有时候往往有些需求，可能某些接口只能开放给对应的合作商，或者购买/接入 API 的合作伙伴，那么此时就需要实现类似于** IP 白名单**的功能。而有时候有些恶意攻击者或爬虫程序，被识别后需要禁止其再次访问网站，因此也需要实现 <strong>IP 黑名单</strong>。那么这些功能无需交由后端实现，可直接在 Nginx中处理。<br>Nginx做黑白名单机制，主要是通过allow、deny配置项来实现：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">allow</span> xxx.xxx.xxx.xxx; <span class="comment"># 允许指定的IP访问，可以用于实现白名单。  </span></span><br><span class="line"><span class="attribute">deny</span> xxx.xxx.xxx.xxx; <span class="comment"># 禁止指定的IP访问，可以用于实现黑名单。</span></span><br></pre></td></tr></table></figure><ol><li>要同时屏蔽/开放多个IP访问时，如果所有IP全部写在nginx.conf文件中定然是不显示的，这种方式比较冗余，那么可以新建两个文件BlocksIP.conf、WhiteIP.conf：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------黑名单：BlocksIP.conf---------  </span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">192.177.12.222</span>; <span class="comment"># 屏蔽192.177.12.222访问  </span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">192.177.44.201</span>; <span class="comment"># 屏蔽192.177.44.201访问  </span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">127.0.0.0</span>/<span class="number">8</span>; <span class="comment"># 屏蔽127.0.0.1到127.255.255.254网段中的所有IP访问</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------白名单：WhiteIP.conf---------  </span></span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.177.12.222</span>; <span class="comment"># 允许192.177.12.222访问  </span></span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.177.44.201</span>; <span class="comment"># 允许192.177.44.201访问  </span></span><br><span class="line"><span class="attribute">allow</span> <span class="number">127.45.0.0</span>/<span class="number">16</span>; <span class="comment"># 允许127.45.0.1到127.45.255.254网段中的所有IP访问  </span></span><br><span class="line"><span class="attribute">deny</span> all; <span class="comment"># 除开上述IP外，其他IP全部禁止访问</span></span><br></pre></td></tr></table></figure><ol><li>分别将要禁止/开放的IP添加到对应的文件后，可以再将这两个文件在nginx.conf中导入：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http&#123;  </span><br><span class="line">    <span class="comment"># 屏蔽该文件中的所有IP  </span></span><br><span class="line">    <span class="attribute">include</span> /soft/nginx/IP/BlocksIP.conf;   </span><br><span class="line">    server&#123;  </span><br><span class="line">        <span class="section">location</span> xxx &#123;  </span><br><span class="line">            <span class="comment"># 某一系列接口只开放给白名单中的IP  </span></span><br><span class="line">            <span class="attribute">include</span> /soft/nginx/IP/blockip.conf;   </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于文件具体在哪儿导入，这个也并非随意的，如果要整站屏蔽/开放就在http中导入，如果只需要一个域名下屏蔽/开放就在sever中导入，如果只需要针对于某一系列接口屏蔽/开放IP，那么就在location中导入。<br>当然，上述只是最简单的 IP 黑/白名单实现方式，同时也可以通过 ngx_http_geo_module、ngx_http_geo_module 第三方库去实现（这种方式可以按地区、国家进行屏蔽，并且提供了IP库）。</p><h1>九、Nginx 跨域配置</h1><p>跨域问题在之前的单体架构开发中，其实是比较少见的问题，除非是需要接入第三方 SDK 时，才需要处理此问题。但随着现在前后端分离、分布式架构的流行，跨域问题也成为了每个Java开发必须要懂得解决的一个问题。</p><h2 id="跨域问题产生的原因">跨域问题产生的原因</h2><p>产生跨域问题的主要原因就在于 <strong>「同源策略」</strong> ，为了保证用户信息安全，防止恶意网站窃取数据，同源策略是必须的，否则cookie可以共享。由于http无状态协议通常会借助cookie来实现有状态的信息记录，例如用户的身份/密码等，因此一旦cookie被共享，那么会导致用户的身份信息被盗取。<br>同源策略主要是指三点相同，<strong>「「协议+域名+端口」」</strong> 相同的两个请求，则可以被看做是同源的，但如果其中任意一点存在不同，则代表是两个不同源的请求，同源策略会限制了不同源之间的资源交互。</p><h2 id="Nginx解决跨域问题">Nginx解决跨域问题</h2><p>弄明白了跨域问题的产生原因，接下来看看 Nginx 中又该如何解决跨域呢？其实比较简单，在 nginx.conf 中稍微添加一点配置即可：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;  </span><br><span class="line">    <span class="comment"># 允许跨域的请求，可以自定义变量$http_origin，*表示所有  </span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;  </span><br><span class="line">    <span class="comment"># 允许携带cookie请求  </span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;  </span><br><span class="line">    <span class="comment"># 允许跨域请求的方法：GET,POST,OPTIONS,PUT  </span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,OPTIONS,PUT&#x27;</span>;  </span><br><span class="line">    <span class="comment"># 允许请求时携带的头部信息，*表示所有  </span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> *;  </span><br><span class="line">    <span class="comment"># 允许发送按段获取资源的请求  </span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span> <span class="string">&#x27;Content-Length,Content-Range&#x27;</span>;  </span><br><span class="line">    <span class="comment"># 一定要有！！！否则Post请求无法进行跨域！  </span></span><br><span class="line">    <span class="comment"># 在发送Post跨域请求前，会以Options方式发送预检请求，服务器接受时才会正式请求  </span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;  </span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;  </span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;  </span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="comment"># 对于Options方式的请求返回204，表示接受跨域请求  </span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 nginx.conf 文件加上如上配置后，跨域请求即可生效了。<br>但如果后端是采用分布式架构开发的，有时候RPC调用也需要解决跨域问题，不然也同样会出现无法跨域请求的异常，因此可以在你的后端项目中，通过继承 HandlerInterceptorAdapter 类、实现 WebMvcConfigurer 接口、添加 @CrossOrgin 注解的方式实现接口之间的跨域配置。</p><h1>十、Nginx 防盗链设计</h1><p>首先了解一下何谓盗链：<strong>「「盗链即是指外部网站引入当前网站的资源对外展示」」</strong> ，来举个简单的例子理解：<br>好比壁纸网站 X 站、Y 站，X 站是一点点去购买版权、签约作者的方式，从而积累了海量的壁纸素材，但 Y 站由于资金等各方面的原因，就直接通过 <img src="X站/xxx.jpg" /> 这种方式照搬了 X 站的所有壁纸资源，继而提供给用户下载。<br>那么如果我们自己是这个X站的 Boss，心中必然不爽，那么此时又该如何屏蔽这类问题呢？那么接下来要叙说的**「「防盗链」」** 登场了！<br>Nginx 的防盗链机制实现，跟一个头部字段：Referer 有关，该字段主要描述了当前请求是从哪儿发出的，那么在 Nginx 中就可获取该值，然后判断是否为本站的资源引用请求，如果不是则不允许访问。Nginx 中存在一个配置项为 valid_referers，正好可以满足前面的需求，语法如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">valid_referers</span> <span class="literal">none</span> | <span class="literal">blocked</span> | server_names | string ...;</span><br></pre></td></tr></table></figure><ul><li>none：表示接受没有 Referer 字段的 HTTP 请求访问。</li><li>blocked：表示允许 http:// 或 https// 以外的请求访问。</li><li>server_names：资源的白名单，这里可以指定允许访问的域名。</li><li>string：可自定义字符串，支配通配符、正则表达式写法。</li></ul><p>简单了解语法后，接下来的实现如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在动静分离的location中开启防盗链机制  </span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)</span>&#123;  </span><br><span class="line">    <span class="comment"># 最后面的值在上线前可配置为允许的域名地址  </span></span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">blocked</span> <span class="number">192.168.12.129</span>;  </span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;  </span><br><span class="line">        <span class="comment"># 可以配置成返回一张禁止盗取的图片  </span></span><br><span class="line">        <span class="comment"># rewrite   ^/ http://xx.xx.com/NO.jpg;  </span></span><br><span class="line">        <span class="comment"># 也可直接返回403  </span></span><br><span class="line">        <span class="attribute">return</span>   <span class="number">403</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="attribute">root</span>   /soft/nginx/static_resources;  </span><br><span class="line">    <span class="attribute">expires</span> <span class="number">7d</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上述中的内容配置后，就已经通过 Nginx 实现了最基本的防盗链机制，最后只需要额外重启一下就好啦！当然，对于防盗链机制实现这块，也有专门的第三方模块 ngx_http_accesskey_module实现了更为完善的设计，感兴趣的小伙伴可以自行去看看。<br>PS：防盗链机制也无法解决爬虫伪造 referers 信息的这种方式抓取数据。</p><h1>十一、Nginx 大文件传输配置</h1><p>在某些业务场景中需要传输一些大文件，但大文件传输时往往都会会出现一些Bug，比如文件超出限制、文件传输过程中请求超时等，那么此时就可以在Nginx稍微做一些配置，先来了解一些关于大文件传输时可能会用的配置项：</p><table><thead><tr><th><strong>配置项</strong></th><th><strong>释义</strong></th></tr></thead><tbody><tr><td>client_max_body_size</td><td>设置请求体允许的最大体积</td></tr><tr><td>client_header_timeout</td><td>等待客户端发送一个请求头的超时时间</td></tr><tr><td>client_body_timeout</td><td>设置读取请求体的超时时间</td></tr><tr><td>proxy_read_timeout</td><td>设置请求被后端服务器读取时，Nginx 等待的最长时间</td></tr><tr><td>proxy_send_timeout</td><td>设置后端向 Nginx 返回响应时的超时时间</td></tr></tbody></table><p>在传输大文件时，client_max_body_size、client_header_timeout、proxy_read_timeout、proxy_send_timeout这四个参数值都可以根据自己项目的实际情况来配置。<br>上述配置仅是作为代理层需要配置的，因为最终客户端传输文件还是直接与后端进行交互，这里只是把作为网关层的Nginx配置调高一点，调到能够“容纳大文件”传输的程度。当然，Nginx 中也可以作为文件服务器使用，但需要用到一个专门的第三方模块nginx-upload-module，如果项目中文件上传的作用处不多，那么建议可以通过Nginx 搭建，毕竟可以节省一台文件服务器资源。但如若文件上传/下载较为频繁，那么还是建议额外搭建文件服务器，并将上传/下载功能交由后端处理。</p><h1>十二、Nginx 配置 SSL 证书</h1><p>随着越来越多的网站接入 HTTPS，因此 Nginx 中仅配置 HTTP 还不够，往往还需要监听 443 端口的请求，HTTPS 为了确保通信安全，所以服务端需配置对应的数字证书，当项目使用Nginx 作为网关时，那么证书在 Nginx 中也需要配置。<br><strong>接下来简单聊一下关于SSL证书配置过程</strong>：</p><ol><li>先去 CA 机构或从云控制台中申请对应的 SSL 证书，审核通过后下载 Nginx 版本的证书。</li><li>下载数字证书后，完整的文件总共有三个：.crt、.key、.pem：<ul><li>.crt：数字证书文件，.crt 是.pem 的拓展文件，因此有些人下载后可能没有。</li><li>.key：服务器的私钥文件，及非对称加密的私钥，用于解密公钥传输的数据。</li><li>.pem：Base64-encoded 编码格式的源证书文本文件，可自行根需求修改拓展名。</li></ul></li><li>在 Nginx 目录下新建 certificate 目录，并将下载好的证书/私钥等文件上传至该目录。</li><li>最后修改一下nginx.conf文件即可，如下：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------HTTPS配置-----------  </span></span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="comment"># 监听HTTPS默认的443端口  </span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;  </span><br><span class="line">    <span class="comment"># 配置自己项目的域名  </span></span><br><span class="line">    <span class="attribute">server_name</span> www.xxx.com;  </span><br><span class="line">    <span class="comment"># 打开SSL加密传输  </span></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;  </span><br><span class="line">    <span class="comment"># 输入域名后，首页文件所在的目录  </span></span><br><span class="line">    <span class="attribute">root</span> html;  </span><br><span class="line">    <span class="comment"># 配置首页的文件名  </span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.jsp index.ftl;  </span><br><span class="line">    <span class="comment"># 配置自己下载的数字证书  </span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>  certificate/xxx.pem;  </span><br><span class="line">    <span class="comment"># 配置自己下载的服务器私钥  </span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> certificate/xxx.key;  </span><br><span class="line">    <span class="comment"># 停止通信时，加密会话的有效期，在该时间段内不需要重新交换密钥  </span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;  </span><br><span class="line">    <span class="comment"># TLS握手时，服务器采用的密码套件  </span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class="line">    <span class="comment"># 服务器支持的TLS版本  </span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;  </span><br><span class="line">    <span class="comment"># 开启由服务器决定采用的密码套件  </span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="section">location</span> / &#123;  </span><br><span class="line">        ....  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ---------HTTP请求转HTTPS-------------  </span></span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="comment"># 监听HTTP默认的80端口  </span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;  </span><br><span class="line">    <span class="comment"># 如果80端口出现访问该域名的请求  </span></span><br><span class="line">    <span class="attribute">server_name</span> www.xxx.com;  </span><br><span class="line">    <span class="comment"># 将请求改写为HTTPS（这里写你配置了HTTPS的域名）  </span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://www.xxx.com;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK~，根据如上配置了 Nginx 后，你的网站即可通过 https:// 的方式访问，并且当客户端使用http:// 的方式访问时，会自动将其改写为 HTTPS 请求。</p><h1>十三、Nginx 配置 websocket 连接</h1><h2 id="1、WebSocket-是什么？">1、WebSocket 是什么？</h2><p>WebSocket 是一种在客户端与服务器端之间保持TCP长连接的网络协议，这样它们就可以随时进行信息交换。通过WebSocket，<strong>服务器可以直接向客户端发送数据</strong>，<strong>而无须客户端周期性的请求服务器</strong>，以动态更新数据内容。<br><strong>webSocket 与 HTTP 请求的区别：</strong><br>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器端发起一个 HTTP 请求，这个请求稍有些不同，它包含了一些附加头信息，其中附加头信息Upgrade: WebSocket表明这是一个申请协议升级的 HTTP请求。<br>服务器端解析这些附加的头信息，然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且<strong>这个链接会持续存在直到客户端或者服务器端的某一方主动的关闭链接</strong>。</p><hr><ol><li>客户端发送的内容：</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>server.example.com</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>WebSocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span><span class="punctuation">: </span>dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://example.com</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span><span class="punctuation">: </span>chat, superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span><span class="punctuation">: </span>13</span><br></pre></td></tr></table></figure><ul><li>Upgrade: WebSocket：表示这是一个特殊的 HTTP 请求，客户端和服务器端的通讯协议从 HTTP 协议升级到 WebSocket 协议。</li><li>Sec-WebSocket-Key：是一个Base64 encode的值，这个是浏览器随机生成，验证是否能和服务器端进行 WebSocket通信。</li><li>Sec_WebSocket-Protocol：是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。</li><li>Sec-WebSocket-Version：告诉服务器所使用的协议版本。</li></ul><ol><li>服务器端返回的内容：</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>WebSocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span><span class="punctuation">: </span>chat</span><br></pre></td></tr></table></figure><ul><li>Sec-WebSocket-Accept：表示经过服务器确认，并且加密过后的 Sec-WebSocket-Key。用来证明客户端和服务器之间能进行通信了。</li></ul><p><strong>WebSocket 的作用</strong></p><ul><li>WebSocket 是一种在客户端与服务器端之间保持TCP长连接的网络协议。</li><li>WebSocket 解决了客户端与服务器端双向通信问题。</li><li>WebSocket 适用的应用场景，需要提供多个用户相互交流的功能，或者需要展示经常变动的数据，例如: 社交类应用、股票类应用、在线教育类应用，等应用场景。</li></ul><h2 id="2、Websocket-解决了什么问题？">2、Websocket 解决了什么问题？</h2><p>在2005年以前如果想要在一个页面显示显示不同的内容，或者说页面内跳转，只能是通过点击然后路由跳转，在ajax诞生之后网页开始变得动态了。但是所有的 HTTP通信还都是由客户端控制的，这就要需要“<strong>定期轮询</strong>”与服务器端进行通信。</p><ul><li>ajax轮询: 浏览器在特定的时间给服务器发送请求，查看服务器是否有信息数据，</li></ul><p>**但是 ajax轮询 这种方式增加了网络开销与服务器端资源消耗，是一种低效的实时交互方案。**还有一点就是客户端总是主动的，服务器端总是被动的接收请求并响应数据。<br><strong>WebSocket 解决的问题</strong></p><ol><li>持久性连接</li></ol><p>JavaScript 调用浏览器的 API 发出一个 WebSocket 请求至服务器，经过三次握手后与服务器建立了TCP连接。为什么要建立持久性连接（<strong>非 http keep-alive</strong>）呢？这是因为 <strong>HTTP 协议是无状态的</strong>（连接断开之后就不知道刚才的客户端是谁了）。<br><strong>WebSocket 解决了 HTTP 的无状态特性，在你关闭链接之前，服务器端会一直知道你的信息。</strong></p><ol><li>双向通信</li></ol><p>当使用 WebSocket时，服务端就能够主动推送数据给客户端啦。</p><h2 id="3、websocket-在-nginx-原理">3、websocket 在 nginx 原理</h2><ol><li>wss 协议实际是 websocket + ssl，就是在 websocket 协议技术上加入 ssl 层，类似于 https（类似于 http + SSL）。</li><li>利用 nginx 代理 wss（通讯原理及流程）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1682580307649-0df0f848-81db-420e-bafa-720be7181e62.jpeg#from=url&amp;id=Sb8Gd&amp;originHeight=146&amp;originWidth=992&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><pre><code>  - 客户端发起 wss 连接连到 nginx  - nginx 将 wss 协议的数据转换成 ws 协议数据并转发到 Workerman的websocket协议端口  - Workerman 收到数据后做业务逻辑处理  - Workerman 给客户端发送消息时，则是相反的过程，数据经过nginx/转换成wss协议然后发给客户端</code></pre><ol><li>HTTP 的 Upgrade 协议头机制用于将连接从 HTTP 连接升级到 WebSocket 连接，Upgrade 机制使用了 Upgrade 协议头和 Connection 协议头；为了让 Nginx 可以将来自客户端的Upgrade 请求发送到后端服务器，Upgrade 和 Connection 的头信息必须被显式的设置。如下代码所示：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;<span class="comment"># 升级协议头 -&gt; websocket</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="4、Nginx-配置-Websocket">4、Nginx 配置 Websocket</h2><p>修改 nginx 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>在 http 内对应的 server 添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">listen</span>       <span class="number">8681</span>;</span><br><span class="line">     <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">   <span class="section">location</span> / &#123;</span><br><span class="line">     <span class="attribute">root</span>   /usr/local/wtkj/community/web/dist;</span><br><span class="line">     <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /community/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8680/community/;<span class="comment"># 路径：http:// + 地址+端口 + 访问路径</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 以下配置针对 websocket (添加如下内容)</span></span><br><span class="line">   <span class="section">location</span><span class="regexp"> ^~/community/push/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8680/community/push/;<span class="comment"># 路径：http:// + 地址+端口 + 访问路径</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">36000s</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;<span class="comment"># 升级协议头 -&gt; websocket</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ul><li>listen 8681：表示 nginx 的监听端口</li><li>proxt_http_version 1.1：表示反向代理发送的 HTTP 协议的版本是 1.1，HTTP1.1 支持长连接</li><li>proxy_pass <a href="http://127.0.0.1:8680/community/push/%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84uri%EF%BC%8C%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%98%E9%87%8F">http://127.0.0.1:8680/community/push/：表示反向代理的uri，这里可以使用负载均衡变量</a></li><li>proxy_redirect off; 表示不要替换路径，其实这里如果是/则有没有都没关系，因为default也是将路径替换到proxy_pass的后边</li><li>proxy_set_header：表示设置请求头</li><li>proxy_set_header X-Real-IP $remote_addr; 表示传递时来源的ip还是现在的客户端的ip</li><li>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 表示X-Forwarded-For头不发生改变</li><li>proxy_set_header Host $http_host：表示传递时请求头不变， $http_host 是 nginx 内置变量，表示的是当前的请求头，</li><li>proxy_read_timeout 3600s； 表的两次请求之间的间隔超过 3600s 后才关闭这个连接，默认的60s，自动关闭的元凶</li><li>proxy_set_header Upgrade $http_upgrade：表示设置Upgrade不变</li><li>proxy_set_header Connection “upgrade”：表示如果 $http_upgrade为upgrade，则请求为upgrade(websocket)，如果不是，就关闭连接<br>若是实际使用的websocket地址后面还有路径，比如实际地址是这样的，访问地址是 <a href="http://www.a.com">http://www.a.com</a>，实际会转发给ws://127.0.0.1:8094/ws</li></ul><p><strong>添加如下三行，才能在后台中拿到真实的 ip 地址</strong><br>proxy_set_header Host $host;<br>proxy_set_header X-Real_IP $remote_addr;<br>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br><strong>【升级协议头为 websocket】</strong><br>proxy_set_header Upgrade $http_upgrade;# 升级协议头 -&gt; websocket<br>proxy_set_header Connection “upgrade”;<br>proxy_read_timeout;：表明连接成功以后等待服务器响应的时候，如果不配置默认为60s；<br>proxy_http_version 1.1; ：表明使用http版本为1.1<br>如果没写如下语句，则会报 EOFException 错误：<br>proxy_read_timeout 36000s;<br>proxy_send_timeout 36000s;<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1682330489045-56813d68-d0a3-4c1d-b570-cc62dc283b75.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=524&amp;id=XVOfh&amp;originHeight=524&amp;originWidth=1382&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1382" alt=""></p><p>参考资料：</p><ul><li><a href="http://www.manongjc.com/detail/54-oqsvuzvebgunhqk.html">如何为Nginx配置 WebSocket? - 码农教程</a></li><li><a href="https://www.cnblogs.com/xiedy001/p/16347379.html">Nginx配置WebSocket - 谢端阳 - 博客园</a></li></ul><h1>十四、Nginx 的高可用</h1><p>线上如果采用单个节点的方式部署Nginx，难免会出现天灾人祸，比如系统异常、程序宕机、服务器断电、机房爆炸、地球毁灭…哈哈哈，夸张了。但实际生产环境中确实存在隐患问题，由于Nginx作为整个系统的网关层接入外部流量，所以一旦Nginx宕机，最终就会导致整个系统不可用，这无疑对于用户的体验感是极差的，因此也得保障Nginx高可用的特性。<br>接下来则会通过 keepalived 的 VIP 机制，实现 Nginx 的高可用。VIP 并不是只会员的意思，而是指 Virtual IP，即<strong>虚拟IP</strong>。<br>keepalived 在之前单体架构开发时，是一个用的较为频繁的高可用技术，比如 MySQL、Redis、MQ、Proxy、Tomcat 等各处都会通过 keepalived 提供的 VIP 机制，实现单节点应用的高可用。</p><h2 id="Keepalived-重启脚本-双机热备搭建">Keepalived + 重启脚本 + 双机热备搭建</h2><ol><li>首先创建一个对应的目录并下载 keepalived 到 Linux 中并解压：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建目录并进入目录</span></span><br><span class="line">[root@localhost]<span class="comment"># mkdir /soft/keepalived &amp;&amp; cd /soft/keepalived</span></span><br><span class="line"><span class="comment"># 2.下载 keepalived 压缩包</span></span><br><span class="line">[root@localhost]<span class="comment"># wget https://www.keepalived.org/software/keepalived-2.2.4.tar.gz</span></span><br><span class="line"><span class="comment"># 3.解压压缩包</span></span><br><span class="line">[root@localhost]<span class="comment"># tar -zxvf keepalived-2.2.4.tar.gz</span></span><br></pre></td></tr></table></figure><ol><li>进入解压后的 keepalived 目录并构建安装环境，然后编译并安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># cd keepalived-2.2.4  </span></span><br><span class="line">[root@localhost]<span class="comment"># ./configure --prefix=/soft/keepalived/  </span></span><br><span class="line">[root@localhost]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><ol><li>进入安装目录的 /soft/keepalived/etc/keepalived/ 并编辑配置文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># cd /soft/keepalived/etc/keepalived/  </span></span><br><span class="line">[root@localhost]<span class="comment"># vi keepalived.conf</span></span><br></pre></td></tr></table></figure><ol><li>编辑主机的 keepalived.conf 核心配置文件，如下：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">global_defs</span> &#123;  </span><br><span class="line">  <span class="comment"># 自带的邮件提醒服务，建议用独立的监控或第三方SMTP，也可选择配置邮件发送。  </span></span><br><span class="line">  <span class="section">notification_email</span> &#123;  </span><br><span class="line">    root@<span class="attribute">localhost</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">  notification_email_from root<span class="variable">@localhost</span>  </span><br><span class="line">    smtp_server localhost  </span><br><span class="line">    smtp_connect_timeout <span class="number">30</span>  </span><br><span class="line">    <span class="comment"># 高可用集群主机身份标识(集群中主机身份标识名称不能重复，建议配置成本机IP)  </span></span><br><span class="line">    router_id <span class="number">192.168.12.129</span>   </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时运行的脚本文件配置  </span></span><br><span class="line">vrrp_script check_nginx_pid_restart &#123;  </span><br><span class="line">  <span class="comment"># 之前编写的nginx重启脚本的所在位置  </span></span><br><span class="line">  <span class="attribute">script</span> <span class="string">&quot;/soft/scripts/keepalived/check_nginx_pid_restart.sh&quot;</span>   </span><br><span class="line">    <span class="comment"># 每间隔3秒执行一次  </span></span><br><span class="line">    interval <span class="number">3</span>  </span><br><span class="line">    <span class="comment"># 如果脚本中的条件成立，重启一次则权重-20  </span></span><br><span class="line">    weight -<span class="number">20</span>  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义虚拟路由，VI_1为虚拟路由的标示符（可自定义名称）  </span></span><br><span class="line">vrrp_instance VI_1 &#123;  </span><br><span class="line">  <span class="comment"># 当前节点的身份标识：用来决定主从（MASTER为主机，BACKUP为从机）  </span></span><br><span class="line">  <span class="attribute">state</span> MASTER  </span><br><span class="line">    <span class="comment"># 绑定虚拟IP的网络接口，根据自己的机器的网卡配置  </span></span><br><span class="line">    interface ens33   </span><br><span class="line">    <span class="comment"># 虚拟路由的ID号，主从两个节点设置必须一样  </span></span><br><span class="line">    virtual_router_id <span class="number">121</span>  </span><br><span class="line">    <span class="comment"># 填写本机IP  </span></span><br><span class="line">    mcast_src_ip <span class="number">192.168.12.129</span>  </span><br><span class="line">    <span class="comment"># 节点权重优先级，主节点要比从节点优先级高  </span></span><br><span class="line">    priority <span class="number">100</span>  </span><br><span class="line">    <span class="comment"># 优先级高的设置nopreempt，解决异常恢复后再次抢占造成的脑裂问题  </span></span><br><span class="line">    nopreempt  </span><br><span class="line">    <span class="comment"># 组播信息发送间隔，两个节点设置必须一样，默认1s（类似于心跳检测）  </span></span><br><span class="line">    advert_int <span class="number">1</span>  </span><br><span class="line">    authentication &#123;  </span><br><span class="line">    <span class="attribute">auth_type</span> PASS  </span><br><span class="line">      auth_pass <span class="number">1111</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment"># 将track_script块加入instance配置块  </span></span><br><span class="line">  track_script &#123;  </span><br><span class="line">    <span class="comment"># 执行Nginx监控的脚本  </span></span><br><span class="line">    <span class="attribute">check_nginx_pid_restart</span>  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  virtual_ipaddress &#123;  </span><br><span class="line">    <span class="comment"># 虚拟IP(VIP)，也可扩展，可配置多个。  </span></span><br><span class="line">    192.168.12.111  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>克隆一台之前的虚拟机作为从（备）机，编辑从机的 keepalived.conf 文件，如下：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">global_defs</span> &#123;  </span><br><span class="line">    <span class="comment"># 自带的邮件提醒服务，建议用独立的监控或第三方SMTP，也可选择配置邮件发送。  </span></span><br><span class="line">    <span class="section">notification_email</span> &#123;  </span><br><span class="line">        root@<span class="attribute">localhost</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    notification_email_from root<span class="variable">@localhost</span>  </span><br><span class="line">    smtp_server localhost  </span><br><span class="line">    smtp_connect_timeout <span class="number">30</span>  </span><br><span class="line">    <span class="comment"># 高可用集群主机身份标识(集群中主机身份标识名称不能重复，建议配置成本机IP)  </span></span><br><span class="line"> router_id <span class="number">192.168.12.130</span>   </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定时运行的脚本文件配置  </span></span><br><span class="line">vrrp_script check_nginx_pid_restart &#123;  </span><br><span class="line">    <span class="comment"># 之前编写的nginx重启脚本的所在位置  </span></span><br><span class="line"> <span class="attribute">script</span> <span class="string">&quot;/soft/scripts/keepalived/check_nginx_pid_restart.sh&quot;</span>   </span><br><span class="line">    <span class="comment"># 每间隔3秒执行一次  </span></span><br><span class="line"> interval <span class="number">3</span>  </span><br><span class="line">    <span class="comment"># 如果脚本中的条件成立，重启一次则权重-20  </span></span><br><span class="line"> weight -<span class="number">20</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义虚拟路由，VI_1为虚拟路由的标示符（可自定义名称）  </span></span><br><span class="line">vrrp_instance VI_1 &#123;  </span><br><span class="line">    <span class="comment"># 当前节点的身份标识：用来决定主从（MASTER为主机，BACKUP为从机）  </span></span><br><span class="line"> <span class="attribute">state</span> BACKUP  </span><br><span class="line">    <span class="comment"># 绑定虚拟IP的网络接口，根据自己的机器的网卡配置  </span></span><br><span class="line"> interface ens33   </span><br><span class="line">    <span class="comment"># 虚拟路由的ID号，主从两个节点设置必须一样  </span></span><br><span class="line"> virtual_router_id <span class="number">121</span>  </span><br><span class="line">    <span class="comment"># 填写本机IP  </span></span><br><span class="line"> mcast_src_ip <span class="number">192.168.12.130</span>  </span><br><span class="line">    <span class="comment"># 节点权重优先级，主节点要比从节点优先级高  </span></span><br><span class="line"> priority <span class="number">90</span>  </span><br><span class="line">    <span class="comment"># 优先级高的设置nopreempt，解决异常恢复后再次抢占造成的脑裂问题  </span></span><br><span class="line"> nopreempt  </span><br><span class="line">    <span class="comment"># 组播信息发送间隔，两个节点设置必须一样，默认1s（类似于心跳检测）  </span></span><br><span class="line"> advert_int <span class="number">1</span>  </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        <span class="attribute">auth_type</span> PASS  </span><br><span class="line">        auth_pass <span class="number">1111</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment"># 将track_script块加入instance配置块  </span></span><br><span class="line">    track_script &#123;  </span><br><span class="line">        <span class="comment"># 执行Nginx监控的脚本  </span></span><br><span class="line">  <span class="attribute">check_nginx_pid_restart</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    virtual_ipaddress &#123;  </span><br><span class="line">        <span class="comment"># 虚拟IP(VIP)，也可扩展，可配置多个。  </span></span><br><span class="line">  192.168.12.111  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>新建 scripts 目录并编写 Nginx 的重启脚本，check_nginx_pid_restart.sh：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># mkdir /soft/scripts /soft/scripts/keepalived  </span></span><br><span class="line">[root@localhost]<span class="comment"># touch /soft/scripts/keepalived/check_nginx_pid_restart.sh  </span></span><br><span class="line">[root@localhost]<span class="comment"># vi /soft/scripts/keepalived/check_nginx_pid_restart.sh  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#!/bin/sh  </span></span><br><span class="line"><span class="comment"># 通过ps指令查询后台的nginx进程数，并将其保存在变量nginx_number中  </span></span><br><span class="line">nginx_number=`ps -C nginx --no-header | <span class="built_in">wc</span> -l`  </span><br><span class="line"><span class="comment"># 判断后台是否还有Nginx进程在运行  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$nginx_number</span> -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="comment"># 如果后台查询不到`Nginx`进程存在，则执行重启指令  </span></span><br><span class="line">    /soft/nginx/sbin/nginx -c /soft/nginx/conf/nginx.conf  </span><br><span class="line">    <span class="comment"># 重启后等待1s后，再次查询后台进程数  </span></span><br><span class="line">    <span class="built_in">sleep</span> 1  </span><br><span class="line">    <span class="comment"># 如果重启后依旧无法查询到nginx进程  </span></span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header | <span class="built_in">wc</span> -l` -eq 0 ];<span class="keyword">then</span>  </span><br><span class="line">        <span class="comment"># 将keepalived主机下线，将虚拟IP漂移给从机，从机上线接管Nginx服务  </span></span><br><span class="line">        systemctl stop keepalived.service  </span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ol><li>编写的脚本文件需要更改编码格式，并赋予执行权限，否则可能执行失败：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># vi /soft/scripts/keepalived/check_nginx_pid_restart.sh  </span></span><br><span class="line">  </span><br><span class="line">:<span class="built_in">set</span> fileformat=unix <span class="comment"># 在vi命令里面执行，修改编码格式  </span></span><br><span class="line">:<span class="built_in">set</span> ff <span class="comment"># 查看修改后的编码格式  </span></span><br><span class="line">  </span><br><span class="line">[root@localhost]<span class="comment"># chmod +x /soft/scripts/keepalived/check_nginx_pid_restart.sh</span></span><br></pre></td></tr></table></figure><ol><li>由于安装 keepalived 时，是自定义的安装位置，因此需要拷贝一些文件到系统目录中：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># mkdir /etc/keepalived/  </span></span><br><span class="line">[root@localhost]<span class="comment"># cp /soft/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/  </span></span><br><span class="line">[root@localhost]<span class="comment"># cp /soft/keepalived/keepalived-2.2.4/keepalived/etc/init.d/keepalived /etc/init.d/  </span></span><br><span class="line">[root@localhost]<span class="comment"># cp /soft/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span></span><br></pre></td></tr></table></figure><ol><li>将 keepalived 加入系统服务并设置开启自启动，然后测试启动是否正常：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# chkconfig keepalived on  </span><br><span class="line">[root@localhost]# systemctl daemon-reload  </span><br><span class="line">[root@localhost]# systemctl enable keepalived.service  </span><br><span class="line">[root@localhost]# systemctl start keepalived.service</span><br></pre></td></tr></table></figure><p>其他命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> keepalived.service <span class="comment"># 禁止开机自动启动  </span></span><br><span class="line">systemctl restart keepalived.service <span class="comment"># 重启keepalived  </span></span><br><span class="line">systemctl stop keepalived.service <span class="comment"># 停止keepalived  </span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/messages <span class="comment"># 查看keepalived运行时日志</span></span><br></pre></td></tr></table></figure><ol><li>最后测试一下 VIP 是否生效，通过查看本机是否成功挂载虚拟IP：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># ip addr</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/27044221/1681055258296-af9414a3-855e-41d3-a520-4db42863045f.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=261&amp;id=QM1kY&amp;originHeight=261&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=640" alt=""><br>从上图中可以明显看见虚拟IP已经成功挂载，但另外一台机器192.168.12.130并不会挂载这个虚拟IP，只有当主机下线后，作为从机的192.168.12.130才会上线，接替VIP。最后测试一下外网是否可以正常与VIP通信，即在Windows中直接ping VIP：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1681055349238-3325b74e-aa46-424f-b77c-b0178fdb9c7a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=318&amp;id=V41qM&amp;originHeight=318&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=583" alt=""><br>外部通过VIP通信时，也可以正常Ping通，代表虚拟IP配置成功。</p><h2 id="Nginx-高可用性测试">Nginx 高可用性测试</h2><p>经过上述步骤后，keepalived 的 VIP 机制已经搭建成功，在上个阶段中主要做了几件事：</p><ul><li>一、为部署 Nginx 的机器挂载了 VIP。</li><li>二、通过 keepalived 搭建了主从双机热备。</li><li>三、通过 keepalived 实现了 Nginx 宕机重启。</li></ul><p>由于前面没有域名的原因，因此最初 server_name 配置的是当前机器的 IP，所以需稍微更改一下 nginx.conf 的配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">sever</span> &#123;  </span><br><span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;  </span><br><span class="line">    <span class="comment"># 这里从机器的本地IP改为虚拟IP  </span></span><br><span class="line"> <span class="attribute">server_name</span> <span class="number">192.168.12.111</span>;  </span><br><span class="line"> <span class="comment"># 如果这里配置的是域名，那么则将域名的映射配置改为虚拟IP  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后来实验一下效果：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1681055559406-aabdb7ff-696f-49a9-8990-62f2271f94bd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=466&amp;id=zsrsx&amp;originHeight=466&amp;originWidth=1080&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1080" alt=""><br>在上述过程中，首先分别启动了keepalived、nginx服务，然后通过手动停止nginx的方式模拟了Nginx宕机情况，过了片刻后再次查询后台进程，我们会发现nginx依旧存活。<br>从这个过程中不难发现，keepalived已经为我们实现了Nginx宕机后自动重启的功能，那么接着再模拟一下服务器出现故障时的情况：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1681316083587-45419f16-9e86-4fd7-b1ff-e64ba25b1840.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=455&amp;id=LNDDw&amp;originHeight=455&amp;originWidth=954&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=954" alt=""><br>在上述过程中，我们通过手动关闭 keepalived 服务模拟了机器断电、硬件损坏等情况（因为机器断电等情况= 主机中的 keepalived 进程消失），然后再次查询了一下本机的 IP 信息，很明显会看到 VIP 消失了！<br>现在再切换到另外一台机器：192.168.12.130来看看情况：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1681316297834-4bee2c87-7f35-42b7-b98e-4bf3f27a74bd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=362&amp;id=DzSdm&amp;originHeight=362&amp;originWidth=970&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=970" alt=""><br>此刻我们会发现，在主机 192.168.12.129 宕机后，VIP自动从主机飘移到了从机 192.168.12.130 上，而此时客户端的请求就最终会来到 130 这台机器的 Nginx 上。<br><strong>「「最终，利用 Keepalived 对 Nginx 做了主从热备之后，无论是遇到线上宕机还是机房断电等各类故障时，都能够确保应用系统能够为用户提供 7x24小时服务。」」</strong></p><h1>十五、Nginx 性能优化</h1><p>关于 Nginx 的性能优化，主要就简单说说收益最高的几个优化项，在这块就不再展开叙述了，毕竟影响性能都有多方面原因导致的，比如网络、服务器硬件、操作系统、后端服务、程序自身、数据库服务等。</p><h2 id="优化一：打开长连接配置">优化一：打开长连接配置</h2><p>通常 Nginx 作为代理服务，负责分发客户端的请求，那么建议开启 HTTP 长连接，用户减少握手的次数，降低服务器损耗，具体如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> xxx &#123;  </span><br><span class="line">    <span class="comment"># 长连接数  </span></span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;  </span><br><span class="line">    <span class="comment"># 每个长连接提供的最大请求数  </span></span><br><span class="line">    <span class="attribute">keepalived_requests</span> <span class="number">100</span>;  </span><br><span class="line">    <span class="comment"># 每个长连接没有新的请求时，保持的最长时间  </span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">60s</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化二：开启零拷贝技术">优化二：开启零拷贝技术</h2><p>零拷贝这个概念，在大多数性能较为不错的中间件中都有出现，例如 Kafka、Netty 等，而 Nginx 中也可以配置数据零拷贝技术，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="comment"># 开启零拷贝机制</span></span><br></pre></td></tr></table></figure><p>零拷贝读取机制与传统资源读取机制的区别：</p><ul><li>**传统方式：**硬件–&gt;内核–&gt;用户空间–&gt;程序空间–&gt;程序内核空间–&gt;网络套接字</li><li>**零拷贝方式：**硬件–&gt;内核–&gt;程序内核空间–&gt;网络套接字</li></ul><p>从上述这个过程对比，很轻易就能看出两者之间的性能区别。</p><h2 id="优化三：开启无延迟或多包共发机制">优化三：开启无延迟或多包共发机制</h2><p>在Nginx中有两个较为关键的性能参数，即 tcp_nodelay、tcp_nopush，开启方式如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;  </span><br><span class="line"><span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><p>TCP/IP 协议中默认是采用了Nagle算法的，即在网络数据传输过程中，每个数据报文并不会立马发送出去，而是会等待一段时间，将后面的几个数据包一起组合成一个数据报文发送，<strong>但这个算法虽然提高了网络吞吐量，但是实时性却降低了。</strong><br><strong>tcp_nodelay 作用—实时发送</strong><br>因此你的项目属于交互性很强的应用，那么可以手动开启 tcp_nodelay 配置，让应用程序向内核递交的每个数据包都会立即发送出去。<strong>但这样会产生大量的 TCP 报文头，增加很大的网络开销。</strong><br><strong>tcp_nopush 作用—提高吞吐量</strong><br>相反，有些项目的业务<strong>对数据的实时性要求并不高</strong>，<strong>追求的则是更高的吞吐</strong>，那么则可以开启 tcp_nopush 配置项，这个配置就类似于“塞子”的意思，首先将连接塞住，使得数据先不发出去，等到拔去塞子后再发出去。设置该选项后，内核会尽量把小数据包拼接成一个大的数据包（一个 MTU）再发送出去。<br>当然若一定时间后（一般为 200ms），内核仍然没有积累到一个 MTU 的量时，也必须发送现有的数据，否则会一直阻塞。<br>tcp_nodelay、tcp_nopush 两个参数是“互斥”的，如果追求响应速度的应用推荐开启 tcp_nodelay 参数，如IM、金融等类型的项目。如果追求吞吐量的应用则建议开启tcp_nopush参数，如调度系统、报表系统等。<br>【注意】</p><ol><li>tcp_nodelay 一般要建立在开启了长连接模式的情况下使用。</li><li>tcp_nopush 参数是必须要开启sendfile参数才可使用的。</li></ol><h2 id="优化四：调整-Worker-工作进程">优化四：调整 Worker 工作进程</h2><p><strong>Nginx 启动后默认只会开启一个 Worker 工作进程处理客户端请求</strong>，而我们可以根据机器的 CPU 核数开启对应数量的工作进程，以此来提升整体的并发量支持，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动根据CPU核心数调整Worker进程数量  </span></span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br></pre></td></tr></table></figure><p>工作进程的数量最高开到8个就OK了，8个之后就不会有再大的性能提升。<br>同时也可以稍微调整一下每个工作进程能够打开的文件句柄数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个Worker能打开的文件描述符，最少调整至1W以上，负荷较高建议2-3W  </span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">20000</span>;</span><br></pre></td></tr></table></figure><p>操作系统内核（kernel）都是利用文件描述符来访问文件，无论是打开、新建、读取、写入文件时，都需要使用文件描述符来指定待操作的文件，因此该值越大，代表一个进程能够操作的文件越多（但不能超出内核限制，最多建议3.8W 左右为上限）。</p><h2 id="优化五：开启CPU亲和机制">优化五：开启CPU亲和机制</h2><p>对于并发编程较为熟悉的伙伴都知道，因为进程/线程数往往都会远超出系统CPU的核心数，因为操作系统执行的原理本质上是采用时间片切换机制，也就是一个CPU核心会在多个进程之间不断频繁切换，造成很大的性能损耗。<br>而 CPU 亲和机制则是指将每个 Ngi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexNginxController</span> &#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String port;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();  </span><br><span class="line">        model.addObject(<span class="string">&quot;port&quot;</span>, port);  </span><br><span class="line">        model.setViewName(<span class="string">&quot;index&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> model;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.yuque.com/lzy8684/r2java/nginx#GzGjG">引言</a>nx 的工作进程，绑定在固定的CPU核心上，从而减小CPU切换带来的时间开销和资源损耗，开启方式如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br></pre></td></tr></table></figure><h2 id="优化六：开启epoll模型及调整并发连接数">优化六：开启epoll模型及调整并发连接数</h2><p>在最开始就提到过：<strong>Nginx、Redis 都是基于多路复用模型去实现的程序</strong>，但最初版的多路复用模型select/poll最大只能监听 1024 个连接，而 epoll 则属于 select/poll 接口的增强版，因此采用该模型能够大程度上提升单个Worker 的性能，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;  </span><br><span class="line">    <span class="comment"># 使用epoll网络模型  </span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;  </span><br><span class="line">    <span class="comment"># 调整每个Worker能够处理的连接数上限  </span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">10240</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>十六、隐藏 Nginx 版本号及 Nginx 信息</h1><p><strong>我们使用 Nginx 进行代理时，所有的网络请求都是通过 Nginx 进行分发。而只要是软件那么都会有漏洞。</strong><br>Nginx 也再所难免会有一些漏洞，而 Nginx 也在不断进行版本迭代，那么我们就需要在对外提供访问服务的时候，避免外界获取到我们 Nginx 的版本。<strong>从而减少部分因为版本暴露而出现的攻击风险。</strong>（及时升级最新版本，安全性会更高。）<br><strong>【示例】</strong><br>默认情况下，如果外部用户，访问了一个不存在的资源时，就会返回404错误，出现如下图所示图片：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1684461248649-776bb012-c4e0-4705-9a37-c95d9dd34689.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=204&amp;id=kPW1G&amp;originHeight=204&amp;originWidth=694&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=694" alt=""><br>或者，我们在请求的网页中的 url 中的请求信息中的Response Headers也可以看到 nginx 的版本信息。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1684460773607-765e359d-7694-4253-aac5-6331b76f0bff.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=295&amp;id=chDlu&amp;originHeight=295&amp;originWidth=578&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=578" alt=""><br>以上信息提示对于开发人员来说是有用的、是友好的，但是从信息安全的角度来说，却是一个信息暴露风险。<br>如果暴露版本信息，黑客可以通过此版本信息获取对应版本存在的漏洞，从而对服务器进行攻击。<br><strong>攻击的最开始往往就是信息的收集与探测，因此从安全的角度来说、个人建议隐藏 nginx 的版本号信息。</strong></p><h2 id="隐藏-Nginx-版本号信息">隐藏 Nginx 版本号信息</h2><ol><li>修改 nginx 配置信息nginx.conf文件</li><li>在http {} 或者 server {} 段中添加如下一行信息即可</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><p><strong>【说明与建议】</strong></p><ul><li>建议在 http 段中添加上面配置信息，这样针对所有的 server 段都是有效的。</li><li>若在 server 段中添加上面配置，仅对当前 server 段有效，若其他 server 段需要隐藏 nginx 版本号，需要单独配置。</li></ul><h2 id="隐藏-Nginx-相关信息">隐藏 Nginx 相关信息</h2><h1>十七、Nginx 配置 Index of / 索引页（文件目录）</h1><p>我们在下载一些软件的时候，若通常需要下载更多其他的版本，此时往往会进入一个如下的文件目录页面：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1688453008142-a98c05fb-c984-4bcd-8111-4005ce52028f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=461&amp;id=lA1SR&amp;originHeight=461&amp;originWidth=555&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=555" alt=""><br>该页面能够很好的提供需要对外展示的文件、安装包等文件供客户进行下载。<br><strong>接下来简单聊一下关于使用 nginx 配置 Index of / 索引页 过程</strong>：</p><ol><li>修改 nginx.conf配置文件，开启目录浏览功能autoindex</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">1234</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   D:/web/nginxDownload;        <span class="comment"># 指定实际目录绝对路径；   </span></span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;                       <span class="comment"># 开启目录浏览功能；   </span></span><br><span class="line">        <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;           <span class="comment"># 关闭详细文件大小统计，让文件大小显示MB，GB单位，默认为b；（若开启，文件大小将会以 b 为单位进行显示）</span></span><br><span class="line">        <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;             <span class="comment"># 开启以服务器本地时区显示文件修改日期！ </span></span><br><span class="line">        <span class="attribute">charset</span> gbk;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定目录文件夹内的内容如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1688455035888-dceb1034-a7a9-416e-940c-5c9ea0508fa0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=210&amp;id=naQxv&amp;originHeight=210&amp;originWidth=713&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=713" alt=""></p><ol><li>运行对应页面，测试是否配置成功，出现如下页面表示配置成功：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1688454917710-89c8a192-b8ba-4065-9592-7377f7813b1b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=273&amp;id=h5fJ5&amp;originHeight=273&amp;originWidth=584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=584" alt=""></p><h1>十八、Nginx 配置文件讲解</h1><p>nginx 的配置，一共可以分为三大部分配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中#注释掉的可以在需要的时候开启并修改，没有注释掉的（除了下面location示例）不要删掉，基本都是必须的配置项。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第一部分 全局配置############################</span></span><br><span class="line"><span class="comment">#user  nobody;                        指定启动进程的用户，默认不用指定即可。</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;           配置日志输出，虽然叫error_log但是可以定义输出的级别，默认不写是ERROR级别</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;   </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;           记录pid的文件，默认就是放到这个位置，可以修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只启动一个进程，nginx是多进程单线程模型，但是使用了epoll sendfile 非阻塞io</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第二部分 event配置############################</span></span><br><span class="line"><span class="comment">#主要是网络连接相关的配置</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="comment"># 每个worker能连接1024个链接</span></span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">  <span class="comment">#use epoll; 事件驱动模型select|poll|kqueue|epoll|resig</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第三部分 http配置############################</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>       mime.types;  <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">  <span class="attribute">default_type</span>  text/html;   <span class="comment">#默认的返回类型，可以在server.location里面改</span></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;        <span class="comment">#开启sendfile系统调用</span></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;     <span class="comment">#连接超时时间65s</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 下面展示多个demo，demo之间互相没有依赖关系，可以单独配置来进行测试。</span></span><br><span class="line">    <span class="comment"># 其中demo1到demo6 是nginx相关的。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############### demo1 展示location路径的不同写法优先级 ###############</span></span><br><span class="line">    <span class="comment"># =最高优先级 表示路径完全等于，可以匹配/demo1/a/b的请求</span></span><br><span class="line">    <span class="section">location</span> =/demo1/a/b &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;=/demo1/a/b&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment"># ^~第二高  表示startsWith，可以匹配/demo1/a/b/c和/demo1/abc请求</span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~/demo1/a</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;^~/demo1/a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ~等四个符号第三高  表示正则，如果要用&#123;&#125;是特殊符号，需要整个加引号，建议直接加双引号，防止出错，可以匹配/demo1/bcd</span></span><br><span class="line">    <span class="comment"># 其他三个：~*不区分大小写正则，!~正则不匹配的，!~*不分大小写的正则不匹配</span></span><br><span class="line">    <span class="section">location</span> <span class="string">&quot;~/demo1/\w&#123;3&#125;$&quot;</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;regex&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 最低 没有前置符号 /demo1 /demo111 /demo1/b/c 不符合上面三种，就会匹配到这</span></span><br><span class="line">    <span class="section">location</span> /demo1&#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;/demo1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############### demo2 展示serve静态文件夹 ###############</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;                 <span class="comment"># root就是根目录是当前html目录</span></span><br><span class="line">       <span class="attribute">index</span>  index.html index.htm; <span class="comment"># index表示默认不写的时候转到的文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># root 作用：当访问 localhost/dist 时，实际访问的文件是 /usr/lzy/dist，而非 /usr/lzy，当 /usr/lzy/dist 文件夹不存在时，则会报错 404</span></span><br><span class="line">    <span class="section">location</span> /dist &#123;</span><br><span class="line">       <span class="attribute">root</span>   /usr/lzy;                 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># alias 作用：当访问 localhost/dist 时，实际访问的文件是 /usr/lzy 里的文件，nginx会自动去 /usr/lzy 目录下找文件</span></span><br><span class="line">    <span class="section">location</span> /dist &#123;</span><br><span class="line">       <span class="attribute">alias</span>   /usr/lzy;                 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############## demo3 指定错误文件 ###############</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo4 rewrite重写url rewrite也可以是server级别 ####################</span></span><br><span class="line">    <span class="section">location</span> /demo4 &#123;</span><br><span class="line">      <span class="comment"># 一般放到最后一行</span></span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /<span class="variable">$1</span>/api <span class="literal">permanent</span>; <span class="comment"># permanent301, redirect302, break不在匹配后面rewrite规则，last继续向下匹配。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /demo4/api &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;/demo4/api&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo5 demo6 proxy_pass反向代理 ####################</span></span><br><span class="line">    <span class="comment"># /demo5 =&gt; baidu.com/demo5</span></span><br><span class="line">    <span class="comment"># /demo5/a/b =&gt; baidu.com/demo5/a/b</span></span><br><span class="line">    <span class="section">location</span> /demo5 &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># /demo6 =&gt; baidu.com</span></span><br><span class="line">    <span class="comment"># /demo6/a/b =&gt; baidu.com/a/b</span></span><br><span class="line">    <span class="section">location</span> /demo6 &#123;</span><br><span class="line">      <span class="comment"># proxy_set_header Host $http_host; 如果有请求头改动的需求可以搜索proxy_set_header去了解</span></span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com/;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 下面demo7到demo11是openresty lua的一些配置demo</span></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">############# demo7 init_by_lua_block 用来加载经常用到的库 或者 用来对多进程shared变量赋值 ####################</span></span><br><span class="line">    <span class="section">init_by_lua_block</span> &#123;</span><br><span class="line">      <span class="attribute">cjson</span> = require(<span class="string">&quot;cjson&quot;</span>)       --后续的lua流程中可以直接使用cjson</span><br><span class="line">      local myname = ngx.shared.<span class="literal">info</span> --可以认为是静态变量，通过<span class="literal">info</span>:get获取变量值</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;frank&quot;</span>)</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">&quot;age&quot;</span>, <span class="number">77</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo8 demo9 rewrite_by_lua_block 配合ngx.redirect用来替换rewrite指令 ####################</span></span><br><span class="line">    <span class="comment"># 注意rewrite_by_lua和因为作用阶段是nginx原生rewrite之后，所以容易和原生一起用的时候出错，最好的方式就是只用lua的不要用nginx的了。</span></span><br><span class="line">    location /demo8 &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$a</span> <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$b</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">        ngx.var.<span class="attribute">b</span> = tonumber(ngx.var.a) + <span class="number">1</span></span><br><span class="line">        if tonumber(ngx.var.b) == <span class="number">2</span> then</span><br><span class="line">          return ngx.<span class="literal">redirect</span>(<span class="string">&quot;/demo9&quot;</span>) --默认是<span class="number">302</span>，如果要<span class="number">301</span>或<span class="number">307</span>可以再加一个第二参数即可</span><br><span class="line">        end</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">&quot;demo8&quot;</span>; <span class="comment"># 注意echo是content阶段的，rewrite阶段重定向了请求，就走不到这里了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /demo9 &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;demo9&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">############# demo10 access_by_lua_block 用来做一些加载内容前的准备工作例如访问redis看看用户身份是不是合法 ip是不是合法等 ####################</span></span><br><span class="line">    <span class="section">location</span> /demo10 &#123;</span><br><span class="line">      <span class="section">access_by_lua_block</span> &#123;</span><br><span class="line">        <span class="attribute">local</span> res = ngx.location.capture(<span class="string">&quot;/auth&quot;</span>) -- ngx.location.capture是作为客户端发起http请求拿到结果</span><br><span class="line">        if res.status == ngx.HTTP_OK then</span><br><span class="line">          return  -- 正常return就能走到content阶段</span><br><span class="line">        end</span><br><span class="line">        if res.status == ngx.HTTP_FORBIDDEN then</span><br><span class="line">          ngx.exit(res.status) -- exit + 状态码 就直接返回状态码了</span><br><span class="line">        end</span><br><span class="line">        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">&quot;demo10&quot;</span>; <span class="comment"># 如果合法的话就返回demo10字样</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /auth &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span>; <span class="comment"># 换成403 or 500试试</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo10 content_by_lua_block 用来作为content阶段的脚本，一般测试用的多 ####################</span></span><br><span class="line">    <span class="comment">#不要和 echo proxy_pass等content阶段指令一起用</span></span><br><span class="line">    <span class="section">location</span> /demo10 &#123;</span><br><span class="line">      content_by_lua_block&#123;</span><br><span class="line">        ngx.say(&quot;/demo10&quot;);</span><br><span class="line">        ngx.say(&quot;/demo11&quot;); -- 和外部用俩echo效果类似。ngx.<span class="attribute">say</span> ngx.print区别是前者会多个回车在最后</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># echo &quot;echo10&quot;;   如果外面用了echo，则只有echo的效果</span></span><br><span class="line">      <span class="comment"># proxy_pass http://www.baidu.com; 如果外面用了proxy_pass也是只有proxy_pass效果了，因为都是content阶段，content只能一个生效。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo11 rewrite_by_lua与proxy_pass配合 根据参数进行转发 ####################</span></span><br><span class="line">    location /demo11 &#123;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$proxy</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">rewrite_by_lua</span> <span class="string">&#x27;            # 千万别用content，因为content和proxy_pass阶段犯冲</span></span><br><span class="line"><span class="string">local h = ngx.var.host    # 这里从host中提出第一个.之前的部分看是不是a来决定转发到哪</span></span><br><span class="line"><span class="string">local dot = h:find(&quot;%.&quot;)</span></span><br><span class="line"><span class="string">local prefix = h:sub(1,dot-1)</span></span><br><span class="line"><span class="string">if prefix == &quot;a&quot; then</span></span><br><span class="line"><span class="string">ngx.var.proxy=&quot;127.0.0.1:3000&quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">ngx.var.proxy=&quot;127.0.0.1:5500&quot;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">      &#x27;</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://<span class="variable">$proxy</span><span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【重点讲解】</strong><br><strong>location 路径的不同写法优先级：</strong></p><ol><li>最高优先级=：表示路径完全等于</li><li>第二高^~：表示startsWith，可以匹配/demo1/a/b/c和/demo1/abc请求</li><li>第三高~、~<em>、!~、!~</em>：等四个符号<ul><li>~：正则匹配，表示正则，如果要用{}是特殊符号，需要整个加引号，建议直接加双引号，防止出错，可以匹配/demo1/bcd</li><li>~*：不区分大小写正则，</li><li>!~：正则不匹配的，</li><li>!~*：不分大小写的正则不匹配</li></ul></li><li>最低没有前置符号： /demo1 /demo111 /demo1/b/c 不符合上面三种，就会匹配到这</li></ol><p><strong>root 与 alias 的区别用法：</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/27044221/1688462119705-804dad71-1a71-4f6f-a952-428057f0a3cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=215&amp;id=Kert9&amp;originHeight=215&amp;originWidth=228&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=228" alt=""></p><ul><li>root作用：当访问 127.0.0.1/dist目录下的文件时，nginx会自动去/usr/lzy/dist目录下找文件</li><li>alias作用：当访问 127.0.0.1/dist目录下的文件时，nginx会自动去/usr/lzy目录下找文件</li></ul><p><strong>因此，当使用</strong>root<strong>后 nginx 会自动将这个路径放到 root 路径的后面去找对应的资源，由于大部分人对root与alias的作用用法不熟悉，访问对应地址时经常会遇到 404报错异常</strong></p><h1>Nginx 常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">===== 执行nginx =====</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.相对路径执行（nginx/sbin目录下）</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.绝对路径执行</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">===== 重新加载nginx =====</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">===== 停止nginx服务 =====</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.相对路径</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.绝对路径</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><h2 id="1-启动-nginx-服务">1. 启动 nginx 服务</h2><p><strong>（1）nginx 命令全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /usr/local/nginx/conf/nginx.con</span><br></pre></td></tr></table></figure><p><strong>-c</strong>：指定运行nginx系统的自定义配置文件（若不加该参数，默认使用自定义配置文件，一般位于/usr/local/conf/nginx.conf，具体以实际情况为准）<br><strong>（2）nginx 命令非全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.相对路径执行（nginx/sbin目录下）</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.绝对路径执行</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="2-停止-nginx-服务">2. 停止 nginx 服务</h2><p><strong>（1）nginx 命令全局可用</strong><br><strong>（2）nginx 命令非全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.相对路径</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.绝对路径</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><p>【nginx 的停止种类】</p><ul><li>stop：快速关闭</li><li>quit：安全关闭</li></ul><p>quit 信号，通知 nginx 等待 worker 进程处理完当前的请求后退出（相比较于 stop，quit 是完整有序的进行停止 nginx，并保存相关信息）</p><ul><li>reopen：重新打开一个log文件，主要用于日志切割</li></ul><h2 id="3-重载配置">3. 重载配置</h2><p>reload：重载配置文件<br>reload信号，通知nginx重新载入配置文件nginx.conf。 除了使用reload外，nginx只会在启动时载入一次配置文件，之后对配置文件的修改不会实时对已经运行的nginx进程生效。<br><strong>（1）nginx 命令全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>（2）nginx 命令非全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">===== 重新加载nginx =====</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>【reload 实现原理】</strong><br>当运行reload命令时，master 进程会尝试读取配置文件：</p><ul><li><strong>如果配置文件没有问题</strong></li></ul><p>master 进程会启动新的 worker 进程来运行新的配置文件并开始处理新请求，同时会通知老的 worker 进程不再继续接收、处理新的请求，并在处理完当前任务后退出。</p><ul><li><strong>如果配置文件存在问题不能执行</strong></li></ul><p>master 进程会回退老配置文件继续工作，不会导致 nginx 进程整个异常退出。</p><h2 id="4-验证配置">4. 验证配置</h2><p><strong>【为什么要验证配置呢？】</strong><br>试想一个场景，线上nginx系统正在正常运行。<br>现因某种原因，需重新加载一下配置文件，但是，在加载之前，你不确定刚编辑完成的配置文件是否正确（例如：语法等等规范性）<br>只有配置文件语法等等正确，加载后才会被系统重新读取并利用，否则，系统会回退原配置文件继续运行！！<br>因此，在加载配置文件之前，最好先验证一下配置文件的正确性。这样可以确保加载更有把握，更稳妥。<br><strong>（1）nginx 命令全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证默认配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证自定义配置文件</span></span><br><span class="line">nginx -t -c /home/test/conf/nginx.conf</span><br></pre></td></tr></table></figure><p><strong>（2）nginx 命令非全局可用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证默认配置文件</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证自定义配置文件</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t -c /home/test/conf/nginx.conf</span><br></pre></td></tr></table></figure><h1>nginx 的【reload】与【重启】的区别</h1><p>有很多人在使用 nginx 的命令 【reload】，但却不知道其与 nginx 的 【stop -&gt; 启动】的区别。<br>除了 reload 其实实现了步骤 【stop】、【启动】两个步骤外，其底层实现的原理也是不一样的。<br>【区别】</p><ul><li><strong>reload</strong>：</li></ul><p>reload不用重启服务，直接重新加载配置文件，客户端感觉不到服务异常，平滑切换。</p><ul><li><strong>重启（停止-&gt;启动）</strong>：</li></ul><p>会停止nginx服务，在重新启动之前，整个 nginx 会关闭，停止接收所有请求，若非通过 quit 进行停止，会造成终止当前正在进行的任务。这对于那些需要不停服更新的系统来说是个弊端。<br>【总结】<br>reload 重新加载的配置，仍为启动 nginx 系统时运行的配置文件（应用场景：可能会因业务需求调整，对配置文件做修改，估需重新加载之，也称<strong>热部署</strong>）</p><h1>Nginx 常规部署</h1><ol><li>修改 nginx 配置文件nginx.conf</li></ol><p>修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen       8880;<span class="comment">#启动后的前端访问端口</span></span><br><span class="line">   server_name  localhost;<span class="comment">#启动时的地址</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 启动后，地址栏输入：localhost:8132 或 localhost:8132/, 默认会在html文件夹下找 index.html、index.htm文件</span></span><br><span class="line">   location / &#123;</span><br><span class="line">       root    /usr/local/zslzy/lzytest/dist;<span class="comment"># 本地项目路径</span></span><br><span class="line">       index  index.html index.htm;<span class="comment">#默认找的页面</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 配置代理。由于项目是在本地启动的，而我们的 request 需要请求其他ip地址。</span></span><br><span class="line"> <span class="comment"># 如果你的 request 链接为 localhost:8880/api/login?name=12345,</span></span><br><span class="line"> <span class="comment"># 那么下面配的就是 location /api,最终会代理到 http://192.168.0.0:80/api/login?name=12345</span></span><br><span class="line">   location /lzytest/ &#123;</span><br><span class="line">       proxy_pass http://127.0.0.1:8081/lzytest/; <span class="comment">#后端接口地址，端口号也要注意哦，不是80的记得带上端口号</span></span><br><span class="line">       proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">       proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">       proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">       proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 一般前端不管用vue，还是react等框架，默认都是单页面的，如果你的项目是多页面的，则需要用到下面的配置。</span></span><br><span class="line">   <span class="comment"># 因为此时你的浏览器的url不是localhost:8880/#/login,而是 localhost:8880/a.html/#/login</span></span><br><span class="line">   <span class="comment"># 所以我们需要将路径中a.html指向具体的html文件夹中的文件，因为默认是index.html</span></span><br><span class="line">   location /a.html &#123;</span><br><span class="line">       <span class="built_in">alias</span> html;</span><br><span class="line">       index a.html;</span><br><span class="line">   &#125;</span><br><span class="line">   location /b.html&#123;</span><br><span class="line">       <span class="built_in">alias</span> html;</span><br><span class="line">       index b.html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意点（后端接口配置）：">注意点（后端接口配置）：</h4><p>如果你的配置出现 404 了，这个时候你可以对照检查下面的问题是不是你遇到的。</p><ol><li>proxy_pass 地址后面要不要加“/”,这个取决于匹配的 /api/ 作不作为你uri的一部分，如果 /api/ 是其中一部分,则不需要带上“/”；反之带上。加了“/”相当于是绝对根路径，nginx 不会把location 中匹配的路径 /api/ 带上。</li></ol><p>【举个例子】：</p><ul><li>请求地址原本是这样： <a href="http://192.168.1.1/api/a.html;">http://192.168.1.1/api/a.html;</a></li><li>如果配置是这样：proxy_pass <a href="http://192.168.1.1/;">http://192.168.1.1/;</a>（后端接口地址）</li><li>那么请求接口地址应该变成这样： <a href="http://192.168.1.1/a.html">http://192.168.1.1/a.html</a></li></ul><ol><li><p>proxy_pass的地址记得在hosts文件做ip映射，建议直接使用域名对应的ip地址。</p></li><li><p>location 中 ~ （区分大小写）与 ~* （不区分大小写）标识均为正则匹配。如果你不确定，请在location后面加上 location ~* /api/ { }这样的配置（目的：不区分“api”三个字母的大小写）。</p></li><li><p>启动/停止/退出等nginx命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx服务</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 退出nginx服务</span></span><br><span class="line">nginx -s quit</span><br><span class="line"><span class="comment"># 重新打开nginx日志文件</span></span><br><span class="line">nginx -s reopen</span><br><span class="line"><span class="comment"># 重新加载nginx配置文件</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若以上命令不存在，则去nginx根目录下的sbin文件夹下进行运行</span></span><br></pre></td></tr></table></figure><ol><li>检验是否配置成功</li></ol><p>浏览器输入对应的IP地址:端口号，配置成功进入默认页面（根据上述配置，若输入：127.0.0.1:8132 或 127.0.0.1:8132/ 则进入对应index页面）</p><h1>通过 nginx 实现集群部署</h1><p><strong>什么是集群部署？</strong><br>即存在一个前端，对应多个服务端（一个后端部署在多个服务器上）<br>【实现思路】通过Nginx进行后端分发，实现集群部署。</p><ul><li>通过一个前端一个后端进行部署，nginx部署前端，配置文件如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>       <span class="number">8132</span>;<span class="comment">#启动后的前端访问端口</span></span><br><span class="line">   <span class="attribute">server_name</span>  localhost;<span class="comment">#启动时的地址</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># =======配置前端======</span></span><br><span class="line">   <span class="comment"># 启动后，地址栏输入：localhost:8132 或 localhost:8132/, 默认会在html文件夹下找 index.html、index.htm文件</span></span><br><span class="line">   <span class="section">location</span> / &#123;</span><br><span class="line">   <span class="attribute">root</span>    /usr/local/hzjcy/hzqbhs;</span><br><span class="line">   <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># =======配置后端======</span></span><br><span class="line">   <span class="comment"># 配置代理。由于项目是在本地起动的，而我们的request需要请求其他ip地址。如果你的 request链接为localhost:8880/api/login?name=12345,那么下面配的就是location /api, 最终会代理到 http://192.168.0.0:80/api/login?name=12345</span></span><br><span class="line">   <span class="section">location</span> /hzqbhs/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/hzqbhs/;<span class="comment">#后端接口地址，端口号也要注意哦， 不是80的记得带上端口号</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过一个前端一个后端进行集群部署，nginx部署前端，配置文件如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群+服务端权重（weight）</span></span><br><span class="line"><span class="comment"># 权重（weight）值越大，访问率越大</span></span><br><span class="line"><span class="section">upstream</span> jiqun &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.130:8080</span> weight=<span class="number">5</span>;<span class="comment"># 后端服务器 1</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.131:8080</span> weight=<span class="number">3</span>;<span class="comment"># 后端服务器 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">8132</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>    /usr/local/hzjcy/hzqbhs;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /hzqbhs/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://jiqun/hzqbhs/;<span class="comment"># 路径：http:// + 集群名称 + 访问路径</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-集群部署中的-ip-hash-机制">1. 集群部署中的 ip_hash 机制</h2><p>Nginx 中的 ip_hash 技术能够将某个 ip 的请求定向到同一台后端 web 机器中,这样一来这个 ip 下的客户端和某个后端 web 机器就能建立起稳固的 session.<br>ip_hash 机制能够让某一客户机在相当长的一段时间内只访问固定的后端的某台真实的 web 服务器,这样会话就会得以保持,在网站页面进行 login 的时候就不会在后面的 web 服务器之间跳来跳去了，也不会出现登录一次的网站又提醒重新登录的情况<br><strong>【用法】</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群+服务端权重（weight）</span></span><br><span class="line"><span class="comment"># 权重（weight）值越大，访问率越大</span></span><br><span class="line"><span class="section">upstream</span> jiqun &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.130:8080</span>;<span class="comment"># 后端服务器 1</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.0.131:8080</span>;<span class="comment"># 后端服务器 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">8132</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>    /usr/local/hzjcy/hzqbhs;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /hzqbhs/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://jiqun/hzqbhs/;<span class="comment"># 路径：http:// + 集群名称 + 访问路径</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【原理】</strong><br>ip_hash 是根据用户请求过来的 ip，然后映射成 hash 值，然后分配到一个特定的服务器里面；<br>使用 ip_hash 这种负载均衡以后，可以保证用户的每一次会话都只会发送到同一台特定的Tomcat里面，它的 session 不会跨到其他的 tomcat 里面去的；</p><ol><li>hash 算法原理：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/27044221/1709287052982-f69c8be8-9513-4678-97bb-9b1327323c59.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_26%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=534&amp;id=bmeKD&amp;originHeight=534&amp;originWidth=929&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=929" alt=""><br>首先通过将 ip 地址映射成一个 hash 值，然后将 hash 值对 Tomcat 的数量 3 取模，得到 Tomcat 的索引 0、1、2；<br>比如：5%3=2，则把这个请求发送到 Tomcat3 服务器，以此类推；<br>这样一来，只要用户的IP不发生改变，当前用户的会话就能够一直保持；<br><img src="https://cdn.nlark.com/yuque/0/2024/png/27044221/1709287173992-2955f908-4e73-4289-90ec-c4ca30bbd22d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_5bCP6buRYnXmg5E%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#from=url&amp;height=398&amp;id=QW9wX&amp;originHeight=398&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=730" alt=""><br>nginx 的 ip_hash 算法是取 ip 地址的前三段数字进行 hash 映射，如果只有最后一段不一样，也会发送到同一个Tomcat里面</p><ol><li>ip_hash 算法原理：</li></ol><h1>Nginx 其他经典功能、问题</h1><ol><li>nginx 热备份（待了解）</li></ol><p>网友说，热备份就是平常都是请求至服务 1，如果需要更新服务 1，它会帮你转发请求到服务 2，服务 2 和服务 1 是一样的，只不过服务 2 是个备份。</p><ol><li>什么叫平滑加载</li><li>Nginx 与 Tomcat 的区别</li></ol><p>此处为语雀内容卡片，点击链接查看：<a href="https://www.yuque.com/lzy8684/eseyt5/squh1114pcay4pvs">https://www.yuque.com/lzy8684/eseyt5/squh1114pcay4pvs</a></p><h1>【参考资料】</h1><ul><li><a href="https://gist.github.com/sunwu51/bf6bd40ec8e9457bad8edd50aa06881a">https://gist.github.com/sunwu51/bf6bd40ec8e9457bad8edd50aa06881a</a></li><li><a href="https://blog.csdn.net/qq_42584411/article/details/105428926">nginx配置文件location写了内容，但是在页面访问的时候404_蓝奕世的博客-CSDN博客</a></li></ul><h2 id="官方使用文档指南：">官方使用文档指南：</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/27044221/1688537615480-41a61698-f63d-4ab9-8564-dc7d84abdb2e.pdf">NGINX Cookbook 2E Simplified Chinese Edition_CN.pdf</a></p><h2 id="其他相关书籍">其他相关书籍</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/27044221/1709283506618-99e6fb24-3c4b-4b42-b173-5d4ba0190392.pdf">Nginx高性能Web服务器详解.pdf</a>几乎绝大部分项目都会使用它，Nginx是一个轻量级的高性能HTTP反向代理服务器，同时它也是一个通用类型的代理服务器，支持绝大部分协议，如TCP、UDP、SMTP、HTTPS等。</p><blockquote><p>来自: <a href="https://www.yuque.com/lzy8684/r2java/nginx">Nginx — 深入浅出</a></p></blockquote><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nginx是目前负载均衡技术中的主流方案，&lt;br&gt;
【更新记录】&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;早期的业务都是基于单体节点部署，由于前期访问流量不大，因此单体结构也可满足需求，但随着业务增长，流量也越来越大，那么最终单台服务器受到的访问压力也会逐步增高。时间一长，单</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.bojiboqi.fun/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Nginx" scheme="http://www.bojiboqi.fun/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker私有仓库</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</id>
    <published>2024-04-09T02:35:45.536Z</published>
    <updated>2024-04-09T04:01:05.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-registry">docker registry</h2><p>我们可以使用<code>docker push</code>将自己的image推送到docker hub中进行共享，但是在实际工作中，很多公司的代码不能上传到公开的仓库中，因此我们可以创建自己的镜像仓库。<br>docker 官网提供了一个docker registry的私有仓库项目，可以方便的通过docker部署。<br><code>docker run -d -p 5000:5000 --restart always --name registry registry:2</code><br><code>docker image tag ruoyi-java:4.7.4 localhost:5000/ruoyi-java:4.7.4</code><br><code>docker push localhost:5000/ruoyi-java:4.7.4</code><br><code>docker pull localhost:5000/ruoyi-java:4.7.4</code><br>如果遇到以下错误：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1663307599499-8035dfa9-01e1-44dd-8d96-e27c52ea0a57.png#averageHue=%23383838&amp;from=url&amp;height=64&amp;id=Om5UK&amp;originHeight=128&amp;originWidth=1880&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=940" alt=""><br>这是因为<code>docker push</code>默认使用<code>HTTPS</code>协议，而服务端的<code>registry</code>仓库使用的是<code>HTTP</code>。<br>解决这个问题，需要修改<code>/etc/docker/daemon.json</code>，加入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.56.108:5000&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="harbor">harbor</h2><p>habor是一个功能更强大镜像仓库，它具有完整的权限控制和Web界面，更符合我们的实际工作场景。<br>下载bitname发布的harbor镜像配置包：<a href="https://github.com/bitnami/containers/archive/main.tar.gz">https://github.com/bitnami/containers/archive/main.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> harbor</span><br><span class="line">tar xzvf containers-main.tar.gz</span><br><span class="line"><span class="built_in">cd</span> containers-main/bitnami/harbor-portal</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://192.168.56.108/harbor/projects">http://192.168.56.108</a>，默认用户名/密码：<code>admin/bitnami</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1663308776828-c8e2eb02-b689-4f47-9243-83a1a1cb5f41.png#averageHue=%231c2f38&amp;from=url&amp;height=585&amp;id=mmw01&amp;originHeight=1170&amp;originWidth=2416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1208" alt=""></p><h2 id="保存与加载image">保存与加载image</h2><p>当我们处于离线状态，比如在很多内网上不能访问互联网，这时候不能通过镜像仓库的方式共享image，我们可以使用导出和导入功能，手动拷贝镜像。<br><code>docker save</code>会包含所有层，以及所有标签 + 版本信息。<br><code>docker save alpine:3.15 &gt; alpine-3.15.tar </code> 保存image<br><code>docker rmi alpine:3.15</code> 删除本地image<br><code>docker load &lt; alpine-3.15.tar</code> 加载image<br>注意：<br>不要跟export和import命令混淆<br><code>docker save/load IMAGE</code> save和load操作的是镜像<br><code>docker export/import CONTAINER</code>export和import操作对象是容器<br>image包含多个层，每一层都不可变，save保存的信息包含每个层和所有标签 + 版本信息。<br>容器运行的时候会创建一个可写入的容器层，所有的更改都写入容器层，export导出的只有容器层，不包含父层和标签信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1661007394206-b7d81707-a557-41e8-a840-f708acf20292.png#averageHue=%23f1ebdc&amp;from=url&amp;height=258&amp;id=IPo0i&amp;originHeight=469&amp;originWidth=675&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=371" alt=""></p><h2 id="docker-registry-2">docker registry</h2><p>我们可以使用<code>docker push</code>将自己的image推送到docker hub中进行共享，但是在实际工作中，很多公司的代码不能上传到公开的仓库中，因此我们可以创建自己的镜像仓库。<br>docker 官网提供了一个docker registry的私有仓库项目，可以方便的通过docker部署。<br><code>docker run -d -p 5000:5000 --restart always --name registry registry:2</code><br><code>docker image tag ruoyi-java:4.7.4 localhost:5000/ruoyi-java:4.7.4</code><br><code>docker push localhost:5000/ruoyi-java:4.7.4</code><br><code>docker pull localhost:5000/ruoyi-java:4.7.4</code><br>如果遇到以下错误：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1663307599499-8035dfa9-01e1-44dd-8d96-e27c52ea0a57.png#averageHue=%23383838&amp;from=url&amp;height=64&amp;id=MoUzA&amp;originHeight=128&amp;originWidth=1880&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=940" alt=""><br>这是因为<code>docker push</code>默认使用<code>HTTPS</code>协议，而服务端的<code>registry</code>仓库使用的是<code>HTTP</code>。<br>解决这个问题，需要修改<code>/etc/docker/daemon.json</code>，加入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.56.108:5000&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="harbor-2">harbor</h2><p>habor是一个功能更强大镜像仓库，它具有完整的权限控制和Web界面，更符合我们的实际工作场景。<br>下载bitname发布的harbor镜像配置包：<a href="https://github.com/bitnami/containers/archive/main.tar.gz">https://github.com/bitnami/containers/archive/main.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> harbor</span><br><span class="line">tar xzvf containers-main.tar.gz</span><br><span class="line"><span class="built_in">cd</span> containers-main/bitnami/harbor-portal</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://192.168.56.108/harbor/projects">http://192.168.56.108</a>，默认用户名/密码：<code>admin/bitnami</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1663308776828-c8e2eb02-b689-4f47-9243-83a1a1cb5f41.png#averageHue=%231c2f38&amp;from=url&amp;height=585&amp;id=sVKLb&amp;originHeight=1170&amp;originWidth=2416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=1208" alt=""></p><h2 id="保存与加载image-2">保存与加载image</h2><p>当我们处于离线状态，比如在很多内网上不能访问互联网，这时候不能通过镜像仓库的方式共享image，我们可以使用导出和导入功能，手动拷贝镜像。<br><code>docker save</code>会包含所有层，以及所有标签 + 版本信息。<br><code>docker save alpine:3.15 &gt; alpine-3.15.tar </code> 保存image<br><code>docker rmi alpine:3.15</code> 删除本地image<br><code>docker load &lt; alpine-3.15.tar</code> 加载image<br>注意：<br>不要跟export和import命令混淆<br><code>docker save/load IMAGE</code> save和load操作的是镜像<br><code>docker export/import CONTAINER</code>export和import操作对象是容器<br>image包含多个层，每一层都不可变，save保存的信息包含每个层和所有标签 + 版本信息。<br>容器运行的时候会创建一个可写入的容器层，所有的更改都写入容器层，export导出的只有容器层，不包含父层和标签信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1661007394206-b7d81707-a557-41e8-a840-f708acf20292.png#averageHue=%23f1ebdc&amp;from=url&amp;height=258&amp;id=AuhKZ&amp;originHeight=469&amp;originWidth=675&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=371" alt=""></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-registry&quot;&gt;docker registry&lt;/h2&gt;
&lt;p&gt;我们可以使用&lt;code&gt;docker push&lt;/code&gt;将自己的image推送到docker hub中进行共享，但是在实际工作中，很多公司的代码不能上传到公开的仓库中，因此我们可</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.bojiboqi.fun/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.bojiboqi.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>IDEA——强大的Shell工具 _ 起凡Code闲聊</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/IDEA%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84Shell%E5%B7%A5%E5%85%B7%20_%20%E8%B5%B7%E5%87%A1Code%E9%97%B2%E8%81%8A/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/IDEA%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84Shell%E5%B7%A5%E5%85%B7%20_%20%E8%B5%B7%E5%87%A1Code%E9%97%B2%E8%81%8A/</id>
    <published>2024-04-09T02:35:35.728Z</published>
    <updated>2024-04-09T04:01:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA——强大的Shell工具"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#idea%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84shell%E5%B7%A5%E5%85%B7">IDEA——强大的Shell工具</a></h2><h2 id="SSH"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#ssh">SSH</a></h2><p>在使用Shell工具时最常用的是SSH输入命令操控远程服务器。在idea中使用SSH也是很简单的事情。<br>settings -&gt; tools -&gt; ssh congratulations<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200444092-d31ed8af-489b-47d3-b332-e4f5c0c4ff2a.png#averageHue=%23303642&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=uc06bc0bc&amp;originHeight=1368&amp;originWidth=1737&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106558&amp;status=done&amp;style=none&amp;taskId=u6222ac4e-37a3-40e4-b358-349d571c406&amp;title=" alt="image.jpg"><br>图1 配置SSH<br>alt+f12打开命令行，在右上角的下拉框中选择上面配置好的SSH会话。之后直接在命令行中就可以向服务器发送命令了。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200445054-f98de21b-c19f-4143-9d62-26f3a5f36d40.png#averageHue=%23292f39&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ucdccc968&amp;originHeight=710&amp;originWidth=2045&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=108446&amp;status=done&amp;style=none&amp;taskId=uc159be0e-0381-440d-bdab-f7abe09d057&amp;title=" alt="image.jpg"><br>图2 命令行连接SSH</p><h2 id="SFTP"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#sftp">SFTP</a></h2><p>在控制远程服务器时除了发送命令行，自然少不了互传文件，文件预览编辑的功能。幸运的是强大的idea也有这个功能<br>settings -&gt; deployment。点击左上角的➕添加sftp服务器，可以从之前已经配置的ssh session中选择。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200445565-ed4bd1cd-ec90-42e6-bc1c-a6a8232dc5b9.png#averageHue=%232a213a&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ub9e08990&amp;originHeight=1374&amp;originWidth=1737&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=116747&amp;status=done&amp;style=none&amp;taskId=uacd57d48-57e5-4899-a395-1c652f21eb8&amp;title=" alt="image.jpg"><br>图3 配置sftp<br>默认情况下idea没有显示远程sftp服务器的菜单，需要手动打开。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200440533-b6f192ee-e4f6-4eeb-9fcb-b2fa9d443595.png#averageHue=%2325313e&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u1e64f9c2&amp;originHeight=295&amp;originWidth=1320&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34025&amp;status=done&amp;style=none&amp;taskId=u2144afe8-5779-4811-8a7f-37472c7d4a3&amp;title=" alt="image.jpg"><br>图4 显示sftp服务器<br>在右侧的菜单栏中打开sftp服务器列表，选择已经配置好的sftp服务器，确认后下面就可以显示服务器内的文件了，可以编辑，可以下载，可以拖动本地文件到远程文件夹。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200445577-5860e013-36da-4f20-aff2-75c997a1efa9.png#averageHue=%232f3541&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ub2c51c20&amp;originHeight=1363&amp;originWidth=1378&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=83086&amp;status=done&amp;style=none&amp;taskId=u2e83857c-6cd5-42cf-b2a1-a8a05cea61a&amp;title=" alt="image.jpg"><br>图5 显示sftp服务器</p><h2 id="Database"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#database">Database</a></h2><p>作为一名软件开发程序员，经常需要远程查看服务器上的数据库。所以除了shell工具之外还需准备数据库连接工具。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200452635-ceb0d2ec-8895-4457-b47f-d55d58b2728c.png#averageHue=%23231f31&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u9e38bb1b&amp;originHeight=1792&amp;originWidth=1817&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=217891&amp;status=done&amp;style=none&amp;taskId=ud1d95faf-0f24-4856-9ba8-6ba31a44a8e&amp;title=" alt="image.jpg"><br>图6 选择数据库<br>在ssh/ssl页签中选择已经配置好的ssh。之后切换到general页签输入数据库的账号密码，记住不需要修改host。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200452205-a92e2a22-b57f-48fe-a18b-1d753aaead6a.png#averageHue=%232b223b&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ua8de8ef3&amp;originHeight=1413&amp;originWidth=1608&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=140371&amp;status=done&amp;style=none&amp;taskId=u741879d9-ae95-43b1-b3e3-7870a20a694&amp;title=" alt="image.jpg"><br>图7 连接数据库<br>连接数据库后你使用这</p><ul><li>数据库迁移<br>在服务器上部署新项目的时候需要在服务器上新建数据库，然后把本地的表迁移到服务器上，在idea中就可以实现这个操作。</li><li>结构对比<br>如果你在本地的数据库修改了某个字段，然后想同步到服务器上，idea的数据库/表结构对比非常好用。</li><li>数据导出导入</li></ul><h2 id="部署"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#%E9%83%A8%E7%BD%B2">部署</a></h2><p>settings -&gt; deployment<br>将本地编译后的文件映射到服务器的目录。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200452772-784385c2-1712-453a-b75a-56b4bf2eead5.png#averageHue=%23303743&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u51f0a5e3&amp;originHeight=1368&amp;originWidth=1737&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=137589&amp;status=done&amp;style=none&amp;taskId=u5c591b0d-2eac-4460-a4fb-3aeb09864b9&amp;title=" alt="image.jpg"><br>图8 映射路径<br>在本地映射到服务器的文件上右键，上传。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200456855-2afac325-7156-46ee-a496-582039c0ea18.png#averageHue=%23303743&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u1553bad8&amp;originHeight=1604&amp;originWidth=1697&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=295895&amp;status=done&amp;style=none&amp;taskId=u0ef2f737-ad1b-49fc-8054-6029390d2ae&amp;title=" alt="image.jpg"><br>图9 上传本地文件</p><h2 id="远程命令"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4">远程命令</a></h2><p>在部署完之后一般需要执行命令或者脚本，这边我演示将远程服务器的nginx命令映射到idea里面。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200456288-fbf0568e-ac38-48c6-ae73-a6b16e9c9aff.png#averageHue=%232f3540&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ua1c92c49&amp;originHeight=1484&amp;originWidth=2473&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=242455&amp;status=done&amp;style=none&amp;taskId=u83105ccb-0443-4bb9-8e93-b54932ffb23&amp;title=" alt="image.jpg"><br>图10 配置远程命令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200457522-fce2451a-4784-4fe0-8550-77c9ef2ac85f.png#averageHue=%232e333f&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=uaa36be3f&amp;originHeight=1062&amp;originWidth=1301&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=148006&amp;status=done&amp;style=none&amp;taskId=u1ffa4828-9490-484e-9e7d-b29492ac378&amp;title=" alt="image.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200455683-8adcd995-214f-4e9d-8016-d9b0365db690.png#averageHue=%23333b4b&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=uf2546ec1&amp;originHeight=282&amp;originWidth=552&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12384&amp;status=done&amp;style=none&amp;taskId=uda6f5759-8c7e-4d8f-9cc2-2ff56f12afe&amp;title=" alt="image.jpg"><br>图11 执行远程命令</p><h2 id="远程执行"><a href="https://www.jarcheng.top/blog/tools/idea/shell.html#%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C">远程执行</a></h2><p>如果大家有做过支付功能可以知道它必须用于公网ip，我们在本地调试不了支付功能（除非内网穿透），只能将应用打包放到服务器上运行。这样做每次修改代码都需要重新打包部署很费时间。这个远程执行的功能就很好用了，可以直接指定你的应用运行机器。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200457671-6fe69fca-0025-4572-b33a-137aaf7e7a01.png#averageHue=%232b223a&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ub8efdfe9&amp;originHeight=1413&amp;originWidth=1608&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=148427&amp;status=done&amp;style=none&amp;taskId=ua2eaeb4f-f4f9-47d8-b53d-ad7c422119a&amp;title=" alt="image.jpg"><br>图12 远程运行应用</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA——强大的Shell工具&quot;&gt;&lt;a href=&quot;https://www.jarcheng.top/blog/tools/idea/shell.html#idea%E2%80%94%E2%80%94%E5%BC%BA%E5%A4%A7%E7%9A%84shel</summary>
      
    
    
    
    <category term="工具技巧" scheme="http://www.bojiboqi.fun/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="IDEA使用技巧" scheme="http://www.bojiboqi.fun/tags/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>HTTP各种参数发送</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/HTTP%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E5%8F%91%E9%80%81/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/HTTP%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E5%8F%91%E9%80%81/</id>
    <published>2024-04-09T02:35:20.275Z</published>
    <updated>2024-04-09T04:01:08.133Z</updated>
    
    <content type="html"><![CDATA[<p>利用Idea的HttpClient向SpringBoot发起各种请求参数。后端使用<code>@RequestParam</code>，<code>@ModelAttribute</code>，<code>@PathVariable</code>，<code>@RequestBody</code>，<code>@RequestPart</code>去接收。</p><h2 id="HTTP各种参数发送"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#http%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E5%8F%91%E9%80%81">HTTP各种参数发送</a></h2><h2 id="1-spring-mvc-中的参数接受之-GET-请求"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-spring-mvc-%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E6%8E%A5%E5%8F%97%E4%B9%8B-get-%E8%AF%B7%E6%B1%82">1. spring mvc 中的参数接受之 GET 请求</a></h2><p>Get 请求是没有 body 的，参数都是放在 url 上面。<br>根据在 url 参数格式不同，一共有下面这几种</p><ol><li>Path Variable</li><li>Query</li><li>Matrix Variable（不常用）</li></ol><h2 id="1-1-path-variable"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-1-path-variable">1.1 path variable</a></h2><h3 id="1-1-1-使用-PathVariable"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-1-1-%E4%BD%BF%E7%94%A8-pathvariable">1.1.1 使用 @PathVariable</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:7720/user/find/123/起凡</span><br><span class="line">                                    \ /</span><br><span class="line">                                这里的&quot;123&quot;和&quot;起凡&quot;是参数</span><br></pre></td></tr></table></figure><p>这种传参格式就如同名字一样&quot;路径变量&quot;，参数在路径上。<br>针对这种传参方式后端可以这么接受。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在路径中用id占位，代表这个地方将会是参数</span><br><span class="line">    @GetMapping(&quot;find/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="line">    // 方法上面通过占位名称得到参数</span><br><span class="line">    public R&lt;Boolean&gt; pathVariable(@PathVariable String id, @PathVariable String username) &#123;</span><br><span class="line">        log.info(id);</span><br><span class="line">        log.info(username);</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-query-传参"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-2-query-%E4%BC%A0%E5%8F%82">1.2 query 传参</a></h2><h3 id="1-2-1-使用-RequestParam"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-2-1-%E4%BD%BF%E7%94%A8-requestparam">1.2.1 使用 @RequestParam</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###</span><br><span class="line">GET http://localhost:7720/user/find?username=起凡&amp;password=123456</span><br></pre></td></tr></table></figure><p>在路径的最后用 “?” 隔开要传输的参数。 通过 “&amp;” 分割多个 <code>key=value</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;find&quot;)</span><br><span class="line">    // 通过key接受参数</span><br><span class="line">    public R&lt;Boolean&gt; get(@RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line">        log.info(username);</span><br><span class="line">        log.info(password);</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-使用-ModelAttribute"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-2-2-%E4%BD%BF%E7%94%A8-modelattribute">1.2.2 使用 @ModelAttribute</a></h3><p>如果现在需要做一个用户搜索功能，前端会传 pageNum（页数）, pageSize（每页大小）, keyword（关键词），startTime（创建日期）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:7720/user/search?pageNum=1&amp;pageSize=10</span><br><span class="line">&amp;keyword=起凡&amp;startTime=Fri Apr 29 2022 21:16:50</span><br></pre></td></tr></table></figure><p>使用 <code>@RequestParam</code>，我们需要在接口上接受四个参数，这样会显得接口过于庞大，不雅观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;search&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; search(@RequestParam Integer pageSize, @RequestParam Integer pageNum, @RequestParam String keyword, @RequestParam Date startTime) &#123;</span><br><span class="line"></span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>改造一下，我们可以创建一个 SearchDto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class SearchDto &#123;</span><br><span class="line">    Integer pageNum;</span><br><span class="line">    Integer pageSize;</span><br><span class="line">    String keyword;</span><br><span class="line">    Date startTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>@ModelAttribute</code> 就可以接受多个 query 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;search&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; search(@ModelAttribute SearchDto searchDto) &#123;</span><br><span class="line">        log.info(searchDto.toString());</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-使用-ModelAttribute-和-RequestParam"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_1-2-3-%E4%BD%BF%E7%94%A8-modelattribute-%E5%92%8C-requestparam">1.2.3 使用 @ModelAttribute 和 @RequestParam</a></h3><p>刚刚我们做的是用户搜索功能，现在假设我们需要做文章搜索功能。文章搜索的过滤条件比用户搜索多了一个 category（文章类别）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:7720/article/search?pageNum=1&amp;pageSize=10</span><br><span class="line">&amp;keyword=spring boot&amp;startTime=Fri Apr 29 2022 21:16:50&amp;category=科技</span><br></pre></td></tr></table></figure><p>这时我们可以再创建一个 ArticleSearchDto 然后继承 SearchDto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class ArticleSearchDto extends SearchDto&#123;</span><br><span class="line">    String category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在文章搜索接口上接受 ArticleSearchDto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;search&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; search(@ModelAttribute ArticleSearchDto searchDto) &#123;</span><br><span class="line">        log.info(searchDto.toString());</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是这样真的方便吗？因为多出一个字段就要再建立一个类，是不是有点麻烦了。我们完全可以把<code>@ModelAttribute</code> 和 <code>@RequestParam</code><br>结合起来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;search&quot;)</span><br><span class="line">    // @RequestParam 获取新增的过滤条件</span><br><span class="line">    public R&lt;Boolean&gt; search(@ModelAttribute SearchDto searchDto, @RequestParam String category) &#123;</span><br><span class="line">        log.info(searchDto.toString());</span><br><span class="line">        log.info(category);</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-spring-mvc-中的参数接受之-POST-请求"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-spring-mvc-%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E6%8E%A5%E5%8F%97%E4%B9%8B-post-%E8%AF%B7%E6%B1%82">2. spring mvc 中的参数接受之 POST 请求</a></h2><p>POST 请求的参数可以放在 url 上，也可以放在 body 种。<br>POST 请求的 body 格式大概可以分为两种，</p><ol><li>一种是只能传输一个对象</li><li>一种是可以传输多个对象。</li></ol><p>application/json，application/x-www-form-urlencoded 属于第一种<br>multipart/form-data 属于第二种。</p><h2 id="2-1-application-x-www-form-urlencoded-传参"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-1-application-x-www-form-urlencoded-%E4%BC%A0%E5%8F%82">2.1 application/x-www-form-urlencoded 传参</a></h2><h3 id="2-1-1-RequestParam-和-ModelAttribute"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-1-1-requestparam-%E5%92%8C-modelattribute">2.1.1 @RequestParam 和 @ModelAttribute</a></h3><p>通过上面的例子可以知道，<code>@RequestParam</code> 和 <code>@ModelAttribute</code>可以获取 query 里面的参数。<br>实际上这两个注解还可以获取 application/x-www-form-urlencoded 里面的参数。<br>之前是通过 get 请求进行文章搜索。现在改造一下，前端通过 post 请求进行文章搜索。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:7720/article/search?author=起凡&amp;pageSize=10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">pageNum=1&amp;keyword=spring boot&amp;startTime=Fri Apr 29 2022 21:16:50&amp;category=科技</span><br></pre></td></tr></table></figure><p>我特意把 author 和 pageSize 放在 query 里面，看看 springboot 是否能接受到参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;search&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; search(@ModelAttribute SearchDto searchDto, @RequestParam String category, @RequestParam String author) &#123;</span><br><span class="line">        log.info(searchDto.toString());</span><br><span class="line">        log.info(&quot;category = &quot; + category);</span><br><span class="line">        log.info(&quot;author = &quot; + author);</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SearchDto(pageNum=1, pageSize=10, keyword=spring boot, startTime=Fri Apr 29 21:16:50 CST 2022)</span><br><span class="line">category = 科技</span><br><span class="line">author = 起凡</span><br></pre></td></tr></table></figure><p>结果分析：</p><ol><li>pageSize 和 pageNum 分别在 query 和 form 里面，但是依然被 <code>@ModelAttribute</code> 正确绑定到 SearchDto 的 pageSize 和<br>pageNum 属性上。</li><li>category 和 author 分别在 query 和 form 里面， 但是依然被 <code>@RequestParam</code> 正确的获取到。</li></ol><h2 id="2-2-application-json-传参"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-2-application-json-%E4%BC%A0%E5%8F%82">2.2 application/json 传参</a></h2><h3 id="2-2-1-RequestBody-和-RequestParam"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-2-1-requestbody-%E5%92%8C-requestparam">2.2.1 @RequestBody 和 @RequestParam</a></h3><p>还是上面的文章搜索功能，但是这次前端会把搜索条件用 json 格式发送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">###</span><br><span class="line">POST http://localhost:7720/article/search?category=科技</span><br><span class="line">Content-Type: application/json</span><br><span class="line">jctoken: bef84c6b-e160-4590-82a9-191f0c8a17fa</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;pageNum&quot;: 1,</span><br><span class="line">  &quot;pageSize&quot;: 10,</span><br><span class="line">  &quot;startTime&quot;: &quot;2022-04-29T22:52:00&quot;,</span><br><span class="line">  &quot;keyword&quot;: &quot;spring boot&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;search&quot;)</span><br><span class="line">    // 通过@RequestParam获取query中的额外参数</span><br><span class="line">    public R&lt;Boolean&gt; search(@RequestBody SearchDto searchDto, @RequestParam String category) &#123;</span><br><span class="line">        log.info(searchDto.toString());</span><br><span class="line">        log.info(&quot;category = &quot; + category);</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为文章搜索多出了 category 这个参数，后端的 SearchDto 中没有这个属性，如果放在 json 里面 <code>@RequestBody</code> 就无法接收这个参数。所以把<br>category 放在 query 中然后通过 <code>@RequestParam</code> 接收。<br><code>@RequestBody</code> 还可以接收嵌套的 json对象，只需要后端创建相应的类就可以了</p><h2 id="2-3-multipart-form-data"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-3-multipart-form-data">2.3 multipart/form-data</a></h2><p>这种格式的 body 有许多 part，每个 part 通过一个分隔符分割。<br>body 格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## boundary 参数告诉请求接受者，要使用 &quot;aBoundaryString&quot; 对 body 进行分割。</span><br><span class="line">Content-Type: multipart/form-data; boundary=aBoundaryString</span><br><span class="line"></span><br><span class="line">## 发送请求时，使用 &quot;aBoundaryString&quot; 进行分割，</span><br><span class="line">## 这个分隔符一定要和上面规定的一样</span><br><span class="line">--aBoundaryString</span><br><span class="line">## name是每一部分的名称，后端可以通过@RequestParam(&quot;myFile&quot;) 获取到这个部分</span><br><span class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;img.jpg&quot;</span><br><span class="line">## 二进制数据的格式是什么</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">(二进制数据)</span><br><span class="line">--aBoundaryString</span><br><span class="line">## name是每一部分的名称，后端可以通过@RequestParam(&quot;text&quot;) 获取到这个部分</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">(二进制文本数据，可以是json，xml，文本)</span><br><span class="line">--aBoundaryString</span><br><span class="line">(more subparts)</span><br><span class="line">## 结尾分割符 需要在末尾加上 &quot;--&quot;</span><br><span class="line">--aBoundaryString--</span><br></pre></td></tr></table></figure><h3 id="2-3-1-RequestParam-单个接受文件"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-3-1-requestparam-%E5%8D%95%E4%B8%AA%E6%8E%A5%E5%8F%97%E6%96%87%E4%BB%B6">2.3.1 @RequestParam 单个接受文件</a></h3><p>现在前端想要上传一张图片，图片的名称为 123.png，接受参数为 file。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:7720/test/upload1</span><br><span class="line">Content-Type: multipart/form-data; boundary=起凡分隔符</span><br><span class="line"></span><br><span class="line">--起凡分隔符</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;123.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">(文件数据)</span><br><span class="line">--起凡分隔符--</span><br></pre></td></tr></table></figure><p>后端接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;upload1&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; upload(@RequestParam(&quot;file&quot;) MultipartFile multipartFile) &#123;</span><br><span class="line">        log.info(multipartFile.getOriginalFilename());</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-RequestParam-接受多个文件"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-3-2-requestparam-%E6%8E%A5%E5%8F%97%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6">2.3.2 @RequestParam 接受多个文件</a></h3><p>前端现在想批量上传文件，后端应该如何接受呢？<br>因为文件的数量是不固定的，并且 name<br>参数也是未知的，后端不能像上面那样以这种方式接收 <code> @RequestParam(&quot;file1&quot;)</code>，<code>@RequestParam(&quot;file2&quot;)</code> …</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:7720/test/upload2</span><br><span class="line">Content-Type: multipart/form-data; boundary=起凡分隔符</span><br><span class="line"></span><br><span class="line">--起凡分隔符</span><br><span class="line">## name 随机取值</span><br><span class="line">Content-Disposition: form-data; name=&quot;asdasdas&quot;; filename=&quot;123.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">(二进制数据)</span><br><span class="line">--起凡分隔符</span><br><span class="line">## name 随机取值</span><br><span class="line">Content-Disposition: form-data; name=&quot;asdasdasssdasdsada&quot;; filename=&quot;mytext.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">(二进制数据)</span><br><span class="line">--起凡分隔符--</span><br></pre></td></tr></table></figure><p>后端接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;upload2&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; upload2(@RequestParam Map&lt;String, MultipartFile&gt; multipartFileMap) &#123;</span><br><span class="line">        multipartFileMap.forEach((name, file) -&gt; &#123;</span><br><span class="line">            log.info(&quot;name = &quot; + name);</span><br><span class="line">            log.info(&quot;filename = &quot; + file.getOriginalFilename());</span><br><span class="line">        &#125;);</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = asdasdas</span><br><span class="line">filename = 123.png</span><br><span class="line">-----------------------</span><br><span class="line">name = asdasdasssdasdsada</span><br><span class="line">filename = mytext.txt</span><br><span class="line">-----------------------</span><br></pre></td></tr></table></figure><p>分析结果：<br>后端通一个 map 把前端传过来的参数封装起来，map 的 key 是 name，map 的 value 是文件内容</p><h3 id="2-3-3-RequestPart-接收-json-和文件"><a href="https://www.jarcheng.top/blog/knowledge/spring/http#_2-3-3-requestpart-%E6%8E%A5%E6%94%B6-json-%E5%92%8C%E6%96%87%E4%BB%B6">2.3.3 @RequestPart 接收 json 和文件</a></h3><p>假设前端想要发送一张图片，并且要附上这张图片的描述信息，那后端应该如何接收？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:7720/test/upload3</span><br><span class="line">Content-Type: multipart/form-data; boundary=起凡分隔符</span><br><span class="line"></span><br><span class="line">--起凡分隔符</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;123.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">(二进制数据)</span><br><span class="line">--起凡分隔符</span><br><span class="line">Content-Disposition: form-data; name=&quot;meta-data&quot;;</span><br><span class="line">Content-Type: application/json;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;createTime&quot;: &quot;2022-04-29T10:52:00&quot;,</span><br><span class="line">  &quot;location&quot; : &quot;福建省 泉州市 华侨大学&quot;</span><br><span class="line">&#125;</span><br><span class="line">--起凡分隔符--</span><br></pre></td></tr></table></figure><p>后端接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class FileMetaData &#123;</span><br><span class="line">    Date createTime;</span><br><span class="line">    String location;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;upload3&quot;)</span><br><span class="line">    public R&lt;Boolean&gt; upload3(@RequestPart(&quot;file&quot;) MultipartFile multipartFile, @RequestPart(&quot;meta-data&quot;) FileMetaData fileMetaData) &#123;</span><br><span class="line">        log.info(&quot;filename = &quot; + multipartFile.getOriginalFilename());</span><br><span class="line">        log.info(fileMetaData.toString());</span><br><span class="line">        return R.ok(true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = 123.png</span><br><span class="line">FileMetaData(createTime=Fri Apr 29 18:52:00 CST 2022, location=福建省 泉州市 华侨大学)</span><br></pre></td></tr></table></figure><p>结果分析：</p><ol><li>meta-data 对应的 part 是 json 格式，<code>@RequestPart</code> 自动把它变成 FileMetaData。</li><li>file 对应的 part 是文件，<code>@RequestPart</code> 自动把它变成 MultipartFile</li></ol><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用Idea的HttpClient向SpringBoot发起各种请求参数。后端使用&lt;code&gt;@RequestParam&lt;/code&gt;，&lt;code&gt;@ModelAttribute&lt;/code&gt;，&lt;code&gt;@PathVariable&lt;/code&gt;，&lt;code&gt;@Reques</summary>
      
    
    
    
    <category term="web" scheme="http://www.bojiboqi.fun/categories/web/"/>
    
    
    <category term="零散知识点" scheme="http://www.bojiboqi.fun/tags/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Jenkins/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Jenkins/</id>
    <published>2024-04-09T02:35:11.510Z</published>
    <updated>2024-04-09T04:01:55.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作必用的Jenkins"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E5%B7%A5%E4%BD%9C%E5%BF%85%E7%94%A8%E7%9A%84jenkins">工作必用的Jenkins</a></h2><p>Jenkins是一个可扩展的自动化服务器，Jenkins 可以作为一个简单的 CI 服务器使用，或者成为任何项目的持续交付中心。</p><h2 id="CI-CD"><a href="https://www.jarcheng.top/blog/tools/jenkins/#ci-cd">CI/CD</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/28066124/1711200964289-e3f4c130-1b4e-4d35-bf04-dafaab23c1b4.jpeg#averageHue=%23e2dcd9&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u99283e89&amp;originHeight=1852&amp;originWidth=1840&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=492444&amp;status=done&amp;style=none&amp;taskId=u8b03434e-453d-4dbd-95c5-cb3ffc9248c&amp;title=" alt="image.jpg"><br>图0 CI/CD概念图<br>通过上面这张图可以分三部分来理解CI/CD</p><ul><li><strong>第一部分</strong></li></ul><p>先看看软件开发生命周期（SDLC）和CI/CD是如何结合的。软件开发一般包含几个重要的阶段：开发（Develop），测试（Test），部署（Deploy），维护（Maintain）。CI/CD可以将上述的流程流程串联一起来形成一个自动化的闭环，使得每次发布都更快更可靠。</p><ul><li><strong>第二部分</strong></li></ul><p>Continuous Integration(CI) 持续集成会不断的监听仓库并且执行构建测试确保最后合并到发布分支是没问题的。这样可以提早的发现问题，而不是累计了多次提交等合并到发布分支的时候才发现问题，这样回滚的时候会比较麻烦。<br>Continuous Delivery(CD) 持续交付主要是在部署方面的自动化，它也会运行一些测试，每次发布分支有更新CD就会把CI构建好的代码部署到生产上。</p><ul><li><strong>第三部分</strong></li></ul><p>总结一下整体的流程可以有如下步骤</p><ul><li>开发者提交代码到参考</li><li>CI 服务器检测到代码更新触发构建</li><li>构建好代码并且测试</li><li>生成测试结果报告</li><li>部署打包的代码到模拟环境</li><li>后续可能会有模拟环境的测试</li><li>最后发布到生成环境</li></ul><p>那CI/CD是如何工作的呢？它其实不神秘，你把它看成一个软件（Jenkins），它可以运行在你的电脑上也可以单独运行在服务器上。它首先会监听你的代码仓库，每次有代码提交到仓库上它就会开始运转第一部分的流程图，先是把代码拉取下来在本地编译（Jenkins所在的机器）和测试(<br>测试环境)。然后用前端的自动化测试模拟用户点击（e2e<br>test），这步通过后就可以部署到模拟环境（Staging）或者生成环境（Production）。如果出现了问题就会通知开发者，开发者根据报错日志修改bug并且提交代码，接着又重复上述的流程。</p><h2 id="Jenkins安装"><a href="https://www.jarcheng.top/blog/tools/jenkins/#jenkins%E5%AE%89%E8%A3%85">Jenkins安装</a></h2><p>本教程以windows为例安装jenkins，其他系统请参照官方文档。</p><ul><li>第一步<br>在<a href="https://www.jenkins.io/doc/book/installing/windows/">官网open in new window</a><br>下载<a href="https://www.jenkins.io/download/#downloading-jenkins">安装包open in new window</a></li></ul><p>打开安装包链接出现图1网页，再点击Windows即可下载。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200955181-f8ab0a64-830a-4e0a-80ec-1b7537f0dfee.png#averageHue=%23cda87a&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u004815f8&amp;originHeight=1359&amp;originWidth=2140&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=236704&amp;status=done&amp;style=none&amp;taskId=u64bc6cd7-5448-4102-bca7-642d1dc1b7e&amp;title=" alt="image.jpg"><br>图1 下载Jenkins Windows安装包</p><ul><li>第二步</li></ul><p>按照提示走到这边。在这边输入你windows的用户名和密码。然后点击验证凭证。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200940974-f281e743-a830-4e48-b782-ffd6dcc61657.png#averageHue=%23eeedec&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ue1b90c28&amp;originHeight=481&amp;originWidth=616&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27099&amp;status=done&amp;style=none&amp;taskId=u2a66fe1b-10fe-475f-8aea-7f8a17c0269&amp;title=" alt="image.jpg"><br>图2 以本地用户运行<br>如果出错请按照以下步骤添加权限</p><ol><li>打开开始，输入<code>本地安全策略</code></li><li>展开<code>本地策略</code>并点击右侧的<code>用户权限分配</code></li><li>在右侧面板中找到<code>作为服务登录</code>，右键-&gt;属性</li><li>点击<code>添加用户或组</code></li><li>在输入框内输入你的Windows用户名，然后点击<code>检查名称</code>再点击确定。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200964723-edfa0492-ff36-4335-b814-76381b6f45b6.png#averageHue=%23cad4b8&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u7f5f5f37&amp;originHeight=1376&amp;originWidth=2156&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=488294&amp;status=done&amp;style=none&amp;taskId=ua01b06a7-7e35-4a8e-81f1-c5871c90594&amp;title=" alt="image.jpg"><br>图3 为用户添加作为服务登录权限</p><ul><li>第三步</li></ul><p>在选择好端口和jdk路径后就安装结束了。安装成功后在任务管理器的服务中可以看见Jenkins服务<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200961367-0af0f32e-40d7-42aa-abf0-7b5c7b18a72e.png#averageHue=%23f2f4ef&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u6f9851b2&amp;originHeight=708&amp;originWidth=906&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=403944&amp;status=done&amp;style=none&amp;taskId=ufb4bf9ef-4e2d-443f-86b9-dc9391c9b22&amp;title=" alt="image.jpg"><br>图4 安装成功查看Jenkins服务</p><ul><li>第四步</li></ul><p>在浏览器中打开<code>http://localhost:8080</code>，如果你是安装时选择的端口号不是8080那替换成你选择的端口。打开后出现图5页面，根据红色的提示路径获取初始密码（图6）<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200955940-9dcb7c91-d8e0-404d-9ab2-2ca476087851.png#averageHue=%23fbfbfa&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ua15a7260&amp;originHeight=719&amp;originWidth=1040&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=200633&amp;status=done&amp;style=none&amp;taskId=u3764b1a4-4dac-4fb3-a251-dd62002017f&amp;title=" alt="image.jpg"><br>图5 输入初始密码<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200958737-8f958827-2794-4294-bf2e-deac3208e83c.png#averageHue=%23f0eee9&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u1f4d8ef4&amp;originHeight=136&amp;originWidth=793&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59405&amp;status=done&amp;style=none&amp;taskId=uedab8f86-70bc-426f-b183-e03d8c3cf77&amp;title=" alt="image.jpg"><br>图6 初始密码</p><ul><li>第五步</li></ul><p>安装推荐的插件，并且创建一个用户。</p><h2 id="博客CI-CD案例"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E5%8D%9A%E5%AE%A2ci-cd%E6%A1%88%E4%BE%8B">博客CI/CD案例</a></h2><p>以前我每次写完博客需要自己编译打包部署。有时候部署完后发现格式或者内容出了一些问题又要重新打包部署，每次重复的干这些事显然是很枯燥无味的。使用Jenkins编写pipeline就可以帮助我完成这些重复的工作。</p><h3 id="安装插件"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">安装插件</a></h3><p>除了安装推荐的插件之外还需要安装下面两个插件</p><ul><li><code>Publish Over SSH</code> 用于发送构建好的文件到服务器</li><li><code>NodeJS Plugin</code> 管理不同版本的Node.js</li></ul><h3 id="配置"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E9%85%8D%E7%BD%AE">配置</a></h3><ul><li><strong>配置服务器信息</strong></li></ul><p><code>Dashboard-&gt; Manage Jenkins-&gt; System -&gt; Publish over SSH -&gt; 新增SSH Server</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200961975-92ff62f4-6137-4057-93e5-ebc06fe1a673.png#averageHue=%23fefefe&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u659fe612&amp;originHeight=1738&amp;originWidth=3128&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69051&amp;status=done&amp;style=none&amp;taskId=u41d6a2b1-5996-42a7-9a0b-52e7fc84b63&amp;title=" alt="image.jpg"><br>图7 配置服务信息</p><ul><li><strong>配置Node.js</strong></li></ul><p><code>Dashboard-&gt; Manage Jenkins-&gt; Tools -&gt; NodeJS -&gt; 新增NodeJS</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200961594-2cfcf239-5c6a-4a9a-89c3-bee59628b2a2.png#averageHue=%23fefefe&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=udef54ced&amp;originHeight=854&amp;originWidth=3132&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37257&amp;status=done&amp;style=none&amp;taskId=u453c0bc5-3f6a-474f-8dad-7409973e4e4&amp;title=" alt="image.jpg"><br>图8 nodejs配置</p><h3 id="新建Pipeline项目"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E6%96%B0%E5%BB%BApipeline%E9%A1%B9%E7%9B%AE">新建Pipeline项目</a></h3><p><code>Dashboard -&gt; 新建Item -&gt; Pipeline</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200966478-8f86ac69-e010-4217-b80e-a7bee036dec8.png#averageHue=%23f0f2eb&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u63888522&amp;originHeight=1514&amp;originWidth=2637&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=154138&amp;status=done&amp;style=none&amp;taskId=u71f8df5c-7e2f-4a9b-81d5-84057ec6893&amp;title=" alt="image.jpg"><br>图9 新建pipeline项目</p><h3 id="编写Pipeline"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E7%BC%96%E5%86%99pipeline">编写Pipeline</a></h3><p><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; 配置</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    // 选择node 16</span><br><span class="line">    tools &#123;</span><br><span class="line">      nodejs &#x27;node 16&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">   // 将整个构建部署分成三个阶段，整个分成几个阶段没有一个标准，全部合成一个阶段也可以。</span><br><span class="line">   // 分成多个阶段的好处的优点有 1. 逻辑清晰 2. 对于大项目如果其中某个阶段失败了，下次可以从失败的地方再运行。已经成功的阶段就不需要运行了。可以节省时间。3. 方便统计每个阶段的运行时间，好定位问题。</span><br><span class="line">    stages &#123;</span><br><span class="line">        // 从git参考获取代码</span><br><span class="line">        stage(&#x27;Git Checkout&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">              // 从github获取代码，这边使用的是你本机的git。相当于你自己执行了git clone https://github.com/qifan777/qifan-blog-vuepress2.git</span><br><span class="line">              // git checkout master</span><br><span class="line">              git branch: &#x27;master&#x27;, url: &#x27;https://github.com/qifan777/qifan-blog-vuepress2.git&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 获取代码后在node16上构建博客代码</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                bat &quot;node -v&quot;</span><br><span class="line">                bat &quot;npm install&quot;</span><br><span class="line">                bat &quot;npm run docs:build&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 将构建好的博客上传到服务器上</span><br><span class="line">        stage(&#x27;SSH Punlisher&#x27;) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;centos7&#x27;,</span><br><span class="line">                 transfers: [sshTransfer( execCommand: &#x27;nginx -s reopen&#x27;,</span><br><span class="line">                 remoteDirectory: &#x27;/www/server/nginx/html/blog&#x27;,</span><br><span class="line">                 removePrefix: &#x27;docs/.vuepress/dist&#x27;,</span><br><span class="line">                  sourceFiles: &#x27;docs/.vuepress/dist/**&#x27;)])])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击保存</p><h3 id="构建Pipeline"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E6%9E%84%E5%BB%BApipeline">构建Pipeline</a></h3><p><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; Build Now</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200966871-ae540fd7-cbfa-401a-80af-2806383c9c18.png#averageHue=%23edecec&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ue5eb761f&amp;originHeight=1472&amp;originWidth=2444&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=191201&amp;status=done&amp;style=none&amp;taskId=ue7860b34-718a-4f8b-ad95-c8817cf8fab&amp;title=" alt="image.jpg"><br>图10 查看构建详情</p><h2 id="Pipeline介绍"><a href="https://www.jarcheng.top/blog/tools/jenkins/#pipeline%E4%BB%8B%E7%BB%8D">Pipeline介绍</a></h2><h3 id="概念介绍"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D">概念介绍</a></h3><p>pipeline流水线以<code>pipeline &#123;&#125;</code>开始，<code>pipeline&#123;&#125;</code>下可以包含<code>Sections</code>,<code>Steps</code>,<code>Directives</code>, 赋值语句。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200964589-1cfa7a39-025c-42b5-8076-4832f60a21bb.png#averageHue=%23f9f6f6&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=u8f6205ac&amp;originHeight=1002&amp;originWidth=475&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48602&amp;status=done&amp;style=none&amp;taskId=u5c2d3e2a-0b02-4336-be86-f840065a504&amp;title=" alt="image.jpg"><br>图11 pipeline基本概念<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1711200967801-70fc5714-a8c5-4554-9d1a-5e30414455e9.png#averageHue=%23f7f7f7&amp;clientId=ufce4c12c-3e7f-4&amp;from=paste&amp;id=ue0592dd7&amp;originHeight=499&amp;originWidth=1322&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=119443&amp;status=done&amp;style=none&amp;taskId=u91c36a04-ef0c-409e-a13e-5f5321f7c8e&amp;title=" alt="image.jpg"><br>图12 pipeline结构图<br>通过上面的例子相信大家对pipeline有了初步的了解。<br>我们看图11中pipeline启动的方式可以是监听git仓库，每次git仓库有代码推送就会自动启动pipeline。前面的例子中我们是手动点击<code>Build Now</code><br>启动Pipeline的。<br>在观察图中有多个Stage，对照我们之前写的例子其中有<code>Git Checkout</code>,<code>Build</code>和<code>SSH Punlisher</code><br>三个Stage。Stage的作用就是将整个构建部署流程从逻辑上划分成多个阶段。<br>每个阶段（Stage）中又可以添加<code>Steps</code>，在<code>Steps</code>下可以添加<code>Directives</code>。我们看一下之前例子中的<code>Build</code>阶段，该阶段下有一个<br><code>Steps</code>其中包含了三条<code>Directives</code>。在同一个<code>Steps</code>下的指令是可以共享局部变量，比如你可以在<code>Steps</code>中顶一个变量<code>def count=1</code>，下面的指令都可以使用count变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">steps &#123;</span><br><span class="line">    bat &quot;node -v&quot;</span><br><span class="line">    bat &quot;npm install&quot;</span><br><span class="line">    bat &quot;npm run docs:build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何编写Pipeline"><a href="https://www.jarcheng.top/blog/tools/jenkins/#%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99pipeline">如何编写Pipeline</a></h3><p>一般分如下几个步骤</p><ol><li>确定Pipeline运行的<code>agent（机器/环境）</code></li></ol><p>如果是本机直接填写<code>agent: any</code>，还可以运行在docker，其他服务器，k8s上。可以参考官方文档中的<code>agent</code>参数。</p><ol><li>配置需要工具</li></ol><p>如果你安装了git，maven插件，下面你tools你也可以添加。其他的工具也可以在插件市场中找到，安装完插件配置工具的版本，然后在<code>tools&#123;&#125;</code><br>中选择相应的版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tools &#123;</span><br><span class="line">    nodejs &#x27;node 16&#x27;</span><br><span class="line">    git &#x27;配置的git版本&#x27;</span><br><span class="line">    maven &#x27;配置的maven版本&#x27;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>划分stage</li></ol><p>参考我写的例子</p><ol><li>在每个stage中使用指令(Directives)</li></ol><p>编写指令的时候，如果你不知道如何使用指令可以参考这个指令生成器和片段生成器。<br>指令生成器生成（Declarative Directive<br>Generator）的是官方提供的语法，片段生成器可以生成你下载的插件指令。比如之前写的例子中<code>tools</code>,<code>bat</code><br>就是官方的指令，<code>git</code>,<code>sshPublisher</code>就是我安装的插件提供的指令。<br><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; 流水线语法 -&gt; Declarative Directive Generator</code><br><code>Dashboard -&gt; qifan-blog(你的项目) -&gt; 流水线语法 -&gt; 片段生成器</code></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;工作必用的Jenkins&quot;&gt;&lt;a href=&quot;https://www.jarcheng.top/blog/tools/jenkins/#%E5%B7%A5%E4%BD%9C%E5%BF%85%E7%94%A8%E7%9A%84jenkins&quot;&gt;工作必用的Jenki</summary>
      
    
    
    
    <category term="运维" scheme="http://www.bojiboqi.fun/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="流水线" scheme="http://www.bojiboqi.fun/tags/%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Spring 状态机</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Spring%20%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Spring%20%E7%8A%B6%E6%80%81%E6%9C%BA/</id>
    <published>2024-04-09T02:35:03.023Z</published>
    <updated>2024-04-09T04:01:52.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、什么是状态机">1、什么是状态机</h2><h3 id="1-1-什么是状态">1.1 什么是状态</h3><p>先来解释什么是“状态”（ State ）。现实事物是有不同状态的，例如一个自动门，就有 open 和 closed 两种状态。通常所说的状态机是有限状态机，也就是被描述的事物的状态的数量是有限个，例如自动门的状态就是两个 open 和 closed 。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/396745/1695563279935-e6eef721-0865-4031-809b-136ebae661c3.jpeg#averageHue=%23f9f6e7&amp;from=url&amp;id=x32Uy&amp;originHeight=467&amp;originWidth=965&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><br>状态机，也就是 State Machine ，不是指一台实际机器，而是指一个数学模型。说白了，一般就是指一张状态转换图。例如，根据自动门的运行规则，可以抽象出下面这么一个图。<br>自动门有两个状态，open 和 closed ，closed 状态下，如果读取开门信号，那么状态就会切换为 open 。open 状态下如果读取关门信号，状态就会切换为 closed 。<br>状态机的全称是有限状态自动机，自动两个字也是包含重要含义的。给定一个状态机，同时给定它的当前状态以及输入，那么输出状态时可以明确的运算出来的。例如对于自动门，给定初始状态 closed ，给定输入“开门”，那么下一个状态时可以运算出来的。<br>这样状态机的基本定义就介绍完毕了。重复一下：状态机是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型。</p><h3 id="1-2-四大概念">1.2 四大概念</h3><p>下面来给出状态机的四大概念。</p><ul><li>第一个是 State ，状态。一个状态机至少要包含两个状态。例如上面自动门的例子，有 open 和 closed 两个状态。</li><li>第二个是 Event ，事件。事件就是执行某个操作的触发条件或者口令。对于自动门，“按下开门按钮”就是一个事件。</li><li>第三个是 Action ，动作。事件发生以后要执行动作。例如事件是“按开门按钮”，动作是“开门”。编程的时候，一个 Action一般就对应一个函数。</li><li>第四个是 Transition ，变换。也就是从一个状态变化为另一个状态。例如“开门过程”就是一个变换。</li></ul><h3 id="1-3-状态机">1.3 状态机</h3><p>有限状态机（Finite-state machine,FSM），又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。<br>FSM是一种算法思想，简单而言，有限状态机由一组状态、一个初始状态、输入和根据输入及现有状态转换为下一个状态的转换函数组成。<br>其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件。</p><h2 id="2、状态机图">2、状态机图</h2><p>做需求时，需要了解以下六种元素：起始、终止、现态、次态（目标状态）、动作、条件，就可以完成一个状态机图了：<br>以订单为例：以从待支付状态转换为待发货状态为例<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/396745/1695563478132-6597970d-0000-4e7b-af43-9f924ac421a8.jpeg#averageHue=%23f6f6f6&amp;from=url&amp;id=ZsDdh&amp;originHeight=487&amp;originWidth=1697&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ul><li>①现态：是指当前所处的状态。待支付</li><li>②条件：又称为“事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。支付事件</li><li>③动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。状态转换为待发货</li><li>④次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。待发货 注意事项</li></ul><p>1、避免把某个“程序动作”当作是一种“状态”来处理。那么如何区分“动作”和“状态”？“动作”是不稳定的，即使没有条件的触发，“动作”一旦执行完毕就结束了；而“状态”是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。<br>2、状态划分时漏掉一些状态，导致跳转逻辑不完整。所以在设计状态机时，需要反复的查看设计的状态图或者状态表，最终达到一种牢不可破的设计方案。</p><h2 id="3、spring-statemachine">3、spring statemachine</h2><h3 id="3-1-状态机spring-statemachine-概述">3.1 状态机spring statemachine 概述</h3><p>Spring Statemachine是应用程序开发人员在Spring应用程序中使用状态机概念的框架<br>Spring Statemachine旨在提供以下功能：</p><ol><li>易于使用的扁平单级状态机，用于简单的使用案例。</li><li>分层状态机结构，以简化复杂的状态配置。</li><li>状态机区域提供更复杂的状态配置。</li><li>使用触发器，转换，警卫和操作。</li><li>键入安全配置适配器。</li><li>生成器模式，用于在Spring Application上下文之外使用的简单实例化通常用例的食谱</li><li>基于Zookeeper的分布式状态机</li><li>状态机事件监听器。</li><li>UML Eclipse Papyrus建模。</li><li>将计算机配置存储在永久存储中。</li><li>Spring IOC集成将bean与状态机关联起来。</li></ol><p>状态机功能强大，因为行为始终保证一致，使调试相对容易。这是因为操作规则是在机器启动时写成的。这个想法是应用程序可能存在于有限数量的状态中，某些预定义的触发器可以将应用程序从一个状态转移到另一个状态。此类触发器可以基于事件或计时器。<br>在应用程序之外定义高级逻辑然后依靠状态机来管理状态要容易得多。可以通过发送事件，侦听更改或仅请求当前状态来与状态机进行交互。</p><h3 id="3-2-快速开始">3.2 快速开始</h3><p>以订单状态扭转的例子为例：<br>表结构设计如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order` (  </span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,  </span><br><span class="line">  `order_code` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单编码&#x27;</span>,  </span><br><span class="line">  `status` <span class="type">smallint</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,  </span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单名称&#x27;</span>,  </span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">12</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,  </span><br><span class="line">  `delete_flag` tinyint(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标记，0未删除  1已删除&#x27;</span>,  </span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,  </span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0000-00-00 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,  </span><br><span class="line">  `create_user_code` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,  </span><br><span class="line">  `update_user_code` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,  </span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,  </span><br><span class="line">  `remark` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,  </span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)  </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_bin COMMENT<span class="operator">=</span><span class="string">&#x27;订单表&#x27;</span>;  </span><br><span class="line">      </span><br><span class="line"><span class="comment">/*Data for the table `tb_order` */</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `tb_order`(`id`,`order_code`,`status`,`name`,`price`,`delete_flag`,`create_time`,`update_time`,`create_user_code`,`update_user_code`,`version`,`remark`) <span class="keyword">values</span>   </span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;A111&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;22.00&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2022-10-15 16:14:11&#x27;</span>,<span class="string">&#x27;2022-10-02 21:29:14&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">0</span>,<span class="keyword">NULL</span>),  </span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;A111&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;订单A&#x27;</span>,<span class="string">&#x27;22.00&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2022-10-02 21:53:13&#x27;</span>,<span class="string">&#x27;2022-10-02 21:29:14&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">0</span>,<span class="keyword">NULL</span>),  </span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;A111&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;订单A&#x27;</span>,<span class="string">&#x27;22.00&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2022-10-02 21:53:13&#x27;</span>,<span class="string">&#x27;2022-10-02 21:29:14&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">0</span>,<span class="keyword">NULL</span>),  </span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;A111&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;订单A&#x27;</span>,<span class="string">&#x27;22.00&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2022-10-03 09:08:30&#x27;</span>,<span class="string">&#x27;2022-10-02 21:29:14&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">0</span>,<span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><h5 id="1）引入依赖">1）引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis持久化状态机 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.statemachine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-statemachine-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--状态机--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.statemachine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-statemachine-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2）定义状态机状态和事件">2）定义状态机状态和事件</h5><p>状态枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;  </span><br><span class="line">    <span class="comment">// 待支付，待发货，待收货，已完成  </span></span><br><span class="line">    WAIT_PAYMENT(<span class="number">1</span>, <span class="string">&quot;待支付&quot;</span>),  </span><br><span class="line">    WAIT_DELIVER(<span class="number">2</span>, <span class="string">&quot;待发货&quot;</span>),  </span><br><span class="line">    WAIT_RECEIVE(<span class="number">3</span>, <span class="string">&quot;待收货&quot;</span>),  </span><br><span class="line">    FINISH(<span class="number">4</span>, <span class="string">&quot;已完成&quot;</span>);  </span><br><span class="line">    <span class="keyword">private</span> Integer key;  </span><br><span class="line">    <span class="keyword">private</span> String desc;  </span><br><span class="line">    OrderStatus(Integer key, String desc) &#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key;  </span><br><span class="line">        <span class="built_in">this</span>.desc = desc;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getKey</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> key;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> desc;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderStatus <span class="title function_">getByKey</span><span class="params">(Integer key)</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (OrderStatus e : values()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (e.getKey().equals(key)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> e;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;enum not exists.&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatusChangeEvent</span> &#123;  </span><br><span class="line">    <span class="comment">// 支付，发货，确认收货  </span></span><br><span class="line">    PAYED, DELIVERY, RECEIVED;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）定义状态机规则和配置状态机">3）定义状态机规则和配置状态机</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableStateMachine(name = &quot;orderStateMachine&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateMachineConfig</span> <span class="keyword">extends</span> <span class="title class_">StateMachineConfigurerAdapter</span>&lt;OrderStatus, OrderStatusChangeEvent&gt; &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 配置状态  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> states  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(StateMachineStateConfigurer&lt;OrderStatus, OrderStatusChangeEvent&gt; states)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        states  </span><br><span class="line">                .withStates()  </span><br><span class="line">                .initial(OrderStatus.WAIT_PAYMENT)  </span><br><span class="line">                .states(EnumSet.allOf(OrderStatus.class));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 配置状态转换事件关系  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transitions  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(StateMachineTransitionConfigurer&lt;OrderStatus, OrderStatusChangeEvent&gt; transitions)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        transitions  </span><br><span class="line">                <span class="comment">//支付事件:待支付-》待发货  </span></span><br><span class="line">                .withExternal().source(OrderStatus.WAIT_PAYMENT).target(OrderStatus.WAIT_DELIVER).event(OrderStatusChangeEvent.PAYED)  </span><br><span class="line">                .and()  </span><br><span class="line">                <span class="comment">//发货事件:待发货-》待收货  </span></span><br><span class="line">                .withExternal().source(OrderStatus.WAIT_DELIVER).target(OrderStatus.WAIT_RECEIVE).event(OrderStatusChangeEvent.DELIVERY)  </span><br><span class="line">                .and()  </span><br><span class="line">                <span class="comment">//收货事件:待收货-》已完成  </span></span><br><span class="line">                .withExternal().source(OrderStatus.WAIT_RECEIVE).target(OrderStatus.FINISH).event(OrderStatusChangeEvent.RECEIVED);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persist</span>&lt;E, S&gt; &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 持久化到内存map中  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;stateMachineMemPersister&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StateMachinePersister <span class="title function_">getPersister</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultStateMachinePersister</span>(<span class="keyword">new</span> <span class="title class_">StateMachinePersist</span>() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(StateMachineContext context, Object contextObj)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">                log.info(<span class="string">&quot;持久化状态机,context:&#123;&#125;,contextObj:&#123;&#125;&quot;</span>, JSON.toJSONString(context), JSON.toJSONString(contextObj));  </span><br><span class="line">                map.put(contextObj, context);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="keyword">public</span> StateMachineContext <span class="title function_">read</span><span class="params">(Object contextObj)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">                log.info(<span class="string">&quot;获取状态机,contextObj:&#123;&#125;&quot;</span>, JSON.toJSONString(contextObj));  </span><br><span class="line">                <span class="type">StateMachineContext</span> <span class="variable">stateMachineContext</span> <span class="operator">=</span> (StateMachineContext) map.get(contextObj);  </span><br><span class="line">                log.info(<span class="string">&quot;获取状态机结果,stateMachineContext:&#123;&#125;&quot;</span>, JSON.toJSONString(stateMachineContext));  </span><br><span class="line">                <span class="keyword">return</span> stateMachineContext;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 持久化到redis中，在分布式系统中使用  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;stateMachineRedisPersister&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> RedisStateMachinePersister&lt;E, S&gt; <span class="title function_">getRedisPersister</span><span class="params">()</span> &#123;  </span><br><span class="line">        RedisStateMachineContextRepository&lt;E, S&gt; repository = <span class="keyword">new</span> <span class="title class_">RedisStateMachineContextRepository</span>&lt;&gt;(redisConnectionFactory);  </span><br><span class="line">        <span class="type">RepositoryStateMachinePersist</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepositoryStateMachinePersist</span>&lt;&gt;(repository);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisStateMachinePersister</span>&lt;&gt;(p);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4）业务系统">4）业务系统</h5><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 根据id查询订单  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getById&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;  </span><br><span class="line">        <span class="comment">//根据id查询订单  </span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getById(id);  </span><br><span class="line">        <span class="keyword">return</span> order;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 创建订单  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/create&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Order order)</span> &#123;  </span><br><span class="line">        <span class="comment">//创建订单  </span></span><br><span class="line">        orderService.create(order);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sucess&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 对订单进行支付  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pay&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pay</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;  </span><br><span class="line">        <span class="comment">//对订单进行支付  </span></span><br><span class="line">        orderService.pay(id);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 对订单进行发货  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deliver&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deliver</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;  </span><br><span class="line">        <span class="comment">//对订单进行确认收货  </span></span><br><span class="line">        orderService.deliver(id);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 对订单进行确认收货  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/receive&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">receive</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;  </span><br><span class="line">        <span class="comment">//对订单进行确认收货  </span></span><br><span class="line">        orderService.receive(id);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servie：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;orderService&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Order&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StateMachinePersister&lt;OrderStatus, OrderStatusChangeEvent, String&gt; stateMachineMemPersister;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">create</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        order.setStatus(OrderStatus.WAIT_PAYMENT.getKey());</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对订单进行支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">pay</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectById(id);</span><br><span class="line">        log.info(<span class="string">&quot;线程名称：&#123;&#125;,尝试支付，订单号：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), id);</span><br><span class="line">        <span class="keyword">if</span> (!sendEvent(OrderStatusChangeEvent.PAYED, order)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;线程名称：&#123;&#125;,支付失败, 状态异常，订单信息：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), order);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;支付失败, 订单状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对订单进行发货</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">deliver</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectById(id);</span><br><span class="line">        log.info(<span class="string">&quot;线程名称：&#123;&#125;,尝试发货，订单号：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), id);</span><br><span class="line">        <span class="keyword">if</span> (!sendEvent(OrderStatusChangeEvent.DELIVERY, order)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;线程名称：&#123;&#125;,发货失败, 状态异常，订单信息：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), order);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发货失败, 订单状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对订单进行确认收货</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">receive</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectById(id);</span><br><span class="line">        log.info(<span class="string">&quot;线程名称：&#123;&#125;,尝试收货，订单号：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), id);</span><br><span class="line">        <span class="keyword">if</span> (!sendEvent(OrderStatusChangeEvent.RECEIVED, order)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;线程名称：&#123;&#125;,收货失败, 状态异常，订单信息：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), order);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;收货失败, 订单状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送订单状态转换事件</span></span><br><span class="line"><span class="comment">     * synchronized修饰保证这个方法是线程安全的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> changeEvent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动状态机  </span></span><br><span class="line">            orderStateMachine.start();</span><br><span class="line">            <span class="comment">// 尝试恢复状态机状态  </span></span><br><span class="line">            stateMachineMemPersister.restore(orderStateMachine, String.valueOf(order.getId()));</span><br><span class="line">            <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();</span><br><span class="line">            result = orderStateMachine.sendEvent(message);</span><br><span class="line">            <span class="comment">// 持久化状态机状态  </span></span><br><span class="line">            stateMachineMemPersister.persist(orderStateMachine, String.valueOf(order.getId()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            orderStateMachine.stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听状态的变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;orderStateListener&quot;)</span>  </span><br><span class="line"><span class="meta">@WithStateMachine(name = &quot;orderStateMachine&quot;)</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateListenerImpl</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_PAYMENT&quot;, target = &quot;WAIT_DELIVER&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;支付，状态机反馈信息：&#123;&#125;&quot;</span>,  message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_DELIVER.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_DELIVER&quot;, target = &quot;WAIT_RECEIVE&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliverTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;发货，状态机反馈信息：&#123;&#125;&quot;</span>,  message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_RECEIVE.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_RECEIVE&quot;, target = &quot;FINISH&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;确认收货，状态机反馈信息：&#123;&#125;&quot;</span>,  message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.FINISH.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-测试验证">3.3 测试验证</h3><h5 id="1）验证业务">1）验证业务</h5><ul><li>新增一个订单<a href="http://localhost:8084/order/create">http://localhost:8084/order/create</a></li><li>对订单进行支付<a href="http://localhost:8084/order/pay?id=2">http://localhost:8084/order/pay?id=2</a></li><li>对订单进行发货<a href="http://localhost:8084/order/deliver?id=2">http://localhost:8084/order/deliver?id=2</a></li><li>对订单进行确认收货<a href="http://localhost:8084/order/receive?id=2">http://localhost:8084/order/receive?id=2</a></li></ul><p>正常流程结束。如果对一个订单进行支付了，再次进行支付，则会报错：<a href="http://localhost:8084/order/pay?id=2">http://localhost:8084/order/pay?id=2</a></p><h5 id="2）验证持久化">2）验证持久化</h5><p>内存<br>使用内存持久化类持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachinePersister&lt;OrderStatus, OrderStatusChangeEvent, String&gt; stateMachineMemPersister;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送订单状态转换事件  </span></span><br><span class="line"><span class="comment"> * synchronized修饰保证这个方法是线程安全的  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> changeEvent  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> order  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//启动状态机  </span></span><br><span class="line">        orderStateMachine.start();  </span><br><span class="line">        <span class="comment">//尝试恢复状态机状态  </span></span><br><span class="line">        stateMachineMemPersister.restore(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();  </span><br><span class="line">        result = orderStateMachine.sendEvent(message);  </span><br><span class="line">        <span class="comment">//持久化状态机状态  </span></span><br><span class="line">        stateMachineMemPersister.persist(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        orderStateMachine.stop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis持久化<br>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis持久化状态机 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.statemachine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-statemachine-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">redis:</span>  </span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>  </span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span>  </span><br><span class="line">    <span class="attr">jedis:</span>  </span><br><span class="line">      <span class="attr">pool:</span>  </span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>  </span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>  </span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>  </span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>使用redis持久化类持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachinePersister&lt;OrderStatus, OrderStatusChangeEvent, String&gt; stateMachineRedisPersister;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送订单状态转换事件  </span></span><br><span class="line"><span class="comment"> * synchronized修饰保证这个方法是线程安全的  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> changeEvent  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> order  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//启动状态机  </span></span><br><span class="line">        orderStateMachine.start();  </span><br><span class="line">        <span class="comment">//尝试恢复状态机状态  </span></span><br><span class="line">        stateMachineRedisPersister.restore(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();  </span><br><span class="line">        result = orderStateMachine.sendEvent(message);  </span><br><span class="line">        <span class="comment">//持久化状态机状态  </span></span><br><span class="line">        stateMachineRedisPersister.persist(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        orderStateMachine.stop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-状态机存在的问题">3.4 状态机存在的问题</h3><h5 id="1）stateMachine无法抛出异常，异常会被状态机给消化掉">1）<code>stateMachine</code>无法抛出异常，异常会被状态机给消化掉</h5><p>问题现象<br>从<code>orderStateMachine.sendEvent(message);</code>获取的结果无法感知到。无论执行正常还是抛出异常，都返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> OrderMapper orderMapper;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@OnTransition(source = &quot;WAIT_PAYMENT&quot;, target = &quot;WAIT_DELIVER&quot;)</span>  </span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">    log.info(<span class="string">&quot;支付，状态机反馈信息：&#123;&#125;&quot;</span>,  message.getHeaders().toString());  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_DELIVER.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">        <span class="comment">//模拟异常  </span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(order.getName(),<span class="string">&quot;A&quot;</span>))&#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;执行业务异常&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        <span class="comment">//如果出现异常，记录异常信息，抛出异常信息进行回滚  </span></span><br><span class="line">        log.error(<span class="string">&quot;payTransition 出现异常：&#123;&#125;&quot;</span>,e);  </span><br><span class="line">        <span class="keyword">throw</span> e;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听事件抛出异常，在发送事件中无法感知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//启动状态机  </span></span><br><span class="line">        orderStateMachine.start();  </span><br><span class="line">        <span class="comment">//尝试恢复状态机状态  </span></span><br><span class="line">        stateMachineMemPersister.restore(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();  </span><br><span class="line">        <span class="comment">//事件执行异常了，依然返回true，无法感知异常  </span></span><br><span class="line">        result = orderStateMachine.sendEvent(message);  </span><br><span class="line">        <span class="keyword">if</span>(result)&#123;  </span><br><span class="line">            <span class="comment">//持久化状态机状态，如果根据true持久化，则会出现问题  </span></span><br><span class="line">            stateMachineMemPersister.persist(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        orderStateMachine.stop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试发现：发送事件和监听事件是一个线程，发送事件的结果是在监听操作执行完之后才返回<br>监听线程：<br>解决方案：自己保存异常到数据库或者内存中，进行判断<br>也可以通过接口：<code>org.springframework.statemachine.StateMachine##getExtendedState</code><br>方法把执行状态放入这个变量中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExtendedState</span> &#123;  </span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">getVariables</span><span class="params">()</span>;  </span><br><span class="line">    &lt;T&gt; T <span class="title function_">get</span><span class="params">(Object var1, Class&lt;T&gt; var2)</span>;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setExtendedStateChangeListener</span><span class="params">(ExtendedState.ExtendedStateChangeListener var1)</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExtendedStateChangeListener</span> &#123;  </span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">changed</span><span class="params">(Object var1, Object var2)</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.statemachine.support.DefaultExtendedState##getVariables</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; variables;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DefaultExtendedState</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="built_in">this</span>.variables = <span class="keyword">new</span> <span class="title class_">ObservableMap</span>(<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(), <span class="keyword">new</span> <span class="title class_">DefaultExtendedState</span>.LocalMapChangeListener());  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">getVariables</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.variables;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造监听状态：把业务的执行结果进行保存，1成功，0失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> OrderMapper orderMapper;  </span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@OnTransition(source = &quot;WAIT_PAYMENT&quot;, target = &quot;WAIT_DELIVER&quot;)</span>  </span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">    log.info(<span class="string">&quot;支付，状态机反馈信息：&#123;&#125;&quot;</span>,  message.getHeaders().toString());  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_DELIVER.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">        <span class="comment">//模拟异常  </span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(order.getName(),<span class="string">&quot;A&quot;</span>))&#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;执行业务异常&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//成功 则为1  </span></span><br><span class="line">        orderStateMachine.getExtendedState().getVariables().put(CommonConstants.payTransition+order.getId(),<span class="number">1</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        <span class="comment">//如果出现异常，则进行回滚  </span></span><br><span class="line">        log.error(<span class="string">&quot;payTransition 出现异常：&#123;&#125;&quot;</span>,e);  </span><br><span class="line">        <span class="comment">//将异常信息变量信息中，失败则为0  </span></span><br><span class="line">        orderStateMachine.getExtendedState().getVariables().put(CommonConstants.payTransition+order.getId(), <span class="number">0</span>);  </span><br><span class="line">        <span class="keyword">throw</span> e;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送事件改造：如果获取到业务执行异常，则返回失败，不进行状态机持久化 <code>com.zengqingfa.springboot.state.demo.service.impl.OrderServiceImpl##sendEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;  </span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachinePersister&lt;OrderStatus, OrderStatusChangeEvent, String&gt; stateMachineMemPersister;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送订单状态转换事件  </span></span><br><span class="line"><span class="comment"> * synchronized修饰保证这个方法是线程安全的  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> changeEvent  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> order  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order)</span>&#123;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//启动状态机  </span></span><br><span class="line">        orderStateMachine.start();  </span><br><span class="line">        <span class="comment">//尝试恢复状态机状态  </span></span><br><span class="line">        stateMachineMemPersister.restore(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();  </span><br><span class="line">        result = orderStateMachine.sendEvent(message);  </span><br><span class="line">        <span class="keyword">if</span>(!result)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//获取到监听的结果信息  </span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer) orderStateMachine.getExtendedState().getVariables().get(CommonConstants.payTransition + order.getId());  </span><br><span class="line">        <span class="comment">//操作完成之后,删除本次对应的key信息  </span></span><br><span class="line">        orderStateMachine.getExtendedState().getVariables().remove(CommonConstants.payTransition+order.getId());  </span><br><span class="line">        <span class="comment">//如果事务执行成功，则持久化状态机  </span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(<span class="number">1</span>,Integer.valueOf(o)))&#123;  </span><br><span class="line">            <span class="comment">//持久化状态机状态  </span></span><br><span class="line">            stateMachineMemPersister.persist(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">//订单执行业务异常  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        orderStateMachine.stop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码优化</p><ul><li>发送事件只针对了支付，如果是非支付事件呢？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到监听的结果信息  </span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer) orderStateMachine.getExtendedState().getVariables().get(CommonConstants.payTransition + order.getId());</span><br></pre></td></tr></table></figure><ul><li>监听设置状态的代码有重复代码，需要进行优化，可使用aop</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    <span class="comment">//成功 则为1  </span></span><br><span class="line">    orderStateMachine.getExtendedState().getVariables().put(CommonConstants.payTransition+order.getId(),<span class="number">1</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">    <span class="comment">//如果出现异常，则进行回滚  </span></span><br><span class="line">    log.error(<span class="string">&quot;payTransition 出现异常：&#123;&#125;&quot;</span>,e);  </span><br><span class="line">    <span class="comment">//将异常信息变量信息中，失败则为0  </span></span><br><span class="line">    orderStateMachine.getExtendedState().getVariables().put(CommonConstants.payTransition+order.getId(), <span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">throw</span> e;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommonConstants</span> &#123;  </span><br><span class="line">    String orderHeader=<span class="string">&quot;order&quot;</span>;  </span><br><span class="line">    String payTransition=<span class="string">&quot;payTransition&quot;</span>;  </span><br><span class="line">    String deliverTransition=<span class="string">&quot;deliverTransition&quot;</span>;  </span><br><span class="line">    String receiveTransition=<span class="string">&quot;receiveTransition&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付发送事件：<code>com.zengqingfa.springboot.state.demo.service.impl.OrderServiceImpl##pay</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;  </span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> StateMachinePersister&lt;OrderStatus, OrderStatusChangeEvent, String&gt; stateMachineMemPersister;  </span><br><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"><span class="keyword">private</span> OrderMapper orderMapper;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 对订单进行支付  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">pay</span><span class="params">(Long id)</span> &#123;  </span><br><span class="line"><span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectById(id);  </span><br><span class="line">log.info(<span class="string">&quot;线程名称：&#123;&#125;,尝试支付，订单号：&#123;&#125;&quot;</span> ,Thread.currentThread().getName() , id);  </span><br><span class="line"><span class="keyword">if</span> (!sendEvent(OrderStatusChangeEvent.PAYED, order,CommonConstants.payTransition)) &#123;  </span><br><span class="line">    log.error(<span class="string">&quot;线程名称：&#123;&#125;,支付失败, 状态异常，订单信息：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), order);  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;支付失败, 订单状态异常&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> order;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送订单状态转换事件  </span></span><br><span class="line"><span class="comment"> * synchronized修饰保证这个方法是线程安全的  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> changeEvent  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> order  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sendEvent</span><span class="params">(OrderStatusChangeEvent changeEvent, Order order,String key)</span>&#123;  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//启动状态机  </span></span><br><span class="line">        orderStateMachine.start();  </span><br><span class="line">        <span class="comment">//尝试恢复状态机状态  </span></span><br><span class="line">        stateMachineMemPersister.restore(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withPayload(changeEvent).setHeader(<span class="string">&quot;order&quot;</span>, order).build();  </span><br><span class="line">        result = orderStateMachine.sendEvent(message);  </span><br><span class="line">        <span class="keyword">if</span>(!result)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//获取到监听的结果信息  </span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer) orderStateMachine.getExtendedState().getVariables().get(key + order.getId());  </span><br><span class="line">        <span class="comment">//操作完成之后,删除本次对应的key信息  </span></span><br><span class="line">        orderStateMachine.getExtendedState().getVariables().remove(key+order.getId());  </span><br><span class="line">        <span class="comment">//如果事务执行成功，则持久化状态机  </span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(<span class="number">1</span>,Integer.valueOf(o)))&#123;  </span><br><span class="line">            <span class="comment">//持久化状态机状态  </span></span><br><span class="line">            stateMachineMemPersister.persist(orderStateMachine, String.valueOf(order.getId()));  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">//订单执行业务异常  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;订单操作失败:&#123;&#125;&quot;</span>, e);  </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">        orderStateMachine.stop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用aop对监听事件切面，把业务执行结果封装到状态机的变量中，注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogResult &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     *执行的业务key  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogResultAspect</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截 LogHistory注解  </span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.zengqingfa.springboot.state.demo.aop.annotation.LogResult)&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logResultPointCut</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">//logResultPointCut 日志注解切点  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> StateMachine&lt;OrderStatus, OrderStatusChangeEvent&gt; orderStateMachine;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;logResultPointCut()&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logResultAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">        <span class="comment">//获取参数  </span></span><br><span class="line">        Object[] args = pjp.getArgs();  </span><br><span class="line">        log.info(<span class="string">&quot;参数args:&#123;&#125;&quot;</span>, args);  </span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (Message) args[<span class="number">0</span>];  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        <span class="comment">//获取方法  </span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) pjp.getSignature()).getMethod();  </span><br><span class="line">        <span class="comment">// 获取LogHistory注解  </span></span><br><span class="line">        <span class="type">LogResult</span> <span class="variable">logResult</span> <span class="operator">=</span> method.getAnnotation(LogResult.class);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> logResult.key();  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//执行方法  </span></span><br><span class="line">            returnVal = pjp.proceed();  </span><br><span class="line">            <span class="comment">//如果业务执行正常，则保存信息  </span></span><br><span class="line">            <span class="comment">//成功 则为1  </span></span><br><span class="line">            orderStateMachine.getExtendedState().getVariables().put(key + order.getId(), <span class="number">1</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;e:&#123;&#125;&quot;</span>, e.getMessage());  </span><br><span class="line">            <span class="comment">//如果业务执行异常，则保存信息  </span></span><br><span class="line">            <span class="comment">//将异常信息变量信息中，失败则为0  </span></span><br><span class="line">            orderStateMachine.getExtendedState().getVariables().put(key + order.getId(), <span class="number">0</span>);  </span><br><span class="line">            <span class="keyword">throw</span> e;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> returnVal;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听类使用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;orderStateListener&quot;)</span>  </span><br><span class="line"><span class="meta">@WithStateMachine(name = &quot;orderStateMachine&quot;)</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateListenerImpl</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_PAYMENT&quot;, target = &quot;WAIT_DELIVER&quot;)</span>  </span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line">    <span class="meta">@LogResult(key = CommonConstants.payTransition)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;支付，状态机反馈信息：&#123;&#125;&quot;</span>, message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_DELIVER.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">        <span class="comment">//模拟异常  </span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(order.getName(), <span class="string">&quot;A&quot;</span>)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;执行业务异常&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_DELIVER&quot;, target = &quot;WAIT_RECEIVE&quot;)</span>  </span><br><span class="line">    <span class="meta">@LogResult(key = CommonConstants.deliverTransition)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliverTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;发货，状态机反馈信息：&#123;&#125;&quot;</span>, message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.WAIT_RECEIVE.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@OnTransition(source = &quot;WAIT_RECEIVE&quot;, target = &quot;FINISH&quot;)</span>  </span><br><span class="line">    <span class="meta">@LogResult(key = CommonConstants.receiveTransition)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTransition</span><span class="params">(Message&lt;OrderStatusChangeEvent&gt; message)</span> &#123;  </span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) message.getHeaders().get(<span class="string">&quot;order&quot;</span>);  </span><br><span class="line">        log.info(<span class="string">&quot;确认收货，状态机反馈信息：&#123;&#125;&quot;</span>, message.getHeaders().toString());  </span><br><span class="line">        <span class="comment">//更新订单  </span></span><br><span class="line">        order.setStatus(OrderStatus.FINISH.getKey());  </span><br><span class="line">        orderMapper.updateById(order);  </span><br><span class="line">        <span class="comment">//TODO 其他业务  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>来自: <a href="https://www.yuque.com/fcant/java/lm9h308fii9grks9">Spring 状态机</a></p></blockquote><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、什么是状态机&quot;&gt;1、什么是状态机&lt;/h2&gt;
&lt;h3 id=&quot;1-1-什么是状态&quot;&gt;1.1 什么是状态&lt;/h3&gt;
&lt;p&gt;先来解释什么是“状态”（ State ）。现实事物是有不同状态的，例如一个自动门，就有 open 和 closed 两种状态。通常所说的状态机</summary>
      
    
    
    
    <category term="springboot2" scheme="http://www.bojiboqi.fun/categories/springboot2/"/>
    
    
    <category term="spring" scheme="http://www.bojiboqi.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 状态机实战</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Spring%20%E7%8A%B6%E6%80%81%E6%9C%BA%E5%AE%9E%E6%88%98/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Spring%20%E7%8A%B6%E6%80%81%E6%9C%BA%E5%AE%9E%E6%88%98/</id>
    <published>2024-04-09T02:34:30.381Z</published>
    <updated>2024-04-09T04:01:32.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在电商领域，很多业务对象都是有状态的，且这些对象的状态又多又复杂。硬编码的方式已经不适合管理当前复杂业务对象的状态。为了适配复杂多变的业务，可以使用状态机来管理状态，统一定义业务对象状态和状态的流转。接下来，本文会重点介绍状态机相关的概念和使用场景。</p><h2 id="定义">定义</h2><p>在介绍状态机之前，先介绍一个工作流（WorkFlow），初学者通常容易将两个概念混淆。工作流（WorkFlow），大体是指业务过程（整体或者部分）在计算机应用环境下的自动化，是对工作流程及其各操作步骤之间业务规则的描述。在计算机系统中，工作流属于计算机支持的协同工作（CSCW）的一部分。<br>状态机是工作流（WorkFlow）的一种类型，包括顺序工作流（Sequential）和状态机工作流（State Machine）。状态机是有限状态自动机的简称，是现实事物运行规则抽象而成的一个数学模型。<br>简单说明一下状态机和流程图这两个概念的区别。状态机用来描述一个特定对象的所有可能状态，以及由于各种事件的发生而引起的状态之间的转移。而流程图则用于表示完成某件事情中的各个活动过程，关键的是每一个步骤。</p><table><thead><tr><th>状态机（WorkFlow）</th><th>工作流（State Machine）</th></tr></thead><tbody><tr><td>关注单个任务</td><td>关注状态流转</td></tr><tr><td>无循环</td><td>可以简单的实现循环</td></tr><tr><td>实现简单</td><td>比较麻烦，需要记录任务当前状态</td></tr><tr><td>串行表达，不是很灵活</td><td>表达更灵活</td></tr><tr><td>运行销量高</td><td>效率低，可并行</td></tr></tbody></table><h2 id="状态机选型">状态机选型</h2><p>流程引擎易滥用，但状态机却实用且使用广泛，主要有以下两个原因：</p><ol><li>实现。最简单、轻量的状态机用一个 Enum 就能实现，基本是零成本。</li><li>使用状态机的 DSL 来表达状态的流转，语义会更加清晰，会增强代码的可读性和可维护性。</li></ol><p>然而，当业务场景比较复杂时，还是会超出 Enum 仅支持线性状态流转的范畴，因此不得不考虑一下开源状态机。<br>着重看了两个状态机引擎的实现，一个是 Spring StateMachine，一个是 Squirrel StateMachine，他们的优点是功能很完备，缺点也是功能很完备。<br>就实际项目而言（其实大部分项目都是如此），实在不需要那么多状态机的高级玩法：比如状态的嵌套（Substate），状态的并行（Parallel，Fork，Join）、子状态机等等。<br>且开源状态机大多都是有状态的，使用分布式多线程来实现，无法做到线程安全，代码需要用到锁同步。每一次状态机在接收请求的时候，都不得不重新 Build 一个新的状态机实例，就导致开源状态机性能差。</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Spring StateMachine</td><td></td><td></td></tr></tbody></table><ol><li>强大的生命周期管理</li><li>易于集成</li><li>良好的文档和社区支持<br>|</li><li>学习曲线较陡峭</li><li>可能增加项目复杂性<br>|<br>| Squirrel StateMachine |</li><li>轻量级</li><li>简单易用</li><li>性能高效<br>|</li><li>功能相对有限<br>|<br>| Cola-StateMachine |</li><li>高度可扩展</li><li>语义清晰、可读性强</li><li>线程安全<br>|</li><li>文档和社区支持相对较少<br>|</li></ol><p>最终选用了一个开源的状态机引擎 Cola-StateMachine。</p><h2 id="Cola-StateMachine-简介">Cola-StateMachine 简介</h2><p>COLA 框架的状态机组件是一种小巧、无状态、简单、轻量、性能极高的状态机 DSL 实现，解决业务中的状态流转问题。<br>Cola-StateMachine 使用的是 Internal DSL 这样一种通用语言的特定用法，用这种 DSL 写出的程序有一种自定义语言的风格，与其所使用的宿主语言有所区别。Cola-StateMachine 使用 Java 实现，最简单，实现成本也最低，但是不支持“外部配置”。<br>Cola-StateMachine 中的核心概念：</p><ol><li>State：状态</li><li>Event：事件，状态由事件触发，引起变化</li><li>Transtition：流转，表示从一个状态到另一个状态</li><li>External Transititon：外部流转，两个不同状态之间的流转</li><li>Interal Transtition：内部流转，同一个状态之间的流转</li><li>Condition：条件，标识是否允许到达某个状态</li><li>Action：动作，到达某个状态以后，可以做什么</li><li>StateMachine：状态</li></ol><p>Cola-statemachine 工作模式<img src="https://cdn.nlark.com/yuque/0/2023/png/396745/1697516987340-f7f541a8-1de2-4191-b900-9313b3cf68c2.png#averageHue=%23f8f7f7&amp;from=url&amp;height=503&amp;id=Y6uOg&amp;originHeight=503&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=782" alt=""><br>Cola-StateMachine 核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">builder.externalTransition()</span><br><span class="line">  .from(States.STATE1)</span><br><span class="line">  .to(States.STATE2)</span><br><span class="line">  .on(Events.EVENT1)</span><br><span class="line">  .when(checkCondition())</span><br><span class="line">  .perform(doAction());</span><br></pre></td></tr></table></figure><h2 id="实践使用">实践使用</h2><h3 id="使用场景">使用场景</h3><p>在设计电商系统订单模块时，订单会涉及各种状态以及状态与状态之间的流转，可扩展性、可维护性会是开发者关注的重点。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/396745/1697516987320-c110e538-2bed-4f93-be81-b92762980bff.png#averageHue=%231c1c1c&amp;from=url&amp;height=443&amp;id=ZuYOm&amp;originHeight=443&amp;originWidth=824&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=824" alt=""><br>订单状态包括：初始化、待支付、待接单、待发货、待收货…<br>订单事件包括：创建订单、支付成功、接单、发货、取消订单…<br>需要考虑如下问题：</p><ol><li>当订单状态增加时，如何尽可能少的改动或改动对历史影响不大？</li><li>如果在同一入口调用，每个事件的处理方法需要的入参都有所不同，如何处理？</li><li>有可能某个事件，在不同平台(买家端、卖家后台、管理平台)的处理逻辑也有些不同，如何处理？</li></ol><p>因为订单涉及到很多状态的流转，选择使用状态机引擎来表达状态流转。因为状态机 DSL 带来的表达能力，相比较于 if-else 的代码，要更优雅更容易理解。另一方面，状态机很简单，不像流程引擎那么华而不实。</p><h4 id="1、引入依赖">1、引入依赖</h4><p>第一步：引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cola<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cola-component-statemachine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、订单基本配置">2、订单基本配置</h4><p>第二步：定义状态机中基础属性：状态、时间、状态机。在本次实践中使用 <code>OrderStatusEnum</code> 定义订单状态，使用 <code>OrderEventParam</code>定义订单事件，使用 <code>OrderStateMachineIdEnum</code> 定义状态机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatusEnum</span> &#123;</span><br><span class="line">    INIT(<span class="string">&quot;初始化&quot;</span>, <span class="number">0</span>),</span><br><span class="line">    PAY_ONLINE(<span class="string">&quot;待支付&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    WAITING_FOR_RECEIVED(<span class="string">&quot;待接单&quot;</span>, <span class="number">2</span>),</span><br><span class="line">    WAITING_DELIVERY(<span class="string">&quot;待发货&quot;</span>, <span class="number">3</span>),</span><br><span class="line">    PART_DELIVERY(<span class="string">&quot;部分发货&quot;</span>, <span class="number">4</span>),</span><br><span class="line">    DELIVER_ALL(<span class="string">&quot;待收货&quot;</span>, <span class="number">5</span>),</span><br><span class="line">    RECEIVED(<span class="string">&quot;已收货&quot;</span>, <span class="number">6</span>),</span><br><span class="line">    DONE(<span class="string">&quot;已完成&quot;</span>, <span class="number">7</span>),</span><br><span class="line">    CANCEL(<span class="string">&quot;已关闭&quot;</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订单事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderEventEnum</span> &#123;</span><br><span class="line">    CREATE_ORDER(<span class="number">1</span>, <span class="string">&quot;创建订单&quot;</span>),</span><br><span class="line">    REPAY(<span class="number">2</span>, <span class="string">&quot;支付&quot;</span>),</span><br><span class="line">    CANCEL_ORDER(<span class="number">3</span>, <span class="string">&quot;取消订单&quot;</span>),</span><br><span class="line">    TAKE_ORDER(<span class="number">4</span>, <span class="string">&quot;接单&quot;</span>),</span><br><span class="line">    REJECT_ORDER(<span class="number">5</span>, <span class="string">&quot;拒单&quot;</span>), </span><br><span class="line">    DELIVERY_PART(<span class="number">6</span>, <span class="string">&quot;部分发货&quot;</span>),</span><br><span class="line">    DELIVERY_ALL(<span class="number">7</span>, <span class="string">&quot;全部发货&quot;</span>),</span><br><span class="line">    CONFIRM_RECEIPT(<span class="number">8</span>, <span class="string">&quot;确认收货&quot;</span>),</span><br><span class="line">    EXTEND_RECEIPT(<span class="number">9</span>, <span class="string">&quot;延长收货&quot;</span>),</span><br><span class="line">    COMPLETE(<span class="number">10</span>, <span class="string">&quot;交易完成&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订单状态机ID 枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStateMachineIdEnum</span> &#123;</span><br><span class="line">    ORDER_OF_SALE(<span class="string">&quot;ORDER_OF_SALE&quot;</span>,</span><br><span class="line">                  OrderBizEnum.SALE_ORDER, <span class="string">&quot;订单状态机&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、订单流转状态机">3、订单流转状态机</h4><p>第三步：定义订单状态流转事件。具体使用 Builder 和 Fluent Interface 的方式，确保代码调用的顺序。比如，在 From 的后面只能调用To，从而保证了状态机构建的语义正确性和连贯性。使用状态机 Builder，确认状态流转模式（Transition），接收状态（From），定义动作（On），检查条件（When），执行事件（Perform），然后返回目标状态（To）。<br>当有新订单事件的增加时，在此状态机中增加相应事件即可，同时维护好订单事件与事件实现方法之间的关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderOfSaleStateMachine</span> <span class="keyword">implements</span> <span class="title class_">OrderStateMachine</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对状态机开始构建，并在StateMachineFactory中注册</span></span><br><span class="line">        StateMachineBuilder&lt;OrderStatusEnum, OrderEventEnum, OrderContext&gt; builder</span><br><span class="line">                = StateMachineBuilderFactory.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建订单: 初始化 -&gt; 待支付</span></span><br><span class="line"><span class="comment">         * externalTransition : 用于一个流转的构建器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        builder.externalTransition().from(OrderStatusEnum.INIT).to(OrderStatusEnum.PAY_ONLINE)</span><br><span class="line">                .on(OrderEventEnum.CREATE_ORDER).when(checkOrder()).perform(createOrderAction);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 部分发货: 部分发货</span></span><br><span class="line"><span class="comment">         * internalTransition : 内部流转</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        builder.internalTransition()</span><br><span class="line">                .within(OrderStatusEnum.PART_DELIVERY)</span><br><span class="line">                .on(OrderEventEnum.DELIVERY_PART)</span><br><span class="line">                .when(checkOrder())</span><br><span class="line">                .perform(deliverOrderAction);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 取消订单: 待支付、待发货、待收货 -&gt; 待支付</span></span><br><span class="line"><span class="comment">         * externalTransitions : 用于多个流转的构建器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        builder.externalTransitions()</span><br><span class="line">                .fromAmong(OrderStatusEnum.PAY_ONLINE,OrderStatusEnum.WAITING_FOR_RECEIVED,                                      OrderStatusEnum.WAITING_DELIVERY)</span><br><span class="line">                .to(OrderStatusEnum.CANCEL)</span><br><span class="line">                .on(OrderEventEnum.CANCEL_ORDER)</span><br><span class="line">                .when(checkOrder())</span><br><span class="line">                .perform(cancelOrderAction);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 说明：cola statemachine 构建后，会自动 StateMachineFactory 注册。</span></span><br><span class="line">        <span class="comment">// 构建成功后根据 StateMachineFactory.get(machineId) 获取状态机，不允许重复构建，重复构建会报错。</span></span><br><span class="line">        builder.build(<span class="built_in">this</span>.getStateMachineIdEnum().getMachineId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderStateMachineIdEnum <span class="title function_">getStateMachineIdEnum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderStateMachineIdEnum.ORDER_OF_SALE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、单个起始状态-外部状态流转">4、单个起始状态-外部状态流转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 设置一个外部状态转义类型的builder,并设置from\to\on\when\perform</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">builder.externalTransition()</span><br><span class="line">.from(OrderStatusEnum.INIT)</span><br><span class="line">.to(OrderStatusEnum.PAY_ONLINE)</span><br><span class="line">.on(OrderEventEnum.CREATE_ORDER)</span><br><span class="line">.when(checkOrder())</span><br><span class="line">.perform(createOrderAction);</span><br></pre></td></tr></table></figure><p>描述：订单起始状态为“初始化”，当发生“创建订单”事件执行状态转义，当满足 <code>CheckCondition</code> 时，执行 <code>CreateOrderAction</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateOrderAction</span> <span class="keyword">implements</span> <span class="title class_">Action</span>&lt;OrderStatusEnum, OrderEventEnum, OrderContext&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(OrderStatusEnum from, OrderStatusEnum to, OrderEventEnum event, OrderContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 1.获取状态机</span></span><br><span class="line">        StateMachine&lt;OrderStatusEnum, OrderEventEnum, OrderContext&gt; stateMachine = getStateMachine();</span><br><span class="line">        <span class="comment">// 2.组状态机 messageContext</span></span><br><span class="line">        <span class="type">OrderContext</span> <span class="variable">orderContext</span> <span class="operator">=</span> buildContext();</span><br><span class="line">        <span class="comment">// 3.状态机事件触发</span></span><br><span class="line">        stateMachine.fireEvent(OrderStatusEnum.INIT, OrderEventEnum.CREATE_ORDER, orderContext);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述：<code>CreateOrderAction</code> 实现创建订单事件，通过 <code>StateMachine.FireEvent</code> 触发状态机事件。</p><h4 id="5、内部状态流转">5、内部状态流转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部分发货: 部分发货</span></span><br><span class="line"><span class="comment"> * internalTransition : 内部流转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.internalTransition()</span><br><span class="line">.within(OrderStatusEnum.PART_DELIVERY)</span><br><span class="line">.on(OrderEventEnum.DELIVERY_PART)</span><br><span class="line">.when(checkOrder())</span><br><span class="line">.perform(deliverOrderAction);</span><br></pre></td></tr></table></figure><p>描述：订单起始状态发生在部分发货状态下，当发生发货时执行状态流转，当满足 <code>CheckCondition</code>(订单部分发货条件)时，执行<code>DeliverOrderAction</code>，执行成功则返回状态：部分发货</p><h4 id="6、多个起始状态-外部状态流转">6、多个起始状态-外部状态流转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消订单: 待支付、待发货、待收货 -&gt; 待支付</span></span><br><span class="line"><span class="comment"> * externalTransitions : 用于多个流转的构建器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.externalTransitions()</span><br><span class="line">.fromAmong(OrderStatusEnum.PAY_ONLINE,OrderStatusEnum.WAITING_FOR_RECEIVED,OrderStatusEnum.WAITING_DELIVERY)</span><br><span class="line">.to(OrderStatusEnum.CANCEL)</span><br><span class="line">.on(OrderEventEnum.CANCEL_ORDER)</span><br><span class="line">.when(checkOrder())</span><br><span class="line">.perform(cancelOrderAction);</span><br></pre></td></tr></table></figure><p>描述：订单起始状态为：待支付、待发货或待收货下，当发生取消订单事件时，当满足 <code>CheckCondition</code> 时，执行 <code>CancelOrderAction</code>，返回状态 <code>CANCEL_ORDER</code>。</p><h2 id="小结">小结</h2><p>Cola-StateMachine 作为阿里开源项目 COLA 中的轻量级状态机组件，最大的特点就是无状态、采用纯 Java 实现，用 Fluent Interface (连贯接口)定义状态和事件，可用于管理状态转换场景。比如：订单状态、支付状态等简单有限状态场景。</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在电商领域，很多业务对象都是有状态的，且这些对象的状态又多又复杂。硬编码的方式已经不适合管理当前复杂业务对象的状态。为了适配复杂多变的业务，可以使用状态机来管理状态，统一定义业务对象状态和状态的流转。接下来，本文会重点介绍状态机相关的</summary>
      
    
    
    
    <category term="springboot2" scheme="http://www.bojiboqi.fun/categories/springboot2/"/>
    
    
    <category term="spring" scheme="http://www.bojiboqi.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 详细手册</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Gradle%20%E8%AF%A6%E7%BB%86%E6%89%8B%E5%86%8C/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Gradle%20%E8%AF%A6%E7%BB%86%E6%89%8B%E5%86%8C/</id>
    <published>2024-04-09T02:34:21.675Z</published>
    <updated>2024-04-09T04:01:46.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语">导语</h2><p>本文在<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fwhat_is_gradle.html%23five_things">Gradle文档</a>基础上进行了提取整理，篇幅较长，请按需阅读</p><h2 id="Gradle概述">Gradle概述</h2><p>Gradle是专注于灵活性和性能的开源构建自动化工具，一般使用Groovy或KotlinDSL编写构建脚本。 本文只使用Groovy</p><h2 id="Gradle的特点：">Gradle的特点：</h2><ul><li>高性能</li></ul><p>Gradle通过仅运行需要运行的任务来避免不必要的工作。 可以使用构建缓存来重用以前运行的任务输出，甚至可以使用其他计算机（具有共享的构建缓存）重用任务输出。</p><ul><li>JVM基础</li></ul><p>Gradle在JVM上运行。熟悉Java的用户来可以在构建逻辑中使用标准Java API，例如自定义任务类型和插件。 这使得Gradle跨平台更加简单。（Gradle不仅限于构建JVM项目，它甚至附带对构建本机项目的支持。）</p><ul><li>约束</li></ul><p>和Maven一样，Gradle通过实现约束使常见类型的项目（例如Java项目）易于构建。 应用适当的插件，您可以轻松地为许多项目使用精简的构建脚本。 但是这些约定并没有限制您：Gradle允许您覆盖它们，添加自己的任务以及对基于约定的构建进行许多其他自定义操作。</p><ul><li>可扩展性</li></ul><p>您可以轻松扩展Gradle以提供您自己的任务类型甚至构建模型。</p><ul><li>IDE支持</li></ul><p>支持IDE：Android Studio，IntelliJ IDEA，Eclipse和NetBeans。 Gradle还支持生成将项目加载到Visual Studio所需的解决方案文件。</p><ul><li>可洞察性</li></ul><p>构建扫描提供了有关构建运行的广泛信息，可用于识别构建问题。他们特别擅长帮助您确定构建性能的问题。 您还可以与其他人共享构建扫描，如果您需要咨询以解决构建问题，这将特别有用。</p><h2 id="您需要了解有关Gradle的五件事">您需要了解有关Gradle的五件事</h2><p>本节在官方文档里面反复提及，我大概概括了下，具体可见<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fwhat_is_gradle.html%23five_things">Gradle文档</a></p><h3 id="1-Gradle是通用的构建工具">1. Gradle是通用的构建工具</h3><p>Gradle允许您构建任何软件，因为它不关心你具体的工作。</p><h3 id="2-核心模型基于任务">2. 核心模型基于任务</h3><p>Gradle将其构建模型建模为任务（工作单元）的有向无环图（DAG）。这意味着构建实质上配置了一组任务，并根据它们的依赖关系将它们连接在一起以创建该DAG。创建任务图后，Gradle将确定需要按顺序运行的任务，然后继续执行它们。<br>任务本身包括以下部分，它们通过依赖链接在一起：</p><ul><li>动作-做某事的工作，例如复制文件或编译源代码</li><li>输入-操作使用或对其进行操作的值，文件和目录</li><li>输出-操作修改或生成的文件和目录</li></ul><h3 id="3-Gradle有几个固定的构建阶段">3. Gradle有几个固定的构建阶段</h3><p>重要的是要了解Gradle分三个阶段评估和执行构建脚本：</p><ul><li>初始化<br>设置构建环境，并确定哪些项目将参与其中。</li><li>配置<br>构造和配置构建的任务图，然后根据用户要运行的任务确定需要运行的任务和运行顺序。</li><li>执行<br>运行在配置阶段结束时选择的任务。</li></ul><p>这些阶段构成了Gradle的构建生命周期。</p><h3 id="4-Gradle的扩展方式不止一种">4. Gradle的扩展方式不止一种</h3><p>Gradle捆绑的构建逻辑不可能满足所有构建情况，大多数构建都有一些特殊要求，你需要添加自定义构建逻辑。Gradle提供了多种机制来扩展它，例如：</p><ul><li>自定义任务类型。</li><li>自定义任务动作。</li><li>项目和任务的额外属性。</li><li>自定义约束。</li><li>自定义module。</li></ul><h3 id="5-构建脚本针对API运行">5. 构建脚本针对API运行</h3><p>可以将Gradle的构建脚本视为可执行代码，但设计良好的构建脚本描述了构建软件需要哪些步骤，而不关心这些步骤应该如何完成工作。<br>由于Gradle在JVM上运行，因此构建脚本也可以使用标准Java API。Groovy构建脚本可以另外使用Groovy API，而Kotlin构建脚本可以使用Kotlin。</p><h2 id="功能的生命周期">功能的生命周期</h2><p>功能可以处于以下四种状态之一：</p><ul><li>Internal：内部功能，不提供接口</li><li>Incubating： 孵化功能。在成为公共功能之前会继续更改</li><li>Public：公共功能，可放心使用</li><li>Deprecated：废弃功能，将在未来删除</li></ul><h2 id="Gradle安装">Gradle安装</h2><h2 id="安装JDK">安装JDK</h2><p>安装JDK过程已有太多资料，本文不做详细介绍。可使用命令检测自己电脑是否成功安装 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865480-f3deb432-7ccd-41f2-89a9-759b1b6c408e.webp#averageHue=%23dbd3c2&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=udc87c0bb&amp;originHeight=170&amp;originWidth=996&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18638&amp;status=done&amp;style=none&amp;taskId=uf8047d4a-85eb-46ac-a6f6-b4527997bd5&amp;title=" alt="image.jpg"></p><h2 id="安装Gradle">安装Gradle</h2><h3 id="用软件包安装Gradle">用软件包安装Gradle</h3><p>SDKMAN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install gradle</span><br></pre></td></tr></table></figure><p>Homebrew</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gradle</span><br></pre></td></tr></table></figure><h3 id="手动安装（推荐方式）">手动安装（推荐方式）</h3><h4 id="下载">下载</h4><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fservices.gradle.org%2Fdistributions%2F">services.gradle.org/distributio…</a> （全部版本目录地址，可以查看最新版本）<br><a href="https://link.juejin.cn/?target=https%3A%2F%2Fservices.gradle.org%2Fdistributions%2Fgradle-6.8.3-all.zip">services.gradle.org/distributio…</a> （截止至2021.02.24最新）</p><h4 id="文件介绍">文件介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gradle-6.8.3-docs.zip  //文档</span><br><span class="line">gradle-6.8.3-src.zip  //源码</span><br><span class="line">gradle-6.8.3-bin.zip  //软件包</span><br><span class="line">gradle-6.8.3-all.zip   //全部文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin ：运行文件</span><br><span class="line">   lib：依赖库</span><br><span class="line">   </span><br><span class="line">   docs：文档</span><br><span class="line">   </span><br><span class="line">   src：源文件</span><br><span class="line">   </span><br><span class="line">   init.d :初始化脚本目录，可自己添加</span><br></pre></td></tr></table></figure><h4 id="配置环境变量">配置环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GRADLE_HOME=/Users/dxs/temp/gradle-6.8.3</span><br><span class="line">export PATH=$PATH:$GRADLE_HOME/bin</span><br></pre></td></tr></table></figure><h4 id="运行">运行</h4><p>输入gradle -v 检测是否配置成功 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865599-5ae2bee8-5ef0-4e49-95c3-88047a1847ce.webp#averageHue=%23e3d9c8&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=u4dbf048c&amp;originHeight=666&amp;originWidth=1082&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50202&amp;status=done&amp;style=none&amp;taskId=uc2ff1161-8cd8-494a-ae7e-b96db35206d&amp;title=" alt="image.jpg"></p><h3 id="HelloWord">HelloWord</h3><p>编写一个build.gradle文件，输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task hello&#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;Hello World&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行输入gradle -q hello即可运行<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865492-ede943a8-2d41-4e66-a4af-117b0938ab6b.webp#averageHue=%23cdccbc&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=u257ccdaf&amp;originHeight=70&amp;originWidth=832&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7754&amp;status=done&amp;style=none&amp;taskId=u7ccb6abf-2995-4767-9e63-5e4782d7470&amp;title=" alt="image.jpg"></p><h3 id="版本管理">版本管理</h3><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E5%25B0%2586%25E6%2582%25A8%25E7%259A%2584%25E6%259E%2584%25E5%25BB%25BA%25E4%25BB%258EGradle%25204.md">从4.X更新到5.0</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E5%25B0%2586%25E6%2582%25A8%25E7%259A%2584%25E6%259E%2584%25E5%25BB%25BA%25E4%25BB%258EGradle%25205.md">从5.X更新到6.0</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E5%25B0%2586%25E6%2582%25A8%25E7%259A%2584%25E6%259E%2584%25E5%25BB%25BA%25E4%25BB%258EGradle%25206.md">从6.X更新到最新</a></li></ul><h3 id="项目迁移">项目迁移</h3><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E4%25BB%258EApache%2520Maven%25E8%25BF%2581%25E7%25A7%25BB.md">从Maven迁移项目到Gradle</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E4%25BB%258EApache%2520Ant%25E8%25BF%2581%25E7%25A7%25BB.md">从Ant迁移项目到Gradle</a></li></ul><h2 id="Gradle-Wrapper">Gradle Wrapper</h2><h2 id="定义">定义</h2><p>Gradle Wrapper是一个脚本，可调用Gradle的声明版本，并在必要时预先下载。因此，开发人员可以快速启动并运行Gradle项目，而无需遵循手动安装过程<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865545-f5942d39-581f-483b-980d-f4df82328bc4.webp#averageHue=%23f6f6f6&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=u776b668b&amp;originHeight=557&amp;originWidth=1037&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12314&amp;status=done&amp;style=none&amp;taskId=ucf6ea3fd-a7cb-4870-b88b-f68b3d409fe&amp;title=" alt="image.jpg"></p><h2 id="添加wrapper">添加wrapper</h2><p>在build.gradle同级目录下使用命令<code>gradle wrapper</code>可以生成gradle wrapper目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865495-2b4a4a9b-c238-4e13-921b-8a5931851a5a.webp#averageHue=%23485362&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=u3ea4ac49&amp;originHeight=278&amp;originWidth=712&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8430&amp;status=done&amp;style=none&amp;taskId=u0fab5c4f-26a9-4a41-aaf3-0c656a7c483&amp;title=" alt="image.jpg"></p><ul><li>gradle-wrapper.jar</li></ul><p>WrapJAR文件，其中包含用于下载Gradle发行版的代码。</p><ul><li>gradle-wrapper.properties</li></ul><p>一个属性文件，负责配置Wrapper运行时行为，例如与该版本兼容的Gradle版本。请注意，更多常规设置（例如，将 Wrap配置为使用代理）需要进入其他文件。</p><ul><li>gradlew， gradlew.bat</li></ul><p>一个shell脚本和一个Windows批处理脚本，用于使用 Wrap程序执行构建。<br>可以通过命令控制生成选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--gradle-version</span><br><span class="line"></span><br><span class="line">    用于下载和执行 Wrap程序的Gradle版本。</span><br><span class="line"></span><br><span class="line">--distribution-type</span><br><span class="line"></span><br><span class="line">    Wrap使用的Gradle分布类型。可用的选项是bin和all。默认值为bin。</span><br><span class="line"></span><br><span class="line">--gradle-distribution-url</span><br><span class="line"></span><br><span class="line">    指向Gradle分发ZIP文件的完整URL。使用此选项，--gradle-version并且--distribution-     type过时的网址已经包含此信息。如果您想在公司网络内部托管Gradle发行版，则此选项非常有价值。</span><br><span class="line"></span><br><span class="line">--gradle-distribution-sha256-sum</span><br><span class="line"></span><br><span class="line">    SHA256哈希和用于验证下载的Gradle分布。</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper --gradle-version 6.8.3 --distribution-type all</span><br></pre></td></tr></table></figure><h2 id="Wrapper属性文件">Wrapper属性文件</h2><p>一般生成Wrapper会得到如下属性文件 gradle-wrapper.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-6.8.3-bin.zip</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure><p>GRADLE_USER_HOME是你的环境变量，如果没配置，则默认是用户目录下的.gradle文件夹</p><ul><li>distributionBase 下载的 Gradle压缩包解压后存储的主目录</li><li>distributionPath 相对于 distributionBase的解压后的 Gradle压缩包的路径</li><li>zipStoreBase 同 distributionBase，只不过是存放 zip压缩包的</li><li>zipStorePath 同 distributionPath，只不过是存放 zip压缩包的</li><li>distributionUrl Gradle发行版压缩包的下载地址</li></ul><h2 id="使用wrapper构建">使用wrapper构建</h2><p>在 gradlew目录下执行命令：<br>windows：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew.bat build</span><br></pre></td></tr></table></figure><p>shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><h2 id="升级">升级</h2><ul><li>更改gradle-wrapper.properties文件中的distributionUrl属性</li><li>使用gradlew wrap --gradle-version 命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew wrap --gradle-version 6.8.3</span><br></pre></td></tr></table></figure><h2 id="自定义Gradle-Wrap">自定义Gradle_Wrap</h2><p>可以通过自定义wrapper少去一些重复操作或定制功能，如<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.named(&#x27;wrapper&#x27;) &#123;</span><br><span class="line">       distributionType = Wrapper.DistributionType.ALL</span><br><span class="line">   &#125;</span><br><span class="line">     </span><br><span class="line">   task wrapper(type: Wrapper) &#123;</span><br><span class="line">       gradleVersion = &#x27;6.8.3&#x27;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Gradle-环境">Gradle 环境</h2><h2 id="环境变量">环境变量</h2><p>GRADLE_OPTS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定启动Gradle客户端VM时要使用的JVM参数。客户端VM仅处理命令行输入/输出，因此很少需要更改其VM选项。实际的构建由Gradle守护程序运行，不受此环境变量的影响。</span><br></pre></td></tr></table></figure><p>GRADLE_USER_HOME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定Gradle用户的主目录（如果未设置，则默认为$USER_HOME/.gradle）。</span><br></pre></td></tr></table></figure><p>JAVA_HOME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定要用于客户端VM的JDK安装目录。除非Gradle属性文件使用org.gradle.java.home指定了另一个虚拟机，否则此虚拟机也用于守护程序。</span><br></pre></td></tr></table></figure><p>注意：命令行选项和系统属性优先于环境变量。</p><h2 id="Gradle属性">Gradle属性</h2><p>你可以通过以下方式自己配置你的项目属性，如果存在多个，则从上到下优先读取 ：</p><ul><li>系统属性，例如在命令行上设置 <code>-Dgradle.user.home</code></li><li>GRADLE_USER_HOME目录中的gradle.properties</li><li>项目根目录中的gradle.properties</li><li>Gradle安装目录中的gradle.properties</li></ul><p>gradle.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 当设置为true时，Gradle将在可能的情况下重用任何先前构建的任务输出，从而使构建速度更快</span><br><span class="line">org.gradle.caching=true</span><br><span class="line"></span><br><span class="line"># 设置为true时，单个输入属性哈希值和每个任务的构建缓存键都记录在控制台上。</span><br><span class="line">org.gradle.caching.debug=true</span><br><span class="line"></span><br><span class="line"># 启用按需孵化配置，Gradle将尝试仅配置必要的项目。</span><br><span class="line">org.gradle.configureondemand=true</span><br><span class="line"></span><br><span class="line"># 自定义控制台输出的颜色或详细程度。默认值取决于Gradle的调用方式。可选(auto,plain,rich,verbose)</span><br><span class="line">org.gradle.console=auto</span><br><span class="line"></span><br><span class="line"># 当设置true的Gradle守护进程来运行构建。默认值为true。</span><br><span class="line">org.gradle.daemon=true</span><br><span class="line"></span><br><span class="line"># 在指定的空闲毫秒数后，Gradle守护程序将自行终止。默认值为10800000（3小时）。</span><br><span class="line">org.gradle.daemon.idletimeout=10800000</span><br><span class="line"></span><br><span class="line"># 设置true为时，Gradle将在启用远程调试的情况下运行构建，侦听端口5005。</span><br><span class="line"># 请注意，这等同于添加-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005到JVM命令行，并且将挂起虚拟机，直到连接了调试器。</span><br><span class="line"># 默认值为false。</span><br><span class="line">org.gradle.debug=true</span><br><span class="line"></span><br><span class="line"># 指定用于Gradle构建过程的Java主页。可以将值设置为jdk或jre位置，但是，根据您的构建方式，使用JDK更安全。</span><br><span class="line"># 如果未指定设置，则从您的环境（JAVA_HOME或的路径java）派生合理的默认值。这不会影响用于启动Gradle客户端VM的Java版本（请参阅环境变量）。</span><br><span class="line">org.gradle.java.home=/usr/bin/java</span><br><span class="line">        </span><br><span class="line"># 指定用于Gradle守护程序的JVM参数。该设置对于配置JVM内存设置以提高构建性能特别有用。这不会影响Gradle客户端VM的JVM设置。</span><br><span class="line">org.gradle.jvmargs=-Xmx2048m</span><br><span class="line"></span><br><span class="line"># 当设置为quiet,warn,lifecycle,info,debug时，Gradle将使用此日志级别。这些值不区分大小写。该lifecycle级别是默认级别。</span><br><span class="line"># 可选(quiet,warn,lifecycle,info,debug)</span><br><span class="line">org.gradle.logging.level=debug</span><br><span class="line"></span><br><span class="line"># 配置后，Gradle将分叉到org.gradle.workers.maxJVM以并行执行项目</span><br><span class="line">org.gradle.parallel=true</span><br><span class="line">        </span><br><span class="line"># 指定Gradle守护程序及其启动的所有进程的调度优先级。默认值为normal。(low,normal)</span><br><span class="line">org.gradle.priority=normal</span><br><span class="line">        </span><br><span class="line"># 在监视文件系统时配置详细日志记录。 默认为关闭 。</span><br><span class="line">org.gradle.vfs.verbose=true</span><br><span class="line"></span><br><span class="line"># 切换观看文件系统。允许Gradle在下一个版本中重用有关文件系统的信息。 默认为关闭 。</span><br><span class="line">org.gradle.vfs.watch=true</span><br><span class="line"></span><br><span class="line"># 当设置为all，summary或者none，Gradle会使用不同的预警类型的显示器。(all,fail,summary,none)</span><br><span class="line">org.gradle.warning.mode=all</span><br><span class="line"></span><br><span class="line"># 配置后，Gradle将最多使用给定数量的工人。默认值为CPU处理器数。</span><br><span class="line">org.gradle.workers.max=5</span><br></pre></td></tr></table></figure><h3 id="系统属性">系统属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 指定用户名以使用HTTP基本认证从服务器下载Gradle发行版</span><br><span class="line">systemProp.gradle.wrapperUser = myuser</span><br><span class="line"># 指定使用Gradle Wrapper下载Gradle发行版的密码</span><br><span class="line">systemProp.gradle.wrapperPassword = mypassword</span><br><span class="line"># 指定Gradle用户的主目录</span><br><span class="line">systemProp.gradle.user.home=(path to directory)</span><br></pre></td></tr></table></figure><h3 id="项目属性">项目属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.project.foo = bar</span><br></pre></td></tr></table></figure><h2 id="守护程序">守护程序</h2><p>Gradle在Java虚拟机（JVM）上运行，并使用一些支持库，这些库需要很短的初始化时间。但有时启动会比较慢。<br>解决此问题的方法是Gradle Daemon ：这是一个长期存在的后台进程，与以前相比，它可以更快地执行构建。<br>可通过命令获取运行守护程序状态<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311865998-b034c8a9-99b0-455c-9d8a-ec676a1e7945.webp#averageHue=%23e3dac8&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=u26b0b57a&amp;originHeight=210&amp;originWidth=1162&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23022&amp;status=done&amp;style=none&amp;taskId=u7177f345-75d3-486c-b9ed-9792aeb936f&amp;title=" alt="image.jpg"> IDLE为空闲，BUSY为繁忙，STOPPED则已关闭<br>守护程序默认打开，可通过以下属性关闭<br>.gradle/gradle.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.daemon=false</span><br></pre></td></tr></table></figure><p>也可用命令gradle --stop手动关闭守护程序<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311866002-20e7d721-c104-444b-b52b-acfab19d928f.webp#averageHue=%23e0d8c6&amp;clientId=u19927788-d758-4&amp;from=paste&amp;id=uf385b702&amp;originHeight=378&amp;originWidth=1108&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37288&amp;status=done&amp;style=none&amp;taskId=u17d12298-cf02-4e26-8c42-9dca5f3fc37&amp;title=" alt="image.jpg"></p><h2 id="Gradle命令行">Gradle命令行</h2><p>命令行格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle [taskName ...] [--option-name ...]</span><br></pre></td></tr></table></figure><p>如果指定了多个任务，则应以空格分隔。<br>选项和参数之间建议使用<code>=</code>来指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--console=plain</span><br></pre></td></tr></table></figure><p>启用行为的选项具有长形式的选项，并带有由指定的反函数<code>--no-</code>。以下是相反的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--build-cache</span><br><span class="line">--no-build-cache</span><br></pre></td></tr></table></figure><p>许多命令具有缩写。例如以下命令是等效的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--help</span><br><span class="line">-h</span><br></pre></td></tr></table></figure><p>使用Wrapper时候应该用<code>./gradlew</code>或<code>gradlew.bat</code>取代<code>gradle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#获取帮助</span><br><span class="line">gradle -?</span><br><span class="line">gradle -h</span><br><span class="line">gradle -help</span><br><span class="line"></span><br><span class="line"># 显示所选项目的子项目列表，以层次结构显示。</span><br><span class="line">gradle projects</span><br><span class="line">#查看可执行task</span><br><span class="line">gradle task</span><br><span class="line">#查看可执行task帮助</span><br><span class="line">gradle help -task</span><br><span class="line"></span><br><span class="line"># 在Gradle构建中，通常的`build`任务是指定组装所有输出并运行所有检查。</span><br><span class="line">gradle build</span><br><span class="line"># 执行所有验证任务（包括test和linting）。</span><br><span class="line">gradle check</span><br><span class="line"># 清理项目</span><br><span class="line">gradle clean</span><br><span class="line">#强制刷新依赖</span><br><span class="line">gradle --refresh-dependencies assemble</span><br><span class="line"></span><br><span class="line">#缩写调用</span><br><span class="line">gradle startCmd</span><br><span class="line">== </span><br><span class="line">gradle sc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行任务</span><br><span class="line">gradle myTask</span><br><span class="line"># 执行多个任务</span><br><span class="line">gradle myTask test</span><br><span class="line"># 执行 dist任务但排除test任务</span><br><span class="line">gradle dist --exclude-task test</span><br><span class="line"># 强制执行任务</span><br><span class="line">gradle test --rerun-tasks</span><br><span class="line"></span><br><span class="line"># 持续构建</span><br><span class="line"># gradle test --continue</span><br><span class="line"></span><br><span class="line"># 生成扫描会提供完整的可视化报告，说明哪些依赖项存在于哪些配置，可传递依赖项和依赖项版本选择中。</span><br><span class="line">$ gradle myTask --scan</span><br><span class="line"></span><br><span class="line"># 所选项目的依赖项列表</span><br><span class="line">$ gradle dependencies</span><br></pre></td></tr></table></figure><p>更多命令行可参阅<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E5%2591%25BD%25E4%25BB%25A4%25E8%25A1%258C%25E7%2595%258C%25E9%259D%25A2.md">命令行选项</a></p><h2 id="项目与任务">项目与任务</h2><p>Gradle中的所有内容都位于两个基本概念之上：</p><ul><li>projects ：每个Gradle构建都由一个或多个 projects组成 ，一个projects代表什么取决于您使用Gradle做的事情。例如，一个projects可能代表一个JAR库或一个Web应用程序。</li><li>tasks ：每个projects由一个或多个 tasks组成 。tasks代表构建执行的一些原子工作。这可能是编译某些类，创建JAR，生成Javadoc或将一些存档发布到存储库。</li></ul><h2 id="项目">项目</h2><p>表.项目属性</p><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>project</td><td>Project</td><td>该Project实例</td></tr><tr><td>name</td><td>String</td><td>项目目录的名称。</td></tr><tr><td>path</td><td>String</td><td>项目的绝对路径。</td></tr><tr><td>description</td><td>String项目说明。</td><td></td></tr><tr><td>projectDir</td><td>File</td><td>包含构建脚本的目录。</td></tr><tr><td>buildDir</td><td>File</td><td><em>projectDir</em> /build</td></tr><tr><td>group</td><td>Object</td><td>unspecified</td></tr><tr><td>version</td><td>Object</td><td>unspecified</td></tr><tr><td>ant</td><td>ant build</td><td>一个AntBuilder实例</td></tr></tbody></table><h2 id="任务">任务</h2><h3 id="定义任务">定义任务</h3><ol><li>使用字符串作为任务名称定义任务</li><li>使用tasks容器定义任务</li><li>使用DSL特定语法定义任务</li></ol><p>例：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 使用字符串作为任务名称定义任务</span><br><span class="line">task(&#x27;hello&#x27;) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 使用tasks容器定义任务</span><br><span class="line">tasks.create(&#x27;hello&#x27;) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 使用DSL特定语法定义任务</span><br><span class="line">task(hello) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task(&#x27;copy&#x27;, type: Copy) &#123;</span><br><span class="line">    from(file(&#x27;srcDir&#x27;))</span><br><span class="line">    into(buildDir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定位任务">定位任务</h3><ul><li>使用DSL特定语法访问任务</li><li>通过任务集合访问任务</li><li>通过路径访问</li><li>按任务类型访问任务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">task hello</span><br><span class="line">task copy(type: Copy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用DSL特定语法访问任务</span><br><span class="line">println hello.name</span><br><span class="line">println project.hello.name</span><br><span class="line"></span><br><span class="line">println copy.destinationDir</span><br><span class="line">println project.copy.destinationDir</span><br><span class="line"></span><br><span class="line">// 通过任务集合访问任务</span><br><span class="line">println tasks.hello.name</span><br><span class="line">println tasks.named(&#x27;hello&#x27;).get().name</span><br><span class="line"></span><br><span class="line">println tasks.copy.destinationDir</span><br><span class="line">println tasks.named(&#x27;copy&#x27;).get().destinationDir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//按任务类型访问任务</span><br><span class="line">tasks.withType(Tar).configureEach &#123;</span><br><span class="line">    enabled = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task test &#123;</span><br><span class="line">    dependsOn tasks.withType(Copy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过路径访问<br>project-a / build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task hello</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task hello</span><br><span class="line"></span><br><span class="line">println tasks.getByPath(&#x27;hello&#x27;).path</span><br><span class="line">println tasks.getByPath(&#x27;:hello&#x27;).path</span><br><span class="line">println tasks.getByPath(&#x27;project-a:hello&#x27;).path</span><br><span class="line">println tasks.getByPath(&#x27;:project-a:hello&#x27;).path</span><br></pre></td></tr></table></figure><h3 id="配置任务">配置任务</h3><h4 id="使用API配置任务">使用API配置任务</h4><p>例：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Copy myCopy = tasks.getByName(&quot;myCopy&quot;)</span><br><span class="line">myCopy.from &#x27;resources&#x27;</span><br><span class="line">myCopy.into &#x27;target&#x27;</span><br><span class="line">myCopy.include(&#x27;**/*.txt&#x27;, &#x27;**/*.xml&#x27;, &#x27;**/*.properties&#x27;)</span><br></pre></td></tr></table></figure><h4 id="使用DSL特定语法配置任务">使用DSL特定语法配置任务</h4><p>例：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Configure task using Groovy dynamic task configuration block</span><br><span class="line">myCopy &#123;</span><br><span class="line">   from &#x27;resources&#x27;</span><br><span class="line">   into &#x27;target&#x27;</span><br><span class="line">&#125;</span><br><span class="line">myCopy.include(&#x27;**/*.txt&#x27;, &#x27;**/*.xml&#x27;, &#x27;**/*.properties&#x27;)</span><br></pre></td></tr></table></figure><h4 id="用配置块定义一个任务">用配置块定义一个任务</h4><p>例：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task copy(type: Copy) &#123;</span><br><span class="line">   from &#x27;resources&#x27;</span><br><span class="line">   into &#x27;target&#x27;</span><br><span class="line">   include(&#x27;**/*.txt&#x27;, &#x27;**/*.xml&#x27;, &#x27;**/*.properties&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将参数传递给任务构造函数">将参数传递给任务构造函数</h3><p>与Task在创建后配置可变属性相反，您可以将参数值传递给Task类的构造函数。为了将值传递给Task构造函数，您必须使用@javax.inject.Inject注释相关的构造函数。<br>首先创建带有@Inject构造函数的任务类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class CustomTask extends DefaultTask &#123;</span><br><span class="line">    final String message</span><br><span class="line">    final int number</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    CustomTask(String message, int number) &#123;</span><br><span class="line">        this.message = message</span><br><span class="line">        this.number = number</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个任务，并在参数列表的末尾传递构造函数参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasks.create(&#x27;myTask&#x27;, CustomTask, &#x27;hello&#x27;, 42)</span><br></pre></td></tr></table></figure><p>你也可以使用Map创建带有构造函数参数的任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task myTask(type: CustomTask, constructorArgs: [&#x27;hello&#x27;, 42])</span><br></pre></td></tr></table></figure><h3 id="向任务添加依赖项">向任务添加依赖项</h3><p>从另一个项目添加对任务的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project(&#x27;project-a&#x27;) &#123;</span><br><span class="line">    task taskX &#123;</span><br><span class="line">        dependsOn &#x27;:project-b:taskY&#x27;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println &#x27;taskX&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project(&#x27;project-b&#x27;) &#123;</span><br><span class="line">    task taskY &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println &#x27;taskY&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用任务对象添加依赖">使用任务对象添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line"></span><br><span class="line">        println &#x27;taskX&#x27;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task taskY &#123;</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line"></span><br><span class="line">        println &#x27;taskY&#x27;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">taskX.dependsOn taskY</span><br></pre></td></tr></table></figure><h3 id="使用惰性块添加依赖项">使用惰性块添加依赖项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskX&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Using a Groovy Closure</span><br><span class="line">taskX.dependsOn &#123;</span><br><span class="line">    tasks.findAll &#123; task -&gt; task.name.startsWith(&#x27;lib&#x27;) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task lib1 &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;lib1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task lib2 &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;lib2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task notALib &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;notALib&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务排序">任务排序</h3><p>控制任务排序的两种方式：</p><ul><li>must run after ：必须在之后运行</li><li>should run after：应该在之后运行 例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskX&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task taskY &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskY&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">taskY.mustRunAfter taskX</span><br></pre></td></tr></table></figure><p>should run after被忽略的情况</p><ul><li>引入排序周期。</li><li>使用并行执行时，除了 &quot;should run after &quot;任务外，一个任务的所有依赖关系都已被满足，</li></ul><p>引入排序周期例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskX&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task taskY &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskY&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task taskZ &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskZ&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">taskX.dependsOn taskY</span><br><span class="line">taskY.dependsOn taskZ</span><br><span class="line">taskZ.shouldRunAfter taskX</span><br></pre></td></tr></table></figure><h3 id="为任务添加描述">为任务添加描述</h3><p>您可以在任务中添加描述。执行gradle tasks时将显示此描述。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task copy(type: Copy) &#123;</span><br><span class="line">   description &#x27;Copies the resource directory to the target directory.&#x27;</span><br><span class="line">   from &#x27;resources&#x27;</span><br><span class="line">   into &#x27;target&#x27;</span><br><span class="line">   include(&#x27;**/*.txt&#x27;, &#x27;**/*.xml&#x27;, &#x27;**/*.properties&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳过任务">跳过任务</h3><p>onlyIf跳过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello.onlyIf &#123; !project.hasProperty(&#x27;skipHello&#x27;) &#125;</span><br><span class="line">//StopExecutionException跳过</span><br><span class="line">compile.doFirst &#123;</span><br><span class="line">    if (true) &#123; throw new StopExecutionException() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task disableMe &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;This should not be printed if the task is disabled.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">disableMe.enabled = false</span><br></pre></td></tr></table></figure><p>任务超时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task hangingTask() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        Thread.sleep(100000)</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = Duration.ofMillis(500)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务规则">任务规则</h3><p>有时您想执行一个任务，该任务的行为取决于较大或无限数量的参数值范围。提供此类任务的一种非常好的表达方式是任务规则：<br>任务规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tasks.addRule(&quot;Pattern: ping&lt;ID&gt;&quot;) &#123; String taskName -&gt;</span><br><span class="line">    if (taskName.startsWith(&quot;ping&quot;)) &#123;</span><br><span class="line">        task(taskName) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println &quot;Pinging: &quot; + (taskName - &#x27;ping&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task groupPing &#123;</span><br><span class="line">    dependsOn pingServer1, pingServer2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q groupPing</span><br><span class="line"></span><br><span class="line">Ping：Server1</span><br><span class="line">Ping：Server2</span><br></pre></td></tr></table></figure><h3 id="终结器任务">终结器任务</h3><p>计划运行终结任务时，终结任务会自动添加到任务图中。即使完成任务失败，也将执行终结器任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskX&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task taskY &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;taskY&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">taskX.finalizedBy taskY</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q taskX</span><br><span class="line"></span><br><span class="line">TaskX</span><br><span class="line">TaskY</span><br></pre></td></tr></table></figure><h3 id="动态任务">动态任务</h3><p>Groovy或Kotlin的功能可用于定义任务以外的其他功能。例如，您还可以使用它来动态创建任务。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4.times &#123; counter -&gt;</span><br><span class="line">    task &quot;task$counter&quot; &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println &quot;I&#x27;m task number $counter&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gradle -q task1 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q task1</span><br><span class="line">I&#x27;m task number 1</span><br></pre></td></tr></table></figure><h3 id="Groovy-DSL快捷方式符号">Groovy_DSL快捷方式符号</h3><p>访问任务有一种方便的表示法。每个任务都可以作为构建脚本的属性来使用：<br>例.作为构建脚本的属性访问任务<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;Hello world!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello.doLast &#123;</span><br><span class="line">    println &quot;Greetings from the $hello.name task.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 gradle -q hello</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q hello</span><br><span class="line">Hello world!</span><br><span class="line">Greetings from the hello task.</span><br></pre></td></tr></table></figure><p>这将启用非常可读的代码，尤其是在使用插件提供的任务（例如compile任务）时。</p><h3 id="额外任务属性">额外任务属性</h3><p>您可以将自己的属性添加到任务。要添加名为的属性myProperty，请设置ext.myProperty为初始值。从那时起，可以像预定义的任务属性一样读取和设置属性。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task myTask &#123;</span><br><span class="line">    ext.myProperty = &quot;myValue&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task printTaskProperties &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println myTask.myProperty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 gradle -q printTaskProperties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q printTaskProperties</span><br><span class="line">myValue</span><br></pre></td></tr></table></figure><p>额外的属性不仅限于任务。您可以在Extra属性中阅读有关它们的更多信息。</p><h3 id="默认任务">默认任务</h3><p>Gradle允许您定义一个或多个默认任务。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">defaultTasks &#x27;clean&#x27;, &#x27;run&#x27;</span><br><span class="line"></span><br><span class="line">task clean &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;Default Cleaning!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task run &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &#x27;Default Running!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task other &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &quot;I&#x27;m not a default task!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 gradle -q</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q</span><br><span class="line">Default Cleaning!</span><br><span class="line">Default Running!</span><br></pre></td></tr></table></figure><p>这等效于运行gradle clean run。在多项目构建中，每个子项目可以有其自己的特定默认任务。如果子项目未指定默认任务，则使用父项目的默认任务（如果已定义）。</p><h2 id="Groovy基础">Groovy基础</h2><h2 id="基本规则">基本规则</h2><ul><li>没有分号</li><li>方法括号可以省略</li><li>方法可以不写return，返回最后一句代码</li><li>代码块可以作为参数传递</li></ul><h2 id="定义-2">定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def param = &#x27;hello world&#x27;</span><br><span class="line">def param1 = &quot;hello world&quot;</span><br><span class="line">println &quot;$&#123;param1&#125; ,li&quot;</span><br></pre></td></tr></table></figure><p>${}里面可以放变量，也可以是表达式，只有双引号里面可以使用</p><h2 id="声明变量">声明变量</h2><p>可以在构建脚本中声明两种变量：局部变量和额外属性。</p><h3 id="局部变量">局部变量</h3><p>局部变量用def关键字声明。它们仅在声明它们的范围内可见。局部变量是基础Groovy语言的功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def dest = &quot;dest&quot;</span><br><span class="line">task copy(type: Copy) &#123;</span><br><span class="line">    from &quot;source&quot;</span><br><span class="line">    into dest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ext属性">ext属性</h3><p>Gradle的域模型中的所有增强对象都可以容纳额外的用户定义属性。<br>可以通过拥有对象的ext属性添加，读取和设置其他属性。可以使用一个ext块一次添加多个属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    springVersion = &quot;3.1.0.RELEASE&quot;</span><br><span class="line">    emailNotification = &quot;build@master.org&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets.all &#123; ext.purpose = null &#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        purpose = &quot;production&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    test &#123;</span><br><span class="line">        purpose = &quot;test&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    plugin &#123;</span><br><span class="line">        purpose = &quot;production&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task printProperties &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println springVersion</span><br><span class="line">        println emailNotification</span><br><span class="line">        sourceSets.matching &#123; it.purpose == &quot;production&quot; &#125;.each &#123; println it.name &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 gradle -q printProperties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q printProperties</span><br><span class="line">3.1.0.RELEASE</span><br><span class="line">build@master.org</span><br><span class="line">main</span><br><span class="line">plugin</span><br></pre></td></tr></table></figure><h3 id="变量范围：本地和脚本范围">变量范围：本地和脚本范围</h3><p>用类型修饰符声明的变量在闭包中可见，但在方法中不可见。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String localScope1 = &#x27;localScope1&#x27;</span><br><span class="line">def localScope2 = &#x27;localScope2&#x27;</span><br><span class="line">scriptScope = &#x27;scriptScope&#x27;</span><br><span class="line"></span><br><span class="line">println localScope1</span><br><span class="line">println localScope2</span><br><span class="line">println scriptScope</span><br><span class="line"></span><br><span class="line">closure = &#123;</span><br><span class="line">    println localScope1</span><br><span class="line">    println localScope2</span><br><span class="line">    println scriptScope</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def method() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        localScope1</span><br><span class="line">    &#125; catch (MissingPropertyException e) &#123;</span><br><span class="line">        println &#x27;localScope1NotAvailable&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        localScope2</span><br><span class="line">    &#125; catch(MissingPropertyException e) &#123;</span><br><span class="line">        println &#x27;localScope2NotAvailable&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    println scriptScope</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closure.call()</span><br><span class="line">method()</span><br></pre></td></tr></table></figure><p>输出 groovy scope.groovy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; groovy作用域</span><br><span class="line">localScope1</span><br><span class="line">localScope2</span><br><span class="line">scriptScope</span><br><span class="line">localScope1</span><br><span class="line">localScope2</span><br><span class="line">scriptScope</span><br><span class="line">localScope1NotAvailable</span><br><span class="line">localScope2NotAvailable</span><br><span class="line">scriptScope</span><br></pre></td></tr></table></figure><h2 id="对象">对象</h2><h3 id="使用对象">使用对象</h3><p>您可以按照以下易读的方式配置任意对象。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.text.FieldPosition</span><br><span class="line"></span><br><span class="line">task configure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        def pos = configure(new FieldPosition(10)) &#123;</span><br><span class="line">            beginIndex = 1</span><br><span class="line">            endIndex = 5</span><br><span class="line">        &#125;</span><br><span class="line">        println pos.beginIndex</span><br><span class="line">        println pos.endIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q configure</span><br><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="使用外部脚本配置任意对象">使用外部脚本配置任意对象</h3><p>您也可以使用外部脚本配置任意对象。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task configure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        def pos = new java.text.FieldPosition(10)</span><br><span class="line">        // Apply the script</span><br><span class="line">        apply from: &#x27;other.gradle&#x27;, to: pos</span><br><span class="line">        println pos.beginIndex</span><br><span class="line">        println pos.endIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>other.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Set properties.</span><br><span class="line">beginIndex = 1</span><br><span class="line">endIndex = 5</span><br></pre></td></tr></table></figure><p>输出 gradle -q configure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q configure</span><br><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="属性访问器">属性访问器</h2><p>Groovy自动将属性引用转换为对适当的getter或setter方法的调用。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Using a getter method</span><br><span class="line">println project.buildDir</span><br><span class="line">println getProject().getBuildDir()</span><br><span class="line"></span><br><span class="line">// Using a setter method</span><br><span class="line">project.buildDir = &#x27;target&#x27;</span><br><span class="line">getProject().setBuildDir(&#x27;target&#x27;)</span><br></pre></td></tr></table></figure><h2 id="闭包">闭包</h2><p>闭包（闭合代码块，可以引用传入的变量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">task testClosure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        func &#123;</span><br><span class="line">            println it</span><br><span class="line">        &#125;</span><br><span class="line">        funa &#123; a, b -&gt;</span><br><span class="line">            println a + b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def funa(closure) &#123;</span><br><span class="line">    closure(10, 3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def func(closure) &#123;</span><br><span class="line">    closure(10)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包委托">闭包委托</h3><p>每个闭包都有一个<code>delegate</code>对象，Groovy使用该对象来查找不是闭包的局部变量或参数的变量和方法引用。<br>例.闭包委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Info &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String code;</span><br><span class="line"></span><br><span class="line">    def log() &#123;</span><br><span class="line">        println(&quot;code:$&#123;code&#125;;id:$&#123;id&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def info(Closure&lt;Info&gt; closure) &#123;</span><br><span class="line">    Info p = new Info()</span><br><span class="line">    closure.delegate = p</span><br><span class="line">    // 委托模式优先</span><br><span class="line">    closure.setResolveStrategy(Closure.DELEGATE_FIRST)</span><br><span class="line">    closure(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task configClosure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        info &#123;</span><br><span class="line">            code = &quot;cix&quot;</span><br><span class="line">            id = 1</span><br><span class="line">            log()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :configClosure</span><br><span class="line">code:cix;id:1</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 276ms</span><br></pre></td></tr></table></figure><p>例：使用必包委托设置依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        assert delegate == project.dependencies</span><br><span class="line">        testImplementation(&#x27;junit:junit:4.13&#x27;)</span><br><span class="line">        delegate.testImplementation(&#x27;junit:junit:4.13&#x27;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="方法">方法</h2><h3 id="方法调用上的可选括号">方法调用上的可选括号</h3><p>括号对于方法调用是可选的。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.systemProperty &#x27;some.prop&#x27;, &#x27;value&#x27;</span><br><span class="line">test.systemProperty(&#x27;some.prop&#x27;, &#x27;value&#x27;)</span><br></pre></td></tr></table></figure><h3 id="闭包作为方法中的最后一个参数">闭包作为方法中的最后一个参数</h3><p>当方法的最后一个参数是闭包时，可以将闭包放在方法调用之后：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    println &quot;in a closure&quot;</span><br><span class="line">&#125;</span><br><span class="line">repositories() &#123; println &quot;in a closure&quot; &#125;</span><br><span class="line">repositories(&#123; println &quot;in a closure&quot; &#125;)</span><br></pre></td></tr></table></figure><h2 id="集合">集合</h2><h3 id="List">List</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def list = [1,2,3,4]</span><br><span class="line">println list[0] // 1</span><br><span class="line">println list[-1] // 4 最后一个</span><br><span class="line">println list[-2] // 3 倒数第二个</span><br><span class="line">println list[0..2] // 第1-3个</span><br><span class="line"></span><br><span class="line">list.each &#123; //迭代</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map">Map</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def map= [&#x27;name&#x27;:&#x27;li&#x27;, &#x27;age&#x27;:18]</span><br><span class="line">println map[name] // li</span><br><span class="line">println map.age // 18</span><br><span class="line"></span><br><span class="line">list.each &#123; //迭代</span><br><span class="line">    println &quot;$&#123;it.key&#125;:$&#123;it.value&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaBean">JavaBean</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    private int a; //可通过A().a 获取修改</span><br><span class="line">    public int getB()&#123;//可通过A().b获取，但不能修改</span><br><span class="line">        1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// List literal</span><br><span class="line">test.includes = [&#x27;org/gradle/api/**&#x27;, &#x27;org/gradle/internal/**&#x27;]</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;()</span><br><span class="line">list.add(&#x27;org/gradle/api/**&#x27;)</span><br><span class="line">list.add(&#x27;org/gradle/internal/**&#x27;)</span><br><span class="line">test.includes = list</span><br><span class="line"></span><br><span class="line">// Map literal.</span><br><span class="line">Map&lt;String, String&gt; map = [key1:&#x27;value1&#x27;, key2: &#x27;value2&#x27;]</span><br><span class="line"></span><br><span class="line">// Groovy will coerce named arguments</span><br><span class="line">// into a single map argument</span><br><span class="line">apply plugin: &#x27;java&#x27;</span><br></pre></td></tr></table></figure><h2 id="默认导入">默认导入</h2><p>为了使构建脚本更简洁，Gradle自动向Gradle脚本添加了一些类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">import org.gradle.*</span><br><span class="line">import org.gradle.api.*</span><br><span class="line">import org.gradle.api.artifacts.*</span><br><span class="line">import org.gradle.api.artifacts.component.*</span><br><span class="line">import org.gradle.api.artifacts.dsl.*</span><br><span class="line">import org.gradle.api.artifacts.ivy.*</span><br><span class="line">import org.gradle.api.artifacts.maven.*</span><br><span class="line">import org.gradle.api.artifacts.query.*</span><br><span class="line">import org.gradle.api.artifacts.repositories.*</span><br><span class="line">import org.gradle.api.artifacts.result.*</span><br><span class="line">import org.gradle.api.artifacts.transform.*</span><br><span class="line">import org.gradle.api.artifacts.type.*</span><br><span class="line">import org.gradle.api.artifacts.verification.*</span><br><span class="line">import org.gradle.api.attributes.*</span><br><span class="line">import org.gradle.api.attributes.java.*</span><br><span class="line">import org.gradle.api.capabilities.*</span><br><span class="line">import org.gradle.api.component.*</span><br><span class="line">import org.gradle.api.credentials.*</span><br><span class="line">import org.gradle.api.distribution.*</span><br><span class="line">import org.gradle.api.distribution.plugins.*</span><br><span class="line">import org.gradle.api.execution.*</span><br><span class="line">import org.gradle.api.file.*</span><br><span class="line">import org.gradle.api.initialization.*</span><br><span class="line">import org.gradle.api.initialization.definition.*</span><br><span class="line">import org.gradle.api.initialization.dsl.*</span><br><span class="line">import org.gradle.api.invocation.*</span><br><span class="line">import org.gradle.api.java.archives.*</span><br><span class="line">import org.gradle.api.jvm.*</span><br><span class="line">import org.gradle.api.logging.*</span><br><span class="line">import org.gradle.api.logging.configuration.*</span><br><span class="line">import org.gradle.api.model.*</span><br><span class="line">import org.gradle.api.plugins.*</span><br><span class="line">import org.gradle.api.plugins.antlr.*</span><br><span class="line">import org.gradle.api.plugins.quality.*</span><br><span class="line">import org.gradle.api.plugins.scala.*</span><br><span class="line">import org.gradle.api.provider.*</span><br><span class="line">import org.gradle.api.publish.*</span><br><span class="line">import org.gradle.api.publish.ivy.*</span><br><span class="line">import org.gradle.api.publish.ivy.plugins.*</span><br><span class="line">import org.gradle.api.publish.ivy.tasks.*</span><br><span class="line">import org.gradle.api.publish.maven.*</span><br><span class="line">import org.gradle.api.publish.maven.plugins.*</span><br><span class="line">import org.gradle.api.publish.maven.tasks.*</span><br><span class="line">import org.gradle.api.publish.plugins.*</span><br><span class="line">import org.gradle.api.publish.tasks.*</span><br><span class="line">import org.gradle.api.reflect.*</span><br><span class="line">import org.gradle.api.reporting.*</span><br><span class="line">import org.gradle.api.reporting.components.*</span><br><span class="line">import org.gradle.api.reporting.dependencies.*</span><br><span class="line">import org.gradle.api.reporting.dependents.*</span><br><span class="line">import org.gradle.api.reporting.model.*</span><br><span class="line">import org.gradle.api.reporting.plugins.*</span><br><span class="line">import org.gradle.api.resources.*</span><br><span class="line">import org.gradle.api.services.*</span><br><span class="line">import org.gradle.api.specs.*</span><br><span class="line">import org.gradle.api.tasks.*</span><br><span class="line">import org.gradle.api.tasks.ant.*</span><br><span class="line">import org.gradle.api.tasks.application.*</span><br><span class="line">import org.gradle.api.tasks.bundling.*</span><br><span class="line">import org.gradle.api.tasks.compile.*</span><br><span class="line">import org.gradle.api.tasks.diagnostics.*</span><br><span class="line">import org.gradle.api.tasks.incremental.*</span><br><span class="line">import org.gradle.api.tasks.javadoc.*</span><br><span class="line">import org.gradle.api.tasks.options.*</span><br><span class="line">import org.gradle.api.tasks.scala.*</span><br><span class="line">import org.gradle.api.tasks.testing.*</span><br><span class="line">import org.gradle.api.tasks.testing.junit.*</span><br><span class="line">import org.gradle.api.tasks.testing.junitplatform.*</span><br><span class="line">import org.gradle.api.tasks.testing.testng.*</span><br><span class="line">import org.gradle.api.tasks.util.*</span><br><span class="line">import org.gradle.api.tasks.wrapper.*</span><br><span class="line">import org.gradle.authentication.*</span><br><span class="line">import org.gradle.authentication.aws.*</span><br><span class="line">import org.gradle.authentication.http.*</span><br><span class="line">import org.gradle.build.event.*</span><br><span class="line">import org.gradle.buildinit.plugins.*</span><br><span class="line">import org.gradle.buildinit.tasks.*</span><br><span class="line">import org.gradle.caching.*</span><br><span class="line">import org.gradle.caching.configuration.*</span><br><span class="line">import org.gradle.caching.http.*</span><br><span class="line">import org.gradle.caching.local.*</span><br><span class="line">import org.gradle.concurrent.*</span><br><span class="line">import org.gradle.external.javadoc.*</span><br><span class="line">import org.gradle.ide.visualstudio.*</span><br><span class="line">import org.gradle.ide.visualstudio.plugins.*</span><br><span class="line">import org.gradle.ide.visualstudio.tasks.*</span><br><span class="line">import org.gradle.ide.xcode.*</span><br><span class="line">import org.gradle.ide.xcode.plugins.*</span><br><span class="line">import org.gradle.ide.xcode.tasks.*</span><br><span class="line">import org.gradle.ivy.*</span><br><span class="line">import org.gradle.jvm.*</span><br><span class="line">import org.gradle.jvm.application.scripts.*</span><br><span class="line">import org.gradle.jvm.application.tasks.*</span><br><span class="line">import org.gradle.jvm.platform.*</span><br><span class="line">import org.gradle.jvm.plugins.*</span><br><span class="line">import org.gradle.jvm.tasks.*</span><br><span class="line">import org.gradle.jvm.tasks.api.*</span><br><span class="line">import org.gradle.jvm.test.*</span><br><span class="line">import org.gradle.jvm.toolchain.*</span><br><span class="line">import org.gradle.language.*</span><br><span class="line">import org.gradle.language.assembler.*</span><br><span class="line">import org.gradle.language.assembler.plugins.*</span><br><span class="line">import org.gradle.language.assembler.tasks.*</span><br><span class="line">import org.gradle.language.base.*</span><br><span class="line">import org.gradle.language.base.artifact.*</span><br><span class="line">import org.gradle.language.base.compile.*</span><br><span class="line">import org.gradle.language.base.plugins.*</span><br><span class="line">import org.gradle.language.base.sources.*</span><br><span class="line">import org.gradle.language.c.*</span><br><span class="line">import org.gradle.language.c.plugins.*</span><br><span class="line">import org.gradle.language.c.tasks.*</span><br><span class="line">import org.gradle.language.coffeescript.*</span><br><span class="line">import org.gradle.language.cpp.*</span><br><span class="line">import org.gradle.language.cpp.plugins.*</span><br><span class="line">import org.gradle.language.cpp.tasks.*</span><br><span class="line">import org.gradle.language.java.*</span><br><span class="line">import org.gradle.language.java.artifact.*</span><br><span class="line">import org.gradle.language.java.plugins.*</span><br><span class="line">import org.gradle.language.java.tasks.*</span><br><span class="line">import org.gradle.language.javascript.*</span><br><span class="line">import org.gradle.language.jvm.*</span><br><span class="line">import org.gradle.language.jvm.plugins.*</span><br><span class="line">import org.gradle.language.jvm.tasks.*</span><br><span class="line">import org.gradle.language.nativeplatform.*</span><br><span class="line">import org.gradle.language.nativeplatform.tasks.*</span><br><span class="line">import org.gradle.language.objectivec.*</span><br><span class="line">import org.gradle.language.objectivec.plugins.*</span><br><span class="line">import org.gradle.language.objectivec.tasks.*</span><br><span class="line">import org.gradle.language.objectivecpp.*</span><br><span class="line">import org.gradle.language.objectivecpp.plugins.*</span><br><span class="line">import org.gradle.language.objectivecpp.tasks.*</span><br><span class="line">import org.gradle.language.plugins.*</span><br><span class="line">import org.gradle.language.rc.*</span><br><span class="line">import org.gradle.language.rc.plugins.*</span><br><span class="line">import org.gradle.language.rc.tasks.*</span><br><span class="line">import org.gradle.language.routes.*</span><br><span class="line">import org.gradle.language.scala.*</span><br><span class="line">import org.gradle.language.scala.plugins.*</span><br><span class="line">import org.gradle.language.scala.tasks.*</span><br><span class="line">import org.gradle.language.scala.toolchain.*</span><br><span class="line">import org.gradle.language.swift.*</span><br><span class="line">import org.gradle.language.swift.plugins.*</span><br><span class="line">import org.gradle.language.swift.tasks.*</span><br><span class="line">import org.gradle.language.twirl.*</span><br><span class="line">import org.gradle.maven.*</span><br><span class="line">import org.gradle.model.*</span><br><span class="line">import org.gradle.nativeplatform.*</span><br><span class="line">import org.gradle.nativeplatform.platform.*</span><br><span class="line">import org.gradle.nativeplatform.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.tasks.*</span><br><span class="line">import org.gradle.nativeplatform.test.*</span><br><span class="line">import org.gradle.nativeplatform.test.cpp.*</span><br><span class="line">import org.gradle.nativeplatform.test.cpp.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.test.cunit.*</span><br><span class="line">import org.gradle.nativeplatform.test.cunit.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.test.cunit.tasks.*</span><br><span class="line">import org.gradle.nativeplatform.test.googletest.*</span><br><span class="line">import org.gradle.nativeplatform.test.googletest.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.test.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.test.tasks.*</span><br><span class="line">import org.gradle.nativeplatform.test.xctest.*</span><br><span class="line">import org.gradle.nativeplatform.test.xctest.plugins.*</span><br><span class="line">import org.gradle.nativeplatform.test.xctest.tasks.*</span><br><span class="line">import org.gradle.nativeplatform.toolchain.*</span><br><span class="line">import org.gradle.nativeplatform.toolchain.plugins.*</span><br><span class="line">import org.gradle.normalization.*</span><br><span class="line">import org.gradle.platform.base.*</span><br><span class="line">import org.gradle.platform.base.binary.*</span><br><span class="line">import org.gradle.platform.base.component.*</span><br><span class="line">import org.gradle.platform.base.plugins.*</span><br><span class="line">import org.gradle.play.*</span><br><span class="line">import org.gradle.play.distribution.*</span><br><span class="line">import org.gradle.play.platform.*</span><br><span class="line">import org.gradle.play.plugins.*</span><br><span class="line">import org.gradle.play.plugins.ide.*</span><br><span class="line">import org.gradle.play.tasks.*</span><br><span class="line">import org.gradle.play.toolchain.*</span><br><span class="line">import org.gradle.plugin.devel.*</span><br><span class="line">import org.gradle.plugin.devel.plugins.*</span><br><span class="line">import org.gradle.plugin.devel.tasks.*</span><br><span class="line">import org.gradle.plugin.management.*</span><br><span class="line">import org.gradle.plugin.use.*</span><br><span class="line">import org.gradle.plugins.ear.*</span><br><span class="line">import org.gradle.plugins.ear.descriptor.*</span><br><span class="line">import org.gradle.plugins.ide.*</span><br><span class="line">import org.gradle.plugins.ide.api.*</span><br><span class="line">import org.gradle.plugins.ide.eclipse.*</span><br><span class="line">import org.gradle.plugins.ide.idea.*</span><br><span class="line">import org.gradle.plugins.javascript.base.*</span><br><span class="line">import org.gradle.plugins.javascript.coffeescript.*</span><br><span class="line">import org.gradle.plugins.javascript.envjs.*</span><br><span class="line">import org.gradle.plugins.javascript.envjs.browser.*</span><br><span class="line">import org.gradle.plugins.javascript.envjs.http.*</span><br><span class="line">import org.gradle.plugins.javascript.envjs.http.simple.*</span><br><span class="line">import org.gradle.plugins.javascript.jshint.*</span><br><span class="line">import org.gradle.plugins.javascript.rhino.*</span><br><span class="line">import org.gradle.plugins.signing.*</span><br><span class="line">import org.gradle.plugins.signing.signatory.*</span><br><span class="line">import org.gradle.plugins.signing.signatory.pgp.*</span><br><span class="line">import org.gradle.plugins.signing.type.*</span><br><span class="line">import org.gradle.plugins.signing.type.pgp.*</span><br><span class="line">import org.gradle.process.*</span><br><span class="line">import org.gradle.swiftpm.*</span><br><span class="line">import org.gradle.swiftpm.plugins.*</span><br><span class="line">import org.gradle.swiftpm.tasks.*</span><br><span class="line">import org.gradle.testing.base.*</span><br><span class="line">import org.gradle.testing.base.plugins.*</span><br><span class="line">import org.gradle.testing.jacoco.plugins.*</span><br><span class="line">import org.gradle.testing.jacoco.tasks.*</span><br><span class="line">import org.gradle.testing.jacoco.tasks.rules.*</span><br><span class="line">import org.gradle.testkit.runner.*</span><br><span class="line">import org.gradle.vcs.*</span><br><span class="line">import org.gradle.vcs.git.*</span><br><span class="line">import org.gradle.work.*</span><br><span class="line">import org.gradle.workers.*</span><br></pre></td></tr></table></figure><h2 id="导入依赖">导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath group: &#x27;commons-codec&#x27;, name: &#x27;commons-codec&#x27;, version: &#x27;1.2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Logging">Logging</h2><h2 id="日志级别">日志级别</h2><table><thead><tr><th>日志级别</th><th>说明</th></tr></thead><tbody><tr><td>ERROR</td><td>错误讯息</td></tr><tr><td>QUIET</td><td>重要信息消息</td></tr><tr><td>WARNING</td><td>警告讯息</td></tr><tr><td>LIFECYCLE</td><td>进度信息消息</td></tr><tr><td>INFO</td><td>信息讯息</td></tr><tr><td>DEBUG</td><td>调试信息</td></tr></tbody></table><h2 id="选择日志级别">选择日志级别</h2><p>可以通过命令行选项或者gradle.properties文件配置</p><table><thead><tr><th>选项</th><th>输出日志级别</th></tr></thead><tbody><tr><td>没有记录选项</td><td>LIFECYCLE及更高</td></tr><tr><td>-q or–quiet</td><td>QUIET及更高</td></tr><tr><td>-w or --warn</td><td>WARNING及更高</td></tr><tr><td>-i or --info</td><td>INFO及更高</td></tr><tr><td>-d or --debug</td><td>DEBUG及更高版本（即所有日志消息）</td></tr></tbody></table><h2 id="Stacktrace命令行选项">Stacktrace命令行选项</h2><p>-s or --stacktrace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打印简洁的堆栈跟踪信息，推荐使用</span><br></pre></td></tr></table></figure><p>-S or --full-stacktrace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打印完整的堆栈跟踪信息。</span><br></pre></td></tr></table></figure><h2 id="编写日志">编写日志</h2><h3 id="使用stdout编写日志消息">使用stdout编写日志消息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println &#x27;A message which is logged at QUIET level&#x27;</span><br></pre></td></tr></table></figure><h3 id="编写自己的日志消息">编写自己的日志消息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logger.quiet(&#x27;An info log message which is always logged.&#x27;)</span><br><span class="line">logger.error(&#x27;An error log message.&#x27;)</span><br><span class="line">logger.warn(&#x27;A warning log message.&#x27;)</span><br><span class="line">logger.lifecycle(&#x27;A lifecycle info log message.&#x27;)</span><br><span class="line">logger.info(&#x27;An info log message.&#x27;)</span><br><span class="line">logger.debug(&#x27;A debug log message.&#x27;)</span><br><span class="line">logger.trace(&#x27;A trace log message.&#x27;) // Gradle never logs TRACE level logs</span><br><span class="line"></span><br><span class="line">// 用占位符写一条日志消息</span><br><span class="line">logger.info(&#x27;A &#123;&#125; log message&#x27;, &#x27;info&#x27;)</span><br></pre></td></tr></table></figure><p>logger构建脚本提供了一个属性，该脚本是Logger的实例。该接口扩展了SLF4JLogger接口，并向其中添加了一些Gradle特定的方法</p><h2 id="使用SLF4J写入日志消息">使用SLF4J写入日志消息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import org.slf4j.LoggerFactory</span><br><span class="line"></span><br><span class="line">def slf4jLogger = LoggerFactory.getLogger(&#x27;some-logger&#x27;)</span><br><span class="line">slf4jLogger.info(&#x27;An info log message logged using SLF4j&#x27;)</span><br></pre></td></tr></table></figure><h2 id="构建">构建</h2><h2 id="构建生命周期">构建生命周期</h2><p>Gradle的核心是一种基于依赖性的编程语言，这意味着你可以定义任务和任务之间的依赖关系。 Gradle保证这些任务按照其依赖关系的顺序执行，并且每个任务只执行一次。 这些任务形成一个定向无环图。</p><h3 id="构建阶段">构建阶段</h3><p>Gradle构建具有三个不同的阶段。</p><ul><li>初始化</li></ul><p>Gradle支持单项目和多项目构建。在初始化阶段，Gradle决定要参与构建的项目，并为每个项目创建一个Project实例。</p><ul><li>配置</li></ul><p>在此阶段，将配置项目对象。执行作为构建一部分的 所有 项目的构建脚本。</p><ul><li>执行</li></ul><p>Gradle确定要在配置阶段创建和配置的任务子集。子集由传递给gradle命令的任务名称参数和当前目录确定。然后Gradle执行每个选定的任务。</p><h3 id="设置文件">设置文件</h3><p>默认名称是settings.gradle<br>项目构建在多项目层次结构的根项目中必须具有一个settings.gradle文件。<br>对于单项目构建，设置文件是可选的</p><h3 id="初始化">初始化</h3><p>查找settings.gradle文件判断是否多项目<br>没有settings.gradle或settings.gradle没有多项目配置则为单项目<br>例：将test任务添加到每个具有特定属性集的项目<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    afterEvaluate &#123; project -&gt;</span><br><span class="line">        if (project.hasTests) &#123;</span><br><span class="line">            println &quot;Adding test task to $project&quot;</span><br><span class="line">            project.task(&#x27;test&#x27;) &#123;</span><br><span class="line">                doLast &#123;</span><br><span class="line">                    println &quot;Running tests for $project&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 gradle -q test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q test</span><br><span class="line">Adding test task to project &#x27;:project-a&#x27;</span><br><span class="line">Running tests for project &#x27;:project-a&#x27;</span><br></pre></td></tr></table></figure><h2 id="初始化脚本">初始化脚本</h2><p>初始化脚本与Gradle中的其他脚本相似。但是，这些脚本在构建开始之前运行。初始化脚本不能访问buildSrc项目中的类。</p><h3 id="使用初始化脚本">使用初始化脚本</h3><p>有几种使用初始化脚本的方法：</p><ul><li>在命令行中指定一个文件。命令行选项是-I或-init-script，后面是脚本的路径。 命令行选项可以出现一次以上，每次都会添加另一个 init 脚本。 如果命令行上指定的文件不存在，编译将失败。</li><li>在 <em>USER_HOME</em> /.gradle/目录中放置一个名为init.gradle（或init.gradle.ktsKotlin）的文件。</li><li>在 <em>USER_HOME</em> /.gradle/init.d/目录中放置一个以.gradle（或.init.gradle.ktsKotlin）结尾的文件。</li><li>在Gradle发行版的 <em>GRADLE_HOME</em> /init.d/目录中放置一个以.gradle（或.init.gradle.ktsKotlin）结尾的文件。这使您可以打包包含一些自定义构建逻辑和插件的自定义Gradle发行版。您可以将其与Gradle Wrapper结合使用，以使自定义逻辑可用于企业中的所有内部版本。</li></ul><p>如果发现一个以上的初始化脚本，它们将按照上面指定的顺序依次执行。<br>示例<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task showRepos &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println &quot;All repos:&quot;</span><br><span class="line">        println repositories.collect &#123; it.name &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行任务：<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311866070-6d34d023-4334-467a-8478-1c96e37ef0af.webp#clientId=u19927788-d758-4&amp;from=paste&amp;id=u6c70e8d7&amp;originHeight=182&amp;originWidth=1512&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27714&amp;status=done&amp;style=none&amp;taskId=ubd49e819-efca-4c13-9309-11de858d587&amp;title=" alt="image.jpg"></p><h3 id="初始化脚本里面依赖添加依赖">初始化脚本里面依赖添加依赖</h3><p>init.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">initscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;org.apache.commons:commons-math:2.0&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项目">多项目</h2><p>可在settings.gradle文件中设置多个项目关系，如下项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">│   ...</span><br><span class="line">│   └── build.gradle</span><br><span class="line">└── settings.gradle</span><br></pre></td></tr></table></figure><p>settings.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = &#x27;basic-multiproject&#x27; //根项目名</span><br><span class="line">include &#x27;app&#x27; //子项目</span><br></pre></td></tr></table></figure><p>子项目间依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(&quot;:shared&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建优化">构建优化</h2><p>关于构建优化可查阅<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fdengzhenli%2Fgradle-user-guide-zh%2Fblob%2Fmaster%2Fmd%2F%25E6%2594%25B9%25E5%2596%2584Gradle%25E6%259E%2584%25E5%25BB%25BA%25E7%259A%2584%25E6%2580%25A7%25E8%2583%25BD.md">构建优化</a></p><h2 id="依赖">依赖</h2><h2 id="configurations">configurations</h2><p>设置configurations 配置依赖信息<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    // 针对需要组件API的消费者的配置</span><br><span class="line">    exposedApi &#123;</span><br><span class="line">        // canBeResolved 为true 则为可解析配置，为消费者</span><br><span class="line">        canBeResolved = false</span><br><span class="line">        // canBeConsumed 为true 则为消费析配置，为生产者</span><br><span class="line">        canBeConsumed = true</span><br><span class="line">    &#125;</span><br><span class="line">    // 为需要实现该组件的消费者提供的配置。</span><br><span class="line">    exposedRuntime &#123;</span><br><span class="line">        canBeResolved = false</span><br><span class="line">        canBeConsumed = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖方式">依赖方式</h2><h3 id="模块依赖">模块依赖</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    runtimeOnly group: &#x27;org.springframework&#x27;, name: &#x27;spring-core&#x27;, version: &#x27;2.5&#x27;</span><br><span class="line">    runtimeOnly &#x27;org.springframework:spring-core:2.5&#x27;,</span><br><span class="line">            &#x27;org.springframework:spring-aop:2.5&#x27;</span><br><span class="line">    runtimeOnly(</span><br><span class="line">        [group: &#x27;org.springframework&#x27;, name: &#x27;spring-core&#x27;, version: &#x27;2.5&#x27;],</span><br><span class="line">        [group: &#x27;org.springframework&#x27;, name: &#x27;spring-aop&#x27;, version: &#x27;2.5&#x27;]</span><br><span class="line">    )</span><br><span class="line">    runtimeOnly(&#x27;org.hibernate:hibernate:3.0.5&#x27;) &#123;</span><br><span class="line">        transitive = true</span><br><span class="line">    &#125;</span><br><span class="line">    runtimeOnly group: &#x27;org.hibernate&#x27;, name: &#x27;hibernate&#x27;, version: &#x27;3.0.5&#x27;, transitive: true</span><br><span class="line">    runtimeOnly(group: &#x27;org.hibernate&#x27;, name: &#x27;hibernate&#x27;, version: &#x27;3.0.5&#x27;) &#123;</span><br><span class="line">        transitive = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件依赖">文件依赖</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    runtimeOnly files(&#x27;libs/a.jar&#x27;, &#x27;libs/b.jar&#x27;)</span><br><span class="line">    runtimeOnly fileTree(&#x27;libs&#x27;) &#123; include &#x27;*.jar&#x27; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目依赖">项目依赖</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(&#x27;:shared&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖方式-2">依赖方式</h2><ul><li>compileOnly —用于编译生产代码所必需的依赖关系，但不应该属于运行时类路径的一部分</li><li>implementation（取代compile）-用于编译和运行时</li><li>runtimeOnly（取代runtime）-仅在运行时使用，不用于编译</li><li>testCompileOnly—与compileOnly测试相同</li><li>testImplementation —测试相当于 implementation</li><li>testRuntimeOnly —测试相当于 runtimeOnly</li></ul><h2 id="repositories">repositories</h2><p>流行的公共存储库包括Maven Central， Bintray JCenter和Google Android存储库。<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311866076-0eb5d413-ec5c-40d4-b8d4-b4fd642c5e28.webp#clientId=u19927788-d758-4&amp;from=paste&amp;id=u725de973&amp;originHeight=976&amp;originWidth=1228&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18832&amp;status=done&amp;style=none&amp;taskId=ucb5d579f-b85f-4c53-8251-d96715ca466&amp;title=" alt="image.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    </span><br><span class="line">    mavenCentral() // Maven Central存储库  </span><br><span class="line">    jcenter() // JCenter Maven存储库</span><br><span class="line">    google() // Google Maven存储库</span><br><span class="line">        </span><br><span class="line">    mavenLocal()   // 将本地Maven缓存添加为存储库（不推荐）</span><br><span class="line">    //flat存储库解析器</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs &#x27;lib&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs &#x27;lib1&#x27;, &#x27;lib2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //添加定制的Maven仓库</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;http://repo.mycompany.com/maven2&quot;</span><br><span class="line">        // 为JAR文件添加附加的Maven存储库</span><br><span class="line">        artifactUrls &quot;http://repo.mycompany.com/jars&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //Ivy</span><br><span class="line">     ivy &#123;</span><br><span class="line">        url &quot;http://repo.mycompany.com/repo&quot;</span><br><span class="line">        layout &quot;maven&quot;  // 有效的命名布局值是&#x27;gradle&#x27;（默认值）&#x27;maven&#x27;和&#x27;ivy&#x27;。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明存储库过滤器">声明存储库过滤器</h3><p>声明存储库内容<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;https://repo.mycompany.com/maven2&quot;</span><br><span class="line">        content &#123;</span><br><span class="line">            // this repository *only* contains artifacts with group &quot;my.company&quot;</span><br><span class="line">            includeGroup &quot;my.company&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    jcenter &#123;</span><br><span class="line">        content &#123;</span><br><span class="line">            // this repository contains everything BUT artifacts with group starting with &quot;my.company&quot;</span><br><span class="line">            excludeGroupByRegex &quot;my\\.company.*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，存储库包含所有内容，不包含任何内容：</p><ul><li>如果声明include，那么它排除了一切 include 以外的内容。</li><li>如果声明exclude，则它将包括除exclude之外的所有内容。</li><li>如果声明include和exclude，则它仅包括显式包括但不排除的内容。</li></ul><h3 id="分割快照和发行版">分割快照和发行版</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;https://repo.mycompany.com/releases&quot;</span><br><span class="line">        mavenContent &#123;</span><br><span class="line">            releasesOnly()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;https://repo.mycompany.com/snapshots&quot;</span><br><span class="line">        mavenContent &#123;</span><br><span class="line">            snapshotsOnly()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持的元数据源">支持的元数据源</h3><p>受支持的元数据源</p><table><thead><tr><th>元数据源</th><th>描述</th><th>排序</th><th>Maven</th><th>Ivy/flat dir</th></tr></thead><tbody><tr><td>gradleMetadata()</td><td>寻找Gradle.module文件</td><td>1</td><td>是</td><td>是</td></tr><tr><td>mavenPom()</td><td>查找Maven.pom文件</td><td>2</td><td>是</td><td>是</td></tr><tr><td>ivyDescriptor()</td><td>查找ivy.xml文件</td><td>2</td><td>没有</td><td>是</td></tr><tr><td>artifact()</td><td>直接寻找artifact</td><td>3</td><td>是</td><td>是</td></tr></tbody></table><p>从Gradle 5.3开始，解析元数据文件（无论是Ivy还是Maven）时，Gradle将寻找一个标记，指示存在匹配的Gradle Module元数据文件。如果找到它，它将代替Ivy或Maven文件使用。<br>从Gradle5.6开始，您可以通过添加ignoreGradleMetadataRedirection()到metadataSources声明来禁用此行为。<br>例.不使用gradle元数据重定向的Maven存储库<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;http://repo.mycompany.com/repo&quot;</span><br><span class="line">        metadataSources &#123;</span><br><span class="line">            mavenPom()</span><br><span class="line">            artifact()</span><br><span class="line">            ignoreGradleMetadataRedirection()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GAV坐标">GAV坐标</h2><p>GAV坐标一般指group，artifact，version</p><h2 id="变体">变体</h2><p>构建变体是针对不同环境的配置，例如android开发中一般有debug和release两种变体<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712311866073-b0528277-f6df-44a7-a188-bed75816f6b2.webp#clientId=u19927788-d758-4&amp;from=paste&amp;id=ub26703d5&amp;originHeight=360&amp;originWidth=816&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12510&amp;status=done&amp;style=none&amp;taskId=u87313fe8-6ec7-47b3-8acb-647f655cb23&amp;title=" alt="image.jpg"></p><h3 id="声明功能变体">声明功能变体</h3><p>可以通过应用<code>java</code>或<code>java-library</code>插件来声明功能变体。以下代码说明了如何声明名为<code>mongodbSupport</code>的功能：<br>示例1.声明一个功能变量<br><code>Groovy``Kotlin</code><br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">group = &#x27;org.gradle.demo&#x27;</span><br><span class="line">version = &#x27;1.0&#x27;</span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    registerFeature(&#x27;mongodbSupport&#x27;) &#123;</span><br><span class="line">        usingSourceSet(sourceSets.main)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元数据">元数据</h2><p>从存储库中提取的每个模块都有与之关联的元数据，例如其组，名称，版本以及它提供的带有工件和依赖项的不同变体<br>可配置组件元数据规则的示例<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class TargetJvmVersionRule implements ComponentMetadataRule &#123;</span><br><span class="line">    final Integer jvmVersion</span><br><span class="line">    @Inject TargetJvmVersionRule(Integer jvmVersion) &#123;</span><br><span class="line">        this.jvmVersion = jvmVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Inject ObjectFactory getObjects() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    void execute(ComponentMetadataContext context) &#123;</span><br><span class="line">        context.details.withVariant(&quot;compile&quot;) &#123;</span><br><span class="line">            attributes &#123;</span><br><span class="line">                attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, jvmVersion)</span><br><span class="line">                attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    components &#123;</span><br><span class="line">        withModule(&quot;commons-io:commons-io&quot;, TargetJvmVersionRule) &#123;</span><br><span class="line">            params(7)</span><br><span class="line">        &#125;</span><br><span class="line">        withModule(&quot;commons-collections:commons-collections&quot;, TargetJvmVersionRule) &#123;</span><br><span class="line">            params(8)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    implementation(&quot;commons-io:commons-io:2.6&quot;)</span><br><span class="line">    implementation(&quot;commons-collections:commons-collections:3.2.2&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过以下方法进行修改变体：</p><ul><li>allVariants：修改组件的所有变体</li><li>withVariant(name)：修改由名称标识的单个变体</li><li>addVariant(name)或addVariant(name, base)：从头开始 或通过 复制 现有变体的详细信息（基础）向组件添加新变体</li></ul><p>可以调整每个变体的以下详细信息：</p><ul><li>标识变体的属性-attributes {}块</li><li>该变体提供的功能-withCapabilities { }块</li><li>变体的依赖项，包括丰富的版本-withDependencies {}块</li><li>变体的依赖关系约束，包括丰富版本-withDependencyConstraints {}块</li><li>构成变体实际内容的已发布文件的位置-withFiles { }块</li></ul><h2 id="平台">平台</h2><h3 id="使用平台">使用平台</h3><p>获取平台中声明的版本<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // get recommended versions from the platform project</span><br><span class="line">    api platform(project(&#x27;:platform&#x27;))</span><br><span class="line">    // no version required</span><br><span class="line">    api &#x27;commons-httpclient:commons-httpclient&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>platform表示法是一种简写表示法，实际上在后台执行了一些操作：</p><ul><li>它将org.gradle.category属性设置为platform，这意味着Gradle将选择依赖项的 平台 组件。</li><li>它默认设置endorseStrictVersions行为， 这意味着如果平台声明了严格的依赖关系，则将强制执行它们。</li></ul><p>这意味着默认情况下，对平台的依赖项会触发该平台中定义的所有严格版本的继承， 这对于平台作者确保所有使用者在依赖项的版本方面都遵循自己的决定很有用。 可以通过显式调用doNotEndorseStrictVersions方法来将其关闭。<br>例.依靠一个BOM导入其依赖约束<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // import a BOM</span><br><span class="line">    implementation platform(&#x27;org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE&#x27;)</span><br><span class="line"></span><br><span class="line">    // define dependencies without versions</span><br><span class="line">    implementation &#x27;com.google.code.gson:gson&#x27;</span><br><span class="line">    implementation &#x27;dom4j:dom4j&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入BOM，确保其定义的版本覆盖找到的任何其他版本<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // import a BOM. The versions used in this file will override any other version found in the graph</span><br><span class="line">    implementation enforcedPlatform(&#x27;org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE&#x27;)</span><br><span class="line"></span><br><span class="line">    // define dependencies without versions</span><br><span class="line">    implementation &#x27;com.google.code.gson:gson&#x27;</span><br><span class="line">    implementation &#x27;dom4j:dom4j&#x27;</span><br><span class="line"></span><br><span class="line">    // this version will be overridden by the one found in the BOM</span><br><span class="line">    implementation &#x27;org.codehaus.groovy:groovy:1.8.6&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Capability">Capability</h2><h3 id="声明组件的capability">声明组件的capability</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    apiElements &#123;</span><br><span class="line">        outgoing &#123;</span><br><span class="line">            capability(&quot;com.acme:my-library:1.0&quot;)</span><br><span class="line">            capability(&quot;com.other:module:1.1&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    runtimeElements &#123;</span><br><span class="line">        outgoing &#123;</span><br><span class="line">            capability(&quot;com.acme:my-library:1.0&quot;)</span><br><span class="line">            capability(&quot;com.other:module:1.1&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决冲突">解决冲突</h3><p>按Capability（能力）解决冲突，（若存在相同能力的依赖性会失败）<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@CompileStatic</span><br><span class="line">class AsmCapability implements ComponentMetadataRule &#123;</span><br><span class="line">    void execute(ComponentMetadataContext context) &#123;</span><br><span class="line">        context.details.with &#123;</span><br><span class="line">            if (id.group == &quot;asm&quot; &amp;&amp; id.name == &quot;asm&quot;) &#123;</span><br><span class="line">                allVariants &#123;</span><br><span class="line">                    it.withCapabilities &#123;</span><br><span class="line">                        // Declare that ASM provides the org.ow2.asm:asm capability, but with an older version</span><br><span class="line">                        it.addCapability(&quot;org.ow2.asm&quot;, &quot;asm&quot;, id.version)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个带有日志框架隐式冲突的构建文件<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // Activate the &quot;LoggingCapability&quot; rule</span><br><span class="line">    components.all(LoggingCapability)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CompileStatic</span><br><span class="line">class LoggingCapability implements ComponentMetadataRule &#123;</span><br><span class="line">    final static Set&lt;String&gt; LOGGING_MODULES = [&quot;log4j&quot;, &quot;log4j-over-slf4j&quot;] as Set&lt;String&gt;</span><br><span class="line"></span><br><span class="line">    void execute(ComponentMetadataContext context) &#123;</span><br><span class="line">        context.details.with &#123;</span><br><span class="line">            if (LOGGING_MODULES.contains(id.name)) &#123;</span><br><span class="line">                allVariants &#123;</span><br><span class="line">                    it.withCapabilities &#123;</span><br><span class="line">                        // Declare that both log4j and log4j-over-slf4j provide the same capability</span><br><span class="line">                        it.addCapability(&quot;log4j&quot;, &quot;log4j&quot;, id.version)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="版本">版本</h2><h3 id="版本规则">版本规则</h3><p>Gradle支持不同的版本字符串声明方式：</p><ul><li>一个确切的版本：比如<code>1.3</code>，<code>1.3.0-beta3</code>，<code>1.0-20150201.131010-1</code></li><li>一个Maven风格的版本范围：例如<code>[1.0,)</code>，<code>[1.1, 2.0)</code>，<code>(1.2, 1.5]</code><ul><li><code>[</code>和<code>]</code>的符号表示包含性约束; <code>(</code>和<code>)</code>表示排他性约束。</li><li>当上界或下界缺失时，该范围没有上界或下界。</li><li>符号<code>]</code>可以被用来代替<code>(</code>用于排他性下界，<code>[</code>代替<code>)</code>用于排他性上界。例如<code>]1.0, 2.0[</code></li></ul></li><li>前缀版本范围：例如<code>1.+</code>，<code>1.3.+</code><ul><li>仅包含与<code>+</code>之前部分完全匹配的版本。</li><li><code>+</code>本身的范围将包括任何版本。</li></ul></li><li>一个latest-status版本：例如latest.integration，latest.release</li><li>Maven的SNAPSHOT版本标识符：例如1.0-SNAPSHOT，1.4.9-beta1-SNAPSHOT</li></ul><h3 id="版本排序">版本排序</h3><ul><li>每个版本均分为其组成的“部分”：<ul><li>字符[. - _ +]用于分隔版本的不同“部分”。</li><li>同时包含数字和字母的任何部分都将分为以下各个部分： <code>1a1 == 1.a.1</code></li><li>仅比较版本的各个部分。实际的分隔符并不重要：<code>1.a.1 == 1-a+1 == 1.a-1 == 1a1</code></li></ul></li><li>使用以下规则比较2个版本的等效部分：<ul><li>如果两个部分都是数字，则最高数字值 较高 ：<code>1.1&lt;1.2</code></li><li>如果一个部分是数值，则认为它 高于 非数字部分：<code>1.a&lt;1.1</code></li><li>如果两个部分都不是数字，则按字母顺序比较，区分大小写：<code>1.A&lt; 1.B&lt; 1.a&lt;1.b</code></li><li>有额外数字部分的版本被认为比没有数字部分的版本高：<code>1.1&lt;1.1.0</code></li><li>带有额外的非数字部分的版本被认为比没有数字部分的版本低：<code>1.1.a&lt;1.1</code></li></ul></li><li>某些字符串值出于排序目的具有特殊含义：<ul><li>字符串dev被认为比任何其他字符串部分低：<code>1.0-dev&lt; 1.0-alpha&lt; 1.0-rc</code>。</li><li>字符串rc、release和final被认为比任何其他字符串部分都高（按顺序排列：<code>1.0-zeta&lt; 1.0-rc&lt; 1.0-release&lt; 1.0-final&lt; 1.0</code>。</li><li>字符串SNAPSHOT没有特殊意义，和其他字符串部分一样按字母顺序排序：<code>1.0-alpha&lt; 1.0-SNAPSHOT&lt; 1.0-zeta&lt; 1.0-rc&lt; 1.0</code>。</li><li>数值快照版本没有特殊意义，和其他数值部分一样进行排序：<code>1.0&lt; 1.0-20150201.121010-123&lt; 1.1</code>。</li></ul></li></ul><p>简单来说:数字&gt;final&gt;release&gt;rc&gt;字母&gt;dev</p><h3 id="声明没有版本的依赖">声明没有版本的依赖</h3><p>对于较大的项目，建议的做法是声明没有版本的依赖项， 并将依赖项约束 用于版本声明。 优势在于，依赖关系约束使您可以在一处管理所有依赖关系的版本，包括可传递的依赖关系。<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.springframework:spring-web&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    constraints &#123;</span><br><span class="line">        implementation &#x27;org.springframework:spring-web:5.0.2.RELEASE&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖方式-3">依赖方式</h3><h4 id="strictly">strictly</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">与该版本符号不匹配的任何版本将被排除。这是最强的版本声明。</span><br><span class="line">在声明的依赖项上，strictly可以降级版本。</span><br><span class="line">在传递依赖项上，如果无法选择此子句可接受的版本，将导致依赖项解析失败。</span><br><span class="line">有关详细信息，请参见覆盖依赖项版本。</span><br><span class="line">该术语支持动态版本。</span><br></pre></td></tr></table></figure><p>定义后，将覆盖先前的require声明并清除之前的 reject。</p><h4 id="require">require</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表示所选版本不能低于require可接受的版本，但可以通过冲突解决方案提高，即使更高版本具有排他性更高的界限。</span><br><span class="line">这就是依赖项上的直接版本所转换的内容。该术语支持动态版本。</span><br></pre></td></tr></table></figure><p>定义后，将覆盖先前的strictly声明并清除之前的 reject。</p><h4 id="prefer">prefer</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个非常软的版本声明。仅当对该模块的版本没有更强的非动态观点时，才适用。</span><br><span class="line">该术语不支持动态版本。</span><br></pre></td></tr></table></figure><p>定义可以补充strictly或require。<br>在级别层次结构之外还有一个附加术语：</p><h4 id="reject">reject</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">声明模块不接受特定版本。如果唯一的可选版本也被拒绝，这将导致依赖项解析失败。该术语支持动态版本。</span><br></pre></td></tr></table></figure><h3 id="动态版本">动态版本</h3><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java-library&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.springframework:spring-web:5.+&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本快照">版本快照</h3><p>声明一个版本变化的依赖<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java-library&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &#x27;https://repo.spring.io/snapshot/&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.springframework:spring-web:5.0.3.BUILD-SNAPSHOT&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以编程方式控制依赖项缓存">以编程方式控制依赖项缓存</h3><p>您可以使用ResolutionStrategy 对配置进行编程来微调缓存的某些方面。 如果您想永久更改设置，则编程方式非常有用。<br>默认情况下，Gradle将动态版本缓存24小时。 要更改Gradle将解析后的版本缓存为动态版本的时间，请使用：<br>例.动态版本缓存控制<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.cacheDynamicVersionsFor 10, &#x27;minutes&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，Gradle会将更改的模块缓存24小时。 要更改Gradle将为更改的模块缓存元数据和工件的时间，请使用：<br>例.改变模块缓存控制<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.cacheChangingModulesFor 4, &#x27;hours&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁定配置">锁定配置</h3><p>锁定特定配置<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    compileClasspath &#123;</span><br><span class="line">        resolutionStrategy.activateDependencyLocking()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁定所有配置<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencyLocking &#123;</span><br><span class="line">    lockAllConfigurations()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解锁特定配置<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    compileClasspath &#123;</span><br><span class="line">        resolutionStrategy.deactivateDependencyLocking()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁定buildscript类路径配置">锁定buildscript类路径配置</h4><p>如果将插件应用于构建，则可能还需要利用依赖锁定。为了锁定用于脚本插件的classpath配置，请执行以下操作：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    configurations.classpath &#123;</span><br><span class="line">        resolutionStrategy.activateDependencyLocking()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用锁定模式微调依赖项锁定行为">使用锁定模式微调依赖项锁定行为</h4><p>虽然默认锁定模式的行为如上所述，但是还有其他两种模式可用：</p><ul><li>Strict模式 ：在该模式下，除了上述验证外，如果被标记为锁定的配置没有与之相关联的锁定状态，则依赖性锁定将失败。</li><li>Lenient模式：在这种模式下，依存关系锁定仍将固定动态版本，但除此之外，依赖解析的变化不再是错误。</li></ul><p>锁定模式可以从dependencyLocking块中进行控制，如下所示：<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencyLocking &#123;</span><br><span class="line">    lockMode = LockMode.STRICT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本冲突">版本冲突</h3><p>用force强制执行一个依赖版本<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.apache.httpcomponents:httpclient:4.5.4&#x27;</span><br><span class="line">    implementation(&#x27;commons-codec:commons-codec:1.9&#x27;) &#123;</span><br><span class="line">        force = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排除特定依赖声明的传递依赖<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(&#x27;commons-beanutils:commons-beanutils:1.9.4&#x27;) &#123;</span><br><span class="line">        exclude group: &#x27;commons-collections&#x27;, module: &#x27;commons-collections&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本冲突时失败<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        failOnVersionConflict()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用动态版本时失败<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        failOnDynamicVersions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变版本时失败<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        failOnChangingVersions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析无法再现时失败<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        failOnNonReproducibleResolution()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件">插件</h2><p>插件作用：将插件应用于项目可以使插件扩展项目的功能。它可以执行以下操作：</p><ul><li>扩展Gradle模型（例如，添加可以配置的新DSL元素）</li><li>根据约定配置项目（例如，添加新任务或配置合理的默认值）</li><li>应用特定的配置（例如，添加组织存储库或强制执行标准） 简单来说，插件可以拓展项目功能，如任务，依赖，拓展属性，约束</li></ul><h2 id="插件类型">插件类型</h2><ul><li>二进制插件 ：通过实现插件接口以编程方式编写二进制插件，或使用Gradle的一种DSL语言以声明方式编写二进制插件</li><li>脚本插件 ：脚本插件是其他构建脚本，可以进一步配置构建，并通常采用声明式方法来操纵构建</li></ul><p>插件通常起初是脚本插件（因为它们易于编写），然后，随着代码变得更有价值，它被迁移到可以轻松测试并在多个项目或组织之间共享的二进制插件。</p><h2 id="应用插件">应用插件</h2><h3 id="二进制插件">二进制插件</h3><p>实现了org.gradle.api.Plugin接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br></pre></td></tr></table></figure><h4 id="apply-plugin">apply plugin</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#x27;java&#x27;  //id</span><br><span class="line">==</span><br><span class="line">apply plugin: org.gradle.api.plugins.JavaPlugin //类型</span><br><span class="line">==</span><br><span class="line">apply plugin: JavaPlugin          //org.gradle.api.plugins默认导入</span><br></pre></td></tr></table></figure><h4 id="plugins-DSL">plugins DSL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java&#x27; //应用核心插件</span><br><span class="line">    id &#x27;com.jfrog.bintray&#x27; version &#x27;0.4.1&#x27; //应用社区插件</span><br><span class="line">    id &#x27;com.example.hello&#x27; version &#x27;1.0.0&#x27; apply false //使用`apply false`语法告诉Gradle不要将插件应用于当前项目</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚本插件">脚本插件</h3><p>脚本插件会自动解析，可以从本地文件系统或远程位置的脚本中应用。可以将多个脚本插件（任意一种形式）应用于给定目标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from:&#x27;version.gradle&#x27;</span><br></pre></td></tr></table></figure><p>apply可传入内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void apply(Map&lt;String,? options);</span><br><span class="line">void apply(Closure closure);</span><br><span class="line">void apply(Action&lt;? super ObjectConfigurationAction&gt; action);</span><br></pre></td></tr></table></figure><h2 id="定义插件">定义插件</h2><p>定义一个带有ID的buildSrc插件<br>buildSrc / build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;java-gradle-plugin&#x27;</span><br><span class="line">&#125;</span><br><span class="line">gradlePlugin &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">        myPlugins &#123;</span><br><span class="line">            id = &#x27;my-plugin&#x27;</span><br><span class="line">            implementationClass = &#x27;my.MyPlugin&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方插件">第三方插件</h2><p>通过将插件添加到构建脚本classpath中，然后应用该插件，可以将已发布为外部jar文件的二进制插件添加到项目中。可以使用buildscript {}块将外部jar添加到构建脚本classpath中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;com.android.tools.build:gradle:4.0.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件管理">插件管理</h2><p>pluginManagement {}块只能出现在settings.gradle文件中，必须是文件中的第一个块，也可以以settings形式出现在初始化脚本中。<br>settings.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = &#x27;plugin-management&#x27;</span><br></pre></td></tr></table></figure><p>init.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">settingsEvaluated &#123; settings -&gt;</span><br><span class="line">    settings.pluginManagement &#123;</span><br><span class="line">        plugins &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        resolutionStrategy &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        repositories &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：通过pluginManagement管理插件版本。<br>settings.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">  plugins &#123;</span><br><span class="line">        id &#x27;com.example.hello&#x27; version &quot;$&#123;helloPluginVersion&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gradle.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloPluginVersion=1.0.0</span><br></pre></td></tr></table></figure><h2 id="自定义插件存储库">自定义插件存储库</h2><p>要指定自定义插件存储库，请使用repositories {}块其中的pluginManagement {}：<br>settings.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &#x27;../maven-repo&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        ivy &#123;</span><br><span class="line">            url &#x27;../ivy-repo&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java库">java库</h2><p>导入java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin:&#x27;java&#x27;</span><br></pre></td></tr></table></figure><p>自定义路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">         java &#123;</span><br><span class="line">            srcDirs = [&#x27;src&#x27;]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [&#x27;test&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir &#x27;thirdParty/src/main/java&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line"> &#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">     implementation group:&#x27;com.android.support&#x27;,name:&#x27;appcompat-v7&#x27;,version:&#x27;28.0.0&#x27;</span><br><span class="line">     implementation &#x27;com.android.support:appcompat-v7:28.0.0&#x27;</span><br><span class="line">     implementation protect(&#x27;:p&#x27;)</span><br><span class="line">     implementation file(&#x27;libs/ss.jar&#x27;,&#x27;libs/ss2.jar&#x27;)</span><br><span class="line">         </span><br><span class="line">    implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多项目 设置 settings.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;:app&#x27;</span><br><span class="line">rootProject.name = &quot;GradleTest&quot;</span><br></pre></td></tr></table></figure><h2 id="安卓实用">安卓实用</h2><h2 id="设置签名">设置签名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android  &#123;</span><br><span class="line">    signingConfig = &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(&quot;MYKEY.keystore&quot;)</span><br><span class="line">            storePassword &quot;storePassword&quot;</span><br><span class="line">            keyAlias &quot;keyAlias&quot;</span><br><span class="line">            keyPassword &quot;keyPassword&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义输出apk文件名称">自定义输出apk文件名称</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">       variant.outputs.all &#123; output -&gt;</span><br><span class="line">           def fileName = &quot;自定义名称_$&#123;variant.versionName&#125;_release.apk&quot;</span><br><span class="line">           def outFile = output.outputFile</span><br><span class="line">           if (outFile != null &amp;&amp; outFile.name.endsWith(&#x27;.apk&#x27;)) &#123;</span><br><span class="line">               outputFileName = fileName</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="动态AndroidManifest">动态AndroidManifest</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=&quot;paramName&quot; android:value=&quot;$&#123;PARAM_NAME&#125;&quot;&gt;</span><br><span class="line">android &#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            manifestPlaceholders.put(&quot;PARAM_NAME&quot;,&#x27;google&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多渠道">多渠道</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        baidu&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors.all&#123; flavor-&gt;</span><br><span class="line">        manifestPlaceholders.put(&quot;PARAM_NAME&quot;,name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="adb设置">adb设置</h2><p>adb工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    adbOptions&#123;</span><br><span class="line">        timeOutInMs = 5000 //5s超时</span><br><span class="line">        installOptions &#x27;-r&#x27;,&#x27;-s&#x27; //安装指令</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dexOptions">dexOptions</h2><p>dex工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    dexOptions&#123;</span><br><span class="line">        incremental true //增量</span><br><span class="line">        javaMaxHeapSize &#x27;4G&#x27;//dx最大队内存</span><br><span class="line">        jumboMode true //强制开启jumbo跳过65535限制</span><br><span class="line">        preDexLibraries true //提高增量构建速度</span><br><span class="line">            threadCount 1 //dx线程数量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ant">Ant</h2><p>例.将嵌套元素传递给Ant任<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task zip &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        ant.zip(destfile: &#x27;archive.zip&#x27;) &#123;</span><br><span class="line">            fileset(dir: &#x27;src&#x27;) &#123;</span><br><span class="line">                include(name: &#x27;**.xml&#x27;)</span><br><span class="line">                exclude(name: &#x27;**.java&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例.使用Ant类型<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task list &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        def path = ant.path &#123;</span><br><span class="line">            fileset(dir: &#x27;libs&#x27;, includes: &#x27;*.jar&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        path.list().each &#123;</span><br><span class="line">            println it</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例.使用定制的Ant任务<br>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task check &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        ant.taskdef(resource: &#x27;checkstyletask.properties&#x27;) &#123;</span><br><span class="line">            classpath &#123;</span><br><span class="line">                fileset(dir: &#x27;libs&#x27;, includes: &#x27;*.jar&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ant.checkstyle(config: &#x27;checkstyle.xml&#x27;) &#123;</span><br><span class="line">            fileset(dir: &#x27;src&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lint">Lint</h2><p>Lint：android tool目录下的工具，一个代码扫描工具，能够帮助我们识别资源、代码结构存在的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lintOptions</span><br><span class="line">android &#123;</span><br><span class="line">    lintOptions&#123;</span><br><span class="line">        abortOnError true //发生错误时推出Gradle</span><br><span class="line">        absolutePaths true //配置错误输出是否显示绝对路径</span><br><span class="line">        check &#x27;NewApi&#x27;,&#x27;InlinedApi&#x27; // 检查lint check的issue id            </span><br><span class="line">        enable &#x27;NewApi&#x27;,&#x27;InlinedApi&#x27; //启动 lint check的issue id</span><br><span class="line">        disable &#x27;NewApi&#x27;,&#x27;InlinedApi&#x27; //关闭 lint check的issue id</span><br><span class="line">        checkAllWarnings true //检查所有警告issue</span><br><span class="line">        ignoreWarning true //忽略警告检查，默认false</span><br><span class="line">        checkReleaseBuilds true //检查致命错误，默认true</span><br><span class="line">        explainIssues true //错误报告是否包含解释说明，默认true</span><br><span class="line">        htmlOutput new File(&quot;/xx.html&quot;) //html报告输出路径</span><br><span class="line">        htmlReport true // 是否生成html报告，默认true</span><br><span class="line">        lintConfig new File(&quot;/xx.xml&quot;) //lint配置</span><br><span class="line">        noLines true // 输出不带行号 默认true</span><br><span class="line">        quite true // 安静模式</span><br><span class="line">        showAll true //是否显示所有输出，不截断</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考文献">参考文献</h2><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fuserguide.html">Gradle 文档</a></li><li>《Android Gradle权威指南 》（飞雪无情）</li></ul><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;导语&quot;&gt;导语&lt;/h2&gt;
&lt;p&gt;本文在&lt;a href=&quot;https://link.juejin.cn/?target=https%3A%2F%2Fdocs.gradle.org%2Fcurrent%2Fuserguide%2Fwhat_is_gradle.html%</summary>
      
    
    
    
    <category term="工具技巧" scheme="http://www.bojiboqi.fun/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="gradle" scheme="http://www.bojiboqi.fun/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>JMS</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/JMS/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/JMS/</id>
    <published>2024-04-09T02:34:12.722Z</published>
    <updated>2024-04-09T04:01:13.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阅读目录">阅读目录<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3243822474">#</a></h2><ul><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label0">什么是Java消息服务</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label1">为什么需要JMS</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label2">JMS的优势</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label3">JMS消息传送模型</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label4">接收消息</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label5">JMS编程接口</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label6">JMS消息结构</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label7">JMS使用示例</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5559349.html#_label8">译文链接（做了部分修改~~）</a></li></ul><h2 id="什么是Java消息服务">什么是Java消息服务 <a href="https://www.cnblogs.com/chenpi/p/5559349.html#3136669075">#</a></h2><p>Java消息服务指的是两个应用程序之间进行异步通信的API，它为标准消息协议和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持JAVA应用程序开发。在J2EE中，当两个应用程序使用JMS进行通信时，它们之间并不是直接相连的，而是通过一个共同的消息收发服务连接起来，可以达到解耦的效果，我们将会在接下来的教程中详细介绍。</p><h2 id="为什么需要JMS">为什么需要JMS<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3959985517">#</a></h2><p>在JAVA中，如果两个应用程序之间对各自都不了解，甚至这两个程序可能部署在不同的大洲上，那么它们之间如何发送消息呢？举个例子，一个应用程序A部署在印度，另一个应用程序部署在美国，然后每当A触发某件事后，B想从A获取一些更新信息。当然，也有可能不止一个B对A的更新信息感兴趣，可能会有N个类似B的应用程序想从A中获取更新的信息。<br>在这种情况下，JAVA提供了最佳的解决方案-JMS，完美解决了上面讨论的问题。<br>JMS同样适用于基于事件的应用程序，如聊天服务，它需要一种发布事件机制向所有与服务器连接的客户端发送消息。JMS与RMI不同，发送消息的时候，接收者不需要在线。服务器发送了消息，然后就不管了；等到客户端上线的时候，能保证接收到服务器发送的消息。这是一个很强大的解决方案，能处理当今世界很多普遍问题。</p><h2 id="JMS的优势">JMS的优势<a href="https://www.cnblogs.com/chenpi/p/5559349.html#830963993">#</a></h2><h2 id="异步">异步<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2528625659">#</a></h2><p>JMS天生就是异步的，客户端获取消息的时候，不需要主动发送请求，消息会自动发送给可用的客户端。</p><h2 id="可靠">可靠<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2909744174">#</a></h2><p>JMS保证消息只会递送一次。大家都遇到过重复创建消息问题，而JMS能帮你避免该问题。</p><h2 id="JMS消息传送模型">JMS消息传送模型<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2698078704">#</a></h2><p>在JMS API出现之前，大部分产品使用“点对点”和“发布/订阅”中的任一方式来进行消息通讯。JMS定义了这两种消息发送模型的规范，它们相互独立。任何JMS的提供者可以实现其中的一种或两种模型，这是它们自己的选择。JMS规范提供了通用接口保证我们基于JMS API编写的程序适用于任何一种模型。<br>让我们更加详细的看下这两种消息传送模型：</p><h2 id="点对点消息传送模型">点对点消息传送模型<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2198106656">#</a></h2><p>在点对点消息传送模型中，应用程序由消息队列，发送者，接收者组成。每一个消息发送给一个特殊的消息队列，该队列保存了所有发送给它的消息(除了被接收者消费掉的和过期的消息)。点对点消息模型有一些特性，如下：</p><ul><li>每个消息只有一个接收者；</li><li>消息发送者和接收者并没有时间依赖性；</li><li>当消息发送者发送消息的时候，无论接收者程序在不在运行，都能获取到消息；</li><li>当接收者收到消息的时候，会发送确认收到通知（acknowledgement）。</li></ul><p><a href="https://images2015.cnblogs.com/blog/879896/201606/879896-20160604194640227-215496499.gif"><img src="https://cdn.nlark.com/yuque/0/2024/gif/28066124/1712321162919-0bd12f9a-efb0-4e4f-ba99-3486ca5743d6.gif#averageHue=%23dfe2da&amp;clientId=uaec6aeff-e669-4&amp;from=paste&amp;id=ud2cd3faa&amp;originHeight=135&amp;originWidth=575&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8530&amp;status=done&amp;style=none&amp;taskId=uf0ebbb60-f0b6-4e42-bec1-44e39eb1776&amp;title=" alt="image.jpg"></a></p><h2 id="发布-订阅消息传递模型">发布/订阅消息传递模型<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2137190595">#</a></h2><p>在发布/订阅消息模型中，发布者发布一个消息，该消息通过topic传递给所有的客户端。在这种模型中，发布者和订阅者彼此不知道对方，是匿名的且可以动态发布和订阅topic。topic主要用于保存和传递消息，且会一直保存消息直到消息被传递给客户端。<br>发布/订阅消息模型特性如下：</p><ul><li>一个消息可以传递给多个订阅者</li><li>发布者和订阅者有时间依赖性，只有当客户端创建订阅后才能接受消息，且订阅者需一直保持活动状态以接收消息。</li><li>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</li></ul><p><a href="https://images2015.cnblogs.com/blog/879896/201606/879896-20160604232610055-1944763982.gif"><img src="https://cdn.nlark.com/yuque/0/2024/gif/28066124/1712321162989-3d62020d-f717-45ed-b524-c2a77a640a41.gif#averageHue=%2392c65f&amp;clientId=uaec6aeff-e669-4&amp;from=paste&amp;id=u7f1de0e6&amp;originHeight=164&amp;originWidth=402&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15492&amp;status=done&amp;style=none&amp;taskId=ud34849d2-4f50-4c47-aee3-8fc816c6ee7&amp;title=" alt="image.jpg"></a></p><h2 id="接收消息">接收消息<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3501056588">#</a></h2><p>在JMS中，消息的接收可以使用以下两种方式：</p><h2 id="同步">同步<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3206560136">#</a></h2><p>使用同步方式接收消息的话，消息订阅者调用receive()方法。在receive()中，消息未到达或在到达指定时间之前，方法会阻塞，直到消息可用。</p><h2 id="异步-2">异步<a href="https://www.cnblogs.com/chenpi/p/5559349.html#1280106162">#</a></h2><p>使用异步方式接收消息的话，消息订阅者需注册一个消息监听者，类似于事件监听器，只要消息到达，JMS服务提供者会通过调用监听器的onMessage()递送消息。</p><h2 id="JMS编程接口">JMS编程接口<a href="https://www.cnblogs.com/chenpi/p/5559349.html#1844483357">#</a></h2><p>JMS应用程序由如下基本模块组成：</p><ol><li>管理对象（Administered objects）-连接工厂（Connection Factories）和目的地（Destination）</li><li>连接对象（Connections）</li><li>会话（Sessions）</li><li>消息生产者（Message Producers）</li><li>消息消费者（Message Consumers）</li><li>消息监听者（Message Listeners）</li></ol><p><a href="https://images2015.cnblogs.com/blog/879896/201606/879896-20160604234140321-1865897064.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712321163006-851854a4-2666-4e90-813d-8e6c6ad11347.png#averageHue=%23fafaf9&amp;clientId=uaec6aeff-e669-4&amp;from=paste&amp;id=uaed26f22&amp;originHeight=513&amp;originWidth=699&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14701&amp;status=done&amp;style=none&amp;taskId=uacdb62e0-cb5d-4347-834a-224fa137eb5&amp;title=" alt="image.jpg"></a></p><h2 id="JMS管理对象">JMS管理对象<a href="https://www.cnblogs.com/chenpi/p/5559349.html#1999713951">#</a></h2><p>管理对象（Administered objects）是预先配置的JMS对象，由系统管理员为使用JMS的客户端创建，主要有两个被管理的对象：</p><ul><li>连接工厂（ConnectionFactory）</li><li>目的地（Destination）</li></ul><p>这两个管理对象由JMS系统管理员通过使用Application Server管理控制台创建，存储在应用程序服务器的JNDI名字空间或JNDI注册表。</p><h2 id="连接工厂（ConnectionFactory）">连接工厂（ConnectionFactory）<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3906794298">#</a></h2><p>客户端使用一个连接工厂对象连接到JMS服务提供者，它创建了JMS服务提供者和客户端之间的连接。JMS客户端（如发送者或接受者）会在JNDI名字空间中搜索并获取该连接。使用该连接，客户端能够与目的地通讯，往队列或话题发送/接收消息。让我们用一个例子来理解如何发送消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueueConnectionFactory queueConnFactory = (QueueConnectionFactory) initialCtx.lookup (&quot;primaryQCF&quot;);</span><br><span class="line">Queue purchaseQueue = (Queue) initialCtx.lookup (&quot;Purchase_Queue&quot;);</span><br><span class="line">Queue returnQueue = (Queue) initialCtx.lookup (&quot;Return_Queue&quot;);</span><br></pre></td></tr></table></figure><h2 id="目的地（Destination）">目的地（Destination）<a href="https://www.cnblogs.com/chenpi/p/5559349.html#353706163">#</a></h2><p>目的地指明消息被发送的目的地以及客户端接收消息的来源。JMS使用两种目的地，队列和话题。如下代码指定了一个队列和话题。<br><strong>创建一个队列Session</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueueSession ses = con.createQueueSession (false, Session.AUTO_ACKNOWLEDGE);  //get the Queue object  </span><br><span class="line">Queue t = (Queue) ctx.lookup (&quot;myQueue&quot;);  //create QueueReceiver  </span><br><span class="line">QueueReceiver receiver = ses.createReceiver(t);</span><br></pre></td></tr></table></figure><p><strong>创建一个话题Session</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TopicSession ses = con.createTopicSession (false, Session.AUTO_ACKNOWLEDGE); // get the Topic object  </span><br><span class="line">Topic t = (Topic) ctx.lookup (&quot;myTopic&quot;);  //create TopicSubscriber  </span><br><span class="line">TopicSubscriber receiver = ses.createSubscriber(t);</span><br></pre></td></tr></table></figure><h2 id="JMS连接">JMS连接<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2267779365">#</a></h2><p>连接对象封装了与JMS提供者之间的虚拟连接，如果我们有一个ConnectionFactory对象，可以使用它来创建一个连接。<br>Connection connection = connectionFactory.createConnection();<br>创建完连接后，需要在程序使用结束后关闭它：</p><h2 id="JMS-会话（Session）">JMS 会话（Session）<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3891235615">#</a></h2><p>Session是一个单线程上下文，用于生产和消费消息，可以创建出消息生产者和消息消费者。<br>Session对象实现了Session接口，在创建完连接后，我们可以使用它创建Session。<br>Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);</p><h2 id="JMS消息生产者">JMS消息生产者<a href="https://www.cnblogs.com/chenpi/p/5559349.html#647603517">#</a></h2><p>消息生产者由Session创建，用于往目的地发送消息。生产者实现MessageProducer接口，我们可以为目的地、队列或话题创建生产者；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MessageProducer producer = session.createProducer(dest);</span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line">MessageProducer producer = session.createProducer(topic);</span><br></pre></td></tr></table></figure><p>创建完消息生产者后，可以使用send方法发送消息：</p><h2 id="JMS消息消费者">JMS消息消费者<a href="https://www.cnblogs.com/chenpi/p/5559349.html#894597307">#</a></h2><p>消息消费者由Session创建，用于接受目的地发送的消息。消费者实现MessageConsumer接口，，我们可以为目的地、队列或话题创建消费者；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MessageConsumer consumer = session.createConsumer(dest);</span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">MessageConsumer consumer = session.createConsumer(topic);</span><br></pre></td></tr></table></figure><h2 id="JMS消息监听器">JMS消息监听器<a href="https://www.cnblogs.com/chenpi/p/5559349.html#1112032507">#</a></h2><p>JMS消息监听器是消息的默认事件处理者，他实现了MessageListener接口，该接口包含一个onMessage方法，在该方法中需要定义消息达到后的具体动作。通过调用setMessageListener方法我们给指定消费者定义了消息监听器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listener myListener = new Listener();</span><br><span class="line">consumer.setMessageListener(myListener);</span><br></pre></td></tr></table></figure><h2 id="JMS消息结构">JMS消息结构<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3025856714">#</a></h2><p>JMS客户端使用JMS消息与系统通讯，JMS消息虽然格式简单但是非常灵活， JMS消息由三部分组成：</p><h2 id="消息头">消息头<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3525730469">#</a></h2><p>JMS消息头预定义了若干字段用于客户端与JMS提供者之间识别和发送消息，预编译头如下：<br>– JMSDestination<br>– JMSDeliveryMode<br>– JMSMessageID<br>– JMSTimestamp<br>– JMSCorrelationID<br>– JMSReplyTo<br>– JMSRedelivered<br>– JMSType<br>– JMSExpiration<br>– JMSPriority</p><h2 id="消息属性">消息属性<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3707504030">#</a></h2><p>我们可以给消息设置自定义属性，这些属性主要是提供给应用程序的。对于实现消息过滤功能，消息属性非常有用，JMS API定义了一些标准属性，JMS服务提供者可以选择性的提供部分标准属性。</p><h2 id="消息体">消息体<a href="https://www.cnblogs.com/chenpi/p/5559349.html#3609976142">#</a></h2><p>在消息体中，JMS API定义了五种类型的消息格式，让我们可以以不同的形式发送和接受消息，并提供了对已有消息格式的兼容。不同的消息类型如下：<br><strong>Text message</strong> : javax.jms.TextMessage，表示一个文本对象。<br><strong>Object message</strong> : javax.jms.ObjectMessage，表示一个JAVA对象。<br><strong>Bytes message</strong> : javax.jms.BytesMessage，表示字节数据。<br><strong>Stream message</strong> :javax.jms.StreamMessage，表示java原始值数据流。<br><strong>Map message</strong> : javax.jms.MapMessage，表示键值对。<br>最后补充一下，常见的开源JMS服务的提供者，如下：</p><ul><li>JBoss 社区所研发的 HornetQ</li><li>Joram</li><li>Coridan的MantaRay</li><li>The OpenJMS Group的OpenJMS</li></ul><h2 id="JMS使用示例">JMS使用示例<a href="https://www.cnblogs.com/chenpi/p/5559349.html#2013884262">#</a></h2><h2 id="基于Tomcat-JNDI-ActiveMQ实现JMS的点对点消息传送"><a href="http://www.cnblogs.com/chenpi/p/5565618.html">基于Tomcat + JNDI + ActiveMQ实现JMS的点对点消息传送</a><a href="https://www.cnblogs.com/chenpi/p/5559349.html#3141963518">#</a></h2><h2 id="JMS发布-订阅消息传送例子"><a href="http://www.cnblogs.com/chenpi/p/5566983.html">JMS发布/订阅消息传送例子</a><a href="https://www.cnblogs.com/chenpi/p/5559349.html#377264299">#</a></h2><h2 id="译文链接（做了部分修改-）">译文链接（做了部分修改~~）<a href="https://www.cnblogs.com/chenpi/p/5559349.html#790320174">#</a></h2><p><a href="http://howtodoinjava.com/jms/jms-java-message-service-tutorial/">http://howtodoinjava.com/jms/jms-java-message-service-tutorial/</a><br>以上就是JMS的入门教程，学习愉快~</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;阅读目录&quot;&gt;阅读目录&lt;a href=&quot;https://www.cnblogs.com/chenpi/p/5559349.html#3243822474&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/ch</summary>
      
    
    
    
    <category term="Java" scheme="http://www.bojiboqi.fun/categories/Java/"/>
    
    
    <category term="Java基础" scheme="http://www.bojiboqi.fun/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Spring%20Batch/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Spring%20Batch/</id>
    <published>2024-04-09T02:34:03.333Z</published>
    <updated>2024-04-09T04:01:30.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言">1 前言</h2><p><code>Spring Batch</code>是一个轻量级的、完善的批处理框架，作为<code>Spring</code>体系中的一员，它拥有灵活、方便、生产可用的特点。在应对高效处理大量信息、定时处理大量数据等场景十分简便。<br>结合调度框架能更大地发挥<code>Spring Batch</code>的作用。</p><h2 id="2-Spring-Batch的概念知识">2 Spring Batch的概念知识</h2><h2 id="2-1-分层架构">2.1 分层架构</h2><p><code>Spring Batch</code>的分层架构图如下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970230-25ba6d8a-13fe-470a-ac04-d3485a201572.png#averageHue=%23a1bd16&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=uf3e66783&amp;originHeight=338&amp;originWidth=322&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14583&amp;status=done&amp;style=none&amp;taskId=u6935098c-c6d9-40f4-9b2e-63fe099d4a2&amp;title=" alt="image.jpg"><br>可以看到它分为三层，分别是：</p><ul><li><code>Application</code>应用层：包含了所有任务<code>batch jobs</code>和开发人员自定义的代码，主要是根据项目需要开发的业务流程等。</li><li><code>Batch Core</code>核心层：包含启动和管理任务的运行环境类，如<code>JobLauncher</code>等。</li><li><code>Batch Infrastructure</code>基础层：上面两层是建立在基础层之上的，包含基础的<code>读入reader</code>和<code>写出writer</code>、重试框架等。</li></ul><h2 id="2-2-关键概念">2.2 关键概念</h2><p>理解下图所涉及的概念至关重要，不然很难进行后续开发和问题分析。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970283-2cccf382-8bc1-4c93-a297-8f87d82b936d.png#averageHue=%23f2ebcd&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=u92d030c8&amp;originHeight=294&amp;originWidth=738&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20531&amp;status=done&amp;style=none&amp;taskId=u59551861-a6da-40e2-877b-da5ef24c3c8&amp;title=" alt="image.jpg"></p><h3 id="2-2-1-JobRepository">2.2.1 JobRepository</h3><p>专门负责与数据库打交道，对整个批处理的新增、更新、执行进行记录。所以<code>Spring Batch</code>是需要依赖数据库来管理的。</p><h3 id="2-2-2-任务启动器JobLauncher">2.2.2 任务启动器JobLauncher</h3><p>负责启动任务<code>Job</code>。</p><h3 id="2-2-3-任务Job">2.2.3 任务Job</h3><p><code>Job</code>是封装整个批处理过程的单位，跑一个批处理任务，就是跑一个<code>Job</code>所定义的内容。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970335-27652f23-13f1-4510-b2fa-7dec85067109.png#averageHue=%23faf3ef&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=u459cdec3&amp;originHeight=343&amp;originWidth=663&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29448&amp;status=done&amp;style=none&amp;taskId=u1c1b8f3a-186f-4c89-9a68-ed653247bf5&amp;title=" alt="image.jpg"><br>上图介绍了<code>Job</code>的一些相关概念：</p><ul><li><code>Job</code>：封装处理实体，定义过程逻辑。</li><li><code>JobInstance</code>：<code>Job</code>的运行实例，不同的实例，参数不同，所以定义好一个<code>Job</code>后可以通过不同参数运行多次。</li><li><code>JobParameters</code>：与<code>JobInstance</code>相关联的参数。</li><li><code>JobExecution</code>：代表<code>Job</code>的一次实际执行，可能成功、可能失败。</li></ul><p>所以，开发人员要做的事情，就是定义<code>Job</code>。</p><h3 id="2-2-4-步骤Step">2.2.4 步骤Step</h3><p><code>Step</code>是对<code>Job</code>某个过程的封装，一个<code>Job</code>可以包含一个或多个<code>Step</code>，一步步的<code>Step</code>按特定逻辑执行，才代表<code>Job</code>执行完成。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970398-43d24274-28ec-443e-a4da-12b43292f5b5.png#averageHue=%23f3efe7&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=u3671a782&amp;originHeight=352&amp;originWidth=479&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19313&amp;status=done&amp;style=none&amp;taskId=ucab77eae-ee56-41a5-bdfe-b7e86162e0b&amp;title=" alt="image.jpg"><br>通过定义<code>Step</code>来组装<code>Job</code>可以更灵活地实现复杂的业务逻辑。</p><h3 id="2-2-5-输入——处理——输出">2.2.5 输入——处理——输出</h3><p>所以，定义一个<code>Job</code>关键是定义好一个或多个<code>Step</code>，然后把它们组装好即可。而定义<code>Step</code>有多种方法，但有一种常用的模型就是<code>输入——处理——输出</code>，即<code>Item Reader</code>、<code>Item Processor</code>和<code>Item Writer</code>。比如通过<code>Item Reader</code>从文件输入数据，然后通过<code>Item Processor</code>进行业务处理和数据转换，最后通过<code>Item Writer</code>写到数据库中去。<br><code>Spring Batch</code>为我们提供了许多开箱即用的<code>Reader</code>和<code>Writer</code>，非常方便。</p><h2 id="3-代码实例">3 代码实例</h2><p>理解了基本概念后，就直接通过代码来感受一下吧。整个项目的功能是从多个<code>csv</code>文件中读数据，处理后输出到一个<code>csv</code>文件。</p><h2 id="3-1-基本框架">3.1 基本框架</h2><p>添加依赖：<br>需要添加<code>Spring Batch</code>的依赖，同时使用<code>H2</code>作为内存数据库比较方便，实际生产肯定是要使用外部的数据库，如<code>Oracle</code>、<code>PostgreSQL</code>。<br>入口主类：<br>也很简单，只是在<code>Springboot</code>的基础上添加注解<code>@EnableBatchProcessing</code>。<br>领域实体类<code>Employee</code>：<br>对应的<code>csv</code>文件内容如下：</p><h2 id="3-2-输入——处理——输出">3.2 输入——处理——输出</h2><h3 id="3-2-1-读取ItemReader">3.2.1 读取ItemReader</h3><p>因为有多个输入文件，所以定义如下：<br>这里使用了<code>FlatFileItemReader</code>，方便我们从文件读取数据。</p><h3 id="3-2-2-处理ItemProcessor">3.2.2 处理ItemProcessor</h3><p>为了简单演示，处理很简单，就是把最后一列转为大写：</p><h3 id="3-2-3-输出ItremWriter">3.2.3 输出ItremWriter</h3><p>比较简单，代码及注释如下：</p><h2 id="3-3-Step">3.3 Step</h2><p>有了<code>Reader-Processor-Writer</code>后，就可以定义<code>Step</code>了：<br>这里有一个<code>chunk</code>的设置，值为<code>5</code>，意思是5条记录后再提交输出，可以根据自己需求定义。</p><h2 id="3-4-Job">3.4 Job</h2><p>完成了<code>Step</code>的编码，定义<code>Job</code>就容易了：</p><h2 id="3-5-运行">3.5 运行</h2><p>完成以上编码后，执行程序，结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970409-f5ffdbed-f2f0-42d1-b649-9d41a04cd2fb.png#averageHue=%232f2c2b&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=u9118067c&amp;originHeight=284&amp;originWidth=549&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35795&amp;status=done&amp;style=none&amp;taskId=ud4d23dc4-5dad-4497-b923-79237e9610d&amp;title=" alt="image.jpg"><br>成功读取数据，并将最后字段转为大写，并输出到<code>outputData.csv</code>文件。</p><h2 id="4-监听Listener">4 监听Listener</h2><p>可以通过<code>Listener</code>接口对特定事件进行监听，以实现更多业务功能。比如如果处理失败，就记录一条失败日志；处理完成，就通知下游拿数据等。<br>我们分别对<code>Read</code>、<code>Process</code>和<code>Write</code>事件进行监听，对应分别要实现<code>ItemReadListener</code>接口、<code>ItemProcessListener</code>接口和<code>ItemWriteListener</code>接口。因为代码比较简单，就是打印一下日志，这里只贴出<code>ItemWriteListener</code>的实现代码：<br>把实现的监听器<code>listener</code>整合到<code>Step</code>中去：<br>执行后看一下日志：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712576970960-a8253869-1495-4111-a427-b50c24e7957c.png#averageHue=%23373434&amp;clientId=u28ff1b19-6762-4&amp;from=paste&amp;id=u94aad3d0&amp;originHeight=833&amp;originWidth=1431&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=325993&amp;status=done&amp;style=none&amp;taskId=u1cb3bb09-b53a-4b3f-a36f-7ae6952bddc&amp;title=" alt="image.jpg"><br>这里就能明显看到之前设置的<code>chunk</code>的作用了。<code>Writer</code>每次是处理5条记录，如果一条输出一次，会对<code>IO</code>造成压力。</p><h2 id="5-总结">5 总结</h2><p><code>Spring Batch</code>还有许多优秀的特性，如面对大量数据时的并行处理。本文主要入门介绍为主，不一一介绍，后续会专门讲解。<br>项目的代码在：<a href="https://github.com/LarryDpk/pkslow-samples">https://github.com/LarryDpk/pkslow-samples</a></p><hr><p>参考：<br><a href="https://docs.spring.io/spring-batch/docs/current/reference/html/spring-batch-intro.html#spring-batch-intro">官网介绍</a><br><a href="https://docs.spring.io/spring-batch/docs/current/reference/html/domain.html">官网 Domain</a><br><a href="http://www.ypk1226.com/2019/03/12/spring-batch/spring-batch-1/">Spring Batch 快速入门</a></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;1 前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring Batch&lt;/code&gt;是一个轻量级的、完善的批处理框架，作为&lt;code&gt;Spring&lt;/code&gt;体系中的一员，它拥有灵活、方便、生产可用的特点。在应对高效处理大量信息、定时处理大量数据等场景十分简</summary>
      
    
    
    
    <category term="Springboot2" scheme="http://www.bojiboqi.fun/categories/Springboot2/"/>
    
    
    <category term="Spring" scheme="http://www.bojiboqi.fun/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot分片上传、断点续传、大文件</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/SpringBoot%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E3%80%81%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/SpringBoot%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E3%80%81%E5%A4%A7%E6%96%87%E4%BB%B6/</id>
    <published>2024-04-09T02:33:54.252Z</published>
    <updated>2024-04-09T04:01:34.329Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传是一个老生常谈的话题了，在文件相对比较小的情况下，可以直接把文件转化为<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E6%B5%81&amp;spm=1001.2101.3001.7020">字节流</a>上传到服务器，但在文件比较大的情况下，用普通的方式进行上传，这可不是一个好的办法，毕竟很少有人会忍受，当文件上传到一半中断后，继续上传却只能重头开始上传，这种让人不爽的体验。那有没有比较好的上传体验呢，答案有的，就是下边要介绍的几种上传方式</p><h3 id="1-分片上传">1.分片上传</h3><h4 id="1-1-什么是分片上传">1.1 什么是分片上传</h4><p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。</p><h4 id="1-2-分片上传的场景">1.2 分片上传的场景</h4><ol><li><a href="https://so.csdn.net/so/search?q=%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&amp;spm=1001.2101.3001.7020">大文件上传</a></li><li>网络环境环境不好，存在需要重传风险的场景</li></ol><h3 id="2-断点续传">2.断点续传</h3><h4 id="2-1-什么是断点续传">2.1 什么是断点续传</h4><p>断点续传是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或者下载未完成的部分，而没有必要从头开始上传或者下载。</p><blockquote><p>本文的断点续传主要是针对断点上传场景。</p></blockquote><h4 id="2-2-应用场景">2.2 应用场景</h4><p>断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传。</p><h4 id="2-3-实现断点续传的核心逻辑">2.3 实现断点续传的核心逻辑</h4><p>在分片上传的过程中，如果因为系统崩溃或者网络中断等异常因素导致上传中断，这时候客户端需要记录上传的进度。在之后支持再次上传时，可以继续从上次上传中断的地方进行继续上传。<br>为了避免客户端在上传之后的进度数据被删除而导致重新开始从头上传的问题，服务端也可以提供相应的接口便于客户端对已经上传的分片数据进行查询，从而使客户端知道已经上传的分片数据，从而从下一个分片数据开始继续上传。<br>整体的过程如下：</p><ol><li>前端将文件安装百分比进行计算,每次上传文件的百分之一(文件分片),给文件分片做上序号</li><li>后端将前端每次上传的文件,放入到缓存目录</li><li>等待前端将全部的文件内容都上传完毕后,发送一个合并请求</li><li>后端使用<code>RandomAccessFile</code>进多线程读取所有的分片文件,一个线程一个分片</li><li>后端每个线程按照序号将分片的文件写入到目标文件中</li><li>在上传文件的过程中发生断网了或者手动暂停了,下次上传的时候发送续传请求,让后端删除最后一个分片</li><li>前端重新发送上次的文件分片</li></ol><h4 id="2-4-实现流程步骤">2.4 实现流程步骤</h4><h5 id="方案一，常规步骤">方案一，常规步骤</h5><ol><li>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</li><li>初始化一个分片上传任务，返回本次分片上传唯一标识；</li><li>按照一定的策略（串行或并行）发送各个分片数据块；</li><li>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件。</li></ol><h5 id="方案二、本文实现的步骤">方案二、本文实现的步骤</h5><ol><li>前端（客户端）需要根据固定大小对文件进行分片，请求后端（服务端）时要带上分片序号和大小。</li><li>服务端创建conf文件用来记录分块位置，conf文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认的0,已上传的就是<code>Byte.MAX_VALUE 127</code>（这步是实现断点续传和秒传的核心步骤）</li><li>服务器按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，写入文件。</li></ol><p>整体的实现流程如下：<img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712582178284-f8cbd5d0-1b98-46a7-aa04-21015d0a9b27.png#averageHue=%230e0d0d&amp;clientId=uc5c94c19-e777-4&amp;from=paste&amp;id=u8df48483&amp;originHeight=912&amp;originWidth=749&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59323&amp;status=done&amp;style=none&amp;taskId=u7bd74467-ccec-4200-b9b2-46a0e3b5df4&amp;title=" alt="image.jpg"></p><h3 id="3-分片上传-断点上传代码实现">3.分片上传/断点上传代码实现</h3><h4 id="3-1-前端实现">3.1 前端实现</h4><p>前端的File对象是特殊类型的Blob，且可以用在任意的Blob类型的上下文中。<br>就是说能够处理Blob对象的方法也能处理File对象。在Blob的方法里有有一个Slice方法可以帮完成切片。<br>核心代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">fileMD5 (files) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算文件md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  return new  Promise((resolve,reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const fileReader = new FileReader();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const piece = Math.ceil(files.size / this.pieceSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    const nextPiece = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      let start = currentPieces * this.pieceSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      let end = start * this.pieceSize &gt;= files.size ? files.size : start + this.pieceSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      fileReader.readAsArrayBuffer(files.slice(start,end));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    let currentPieces = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileReader.onload = (event) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      let e = window.event || event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      this.spark.append(e.target.result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      currentPieces++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (currentPieces &lt; piece) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        nextPiece()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        resolve(&#123;fileName: files.name, fileMd5: this.spark.end()&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // fileReader.onerror = (err =&gt; &#123; reject(err) &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    nextPiece()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如果我们是vue项目的话还有更好的选择，我们可以使用一些开源的框架，本文推荐使用<code>vue-simple-uploader </code>实现文件分片上传、断点续传及秒传。<br>当然我们也可以采用百度提供的<code>webuploader</code>的插件，进行分片。<br>操作方式也特别简单，直接按照官方文档给出的操作进行即可。<br>webuploader官方文档：</p><ul><li><a href="http://fex.baidu.com/webuploader/getting-started.html">http://fex.baidu.com/webuploader/getting-started.html</a></li></ul><h4 id="3-2-后端写入文件">3.2 后端写入文件</h4><p>后端用两种方式实现文件写入：</p><ul><li>RandomAccessFile</li><li>MappedByteBuffer</li></ul><p>在向下学习之前，我们先简单了解一下这两个类的使用</p><h5 id="RandomAccessFile">RandomAccessFile</h5><p>Java除了File类之外，还提供了专门处理文件的类，即<code>RandomAccessFile</code>（随机访问文件）类。<br>该类是Java语言中功能最为丰富的文件访问类，它提供了众多的文件访问方法。<code>RandomAccessFile</code>类支持“随机访问”方式，这里“随机”是指可以跳转到文件的任意位置处读写数据。在访问一个文件的时候，不必把文件从头读到尾，而是希望像访问一个数据库一样“随心所欲”地访问一个文件的某个部分，这时使用<code>RandomAccessFile</code>类就是最佳选择。<br><code>RandomAccessFile</code>对象类有个位置指示器，指向当前读写处的位置，当前读写n个字节后，文件指示器将指向这n个字节后面的下一个字节处。<br>刚打开文件时，文件指示器指向文件的开头处，可以移动文件指示器到新的位置，随后的读写操作将从新的位置开始。<br><code>RandomAccessFile</code>类在数据等长记录格式文件的随机（相对顺序而言）读取时有很大的优势，但该类仅限于操作文件，不能访问其他的I/O设备，如网络、内存映像等。<br><code>RandomAccessFile</code>类的构造方法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//创建随机存储文件流，文件属性由参数File对象指定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RandomAccessFile(File file ,  String mode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建随机存储文件流，文件名由参数name指定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RandomAccessFile(String name ,  String mode)</span><br></pre></td></tr></table></figure><p>这两个构造方法均涉及到一个String类型的参数mode，它决定随机存储文件流的操作模式，其中mode值及对应的含义如下：</p><ul><li><strong>“r”：</strong> 以只读的方式打开，调用该对象的任何write（写）方法都会导致IOException异常</li><li><strong>“rw”：</strong> 以读、写方式打开，支持文件的读取或写入。若文件不存在，则创建之。</li><li><strong>“rws”：</strong> 以读、写方式打开，与“rw”不同的是，还要对文件内容的每次更新都同步更新到潜在的存储设备中去。这里的“s”表示synchronous（同步）的意思</li><li><strong>“rwd”：</strong> 以读、写方式打开，与“rw”不同的是，还要对文件内容的每次更新都同步更新到潜在的存储设备中去。使用“rwd”模式仅要求将文件的内容更新到存储设备中，而使用“rws”模式除了更新文件的内容，还要更新文件的元数据（metadata），因此至少要求1次低级别的I/O操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line">import java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class RandomFileTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final String filePath = &quot;C:\\Users\\NineSun\\Desktop\\employee.txt&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Employee e1 = new Employee(&quot;zhangsan&quot;, 23);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Employee e2 = new Employee(&quot;lisi&quot;, 24);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Employee e3 = new Employee(&quot;wangwu&quot;, 25);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RandomAccessFile ra = new RandomAccessFile(filePath, &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.write(e1.name.getBytes(StandardCharsets.UTF_8));//防止写入文件乱码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.writeInt(e1.age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.write(e2.name.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.writeInt(e2.age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.write(e3.name.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.writeInt(e3.age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ra.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf = new RandomAccessFile(filePath, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int len = 8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        raf.skipBytes(12);//跳过第一个员工的信息，其姓名8字节，年龄4字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;第二个员工信息：&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str = &quot;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            str = str + (char) raf.readByte();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;name:&quot; + str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;age:&quot; + raf.readInt());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;第一个员工信息：&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        raf.seek(0);//将文件指针移动到文件开始位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        str = &quot;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            str = str + (char) raf.readByte();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;name:&quot; + str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;age:&quot; + raf.readInt());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;第三个员工信息：&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        raf.skipBytes(12);//跳过第二个员工的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        str = &quot;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            str = str + (char) raf.readByte();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;name:&quot; + str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;age:&quot; + raf.readInt());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        raf.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Employee &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    final static int LEN = 8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Employee(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (name.length() &gt; LEN) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            name = name.substring(0, 8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            while (name.length() &lt; LEN) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                name = name + &quot;\u0000&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            this.name = name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            this.age = age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MappedByteBuffer">MappedByteBuffer</h5><p>java io操作中通常采用<code>BufferedReader</code>，<code>BufferedInputStream</code>等带缓冲的IO类处理大文件，不过java nio中引入了一种基于<code>MappedByteBuffer</code>操作大文件的方式，其读写性能极高</p><h4 id="3-3-进行写入操作的核心代码">3.3 进行写入操作的核心代码</h4><p>为了节约文章篇幅，下面我只展示核心代码，完整代码可以在文末进行下载</p><h5 id="RandomAccessFile实现方式">RandomAccessFile实现方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">@UploadMode(mode = UploadModeEnum.RANDOM_ACCESS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class RandomAccessUploadStrategy extends SliceUploadTemplate &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private FilePathUtil filePathUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Value(&quot;$&#123;upload.chunkSize&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private long defaultChunkSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public boolean upload(FileUploadRequestDTO param) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RandomAccessFile accessTmpFile = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      File tmpFile = super.createTmpFile(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessTmpFile = new RandomAccessFile(tmpFile, &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //这个必须与前端设定的值一致</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      long chunkSize = Objects.isNull(param.getChunkSize()) ? defaultChunkSize * 1024 * 1024</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          : param.getChunkSize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      long offset = chunkSize * param.getChunk();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //定位到该分片的偏移量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessTmpFile.seek(offset);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //写入该分片数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessTmpFile.write(param.getFile().getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      boolean isOk = super.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return isOk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUtil.close(accessTmpFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MappedByteBuffer实现方式">MappedByteBuffer实现方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">@UploadMode(mode = UploadModeEnum.MAPPED_BYTEBUFFER)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MappedByteBufferUploadStrategy extends SliceUploadTemplate &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private FilePathUtil filePathUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Value(&quot;$&#123;upload.chunkSize&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private long defaultChunkSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public boolean upload(FileUploadRequestDTO param) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RandomAccessFile tempRaf = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FileChannel fileChannel = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    MappedByteBuffer mappedByteBuffer = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      File tmpFile = super.createTmpFile(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      tempRaf = new RandomAccessFile(tmpFile, &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      fileChannel = tempRaf.getChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      long chunkSize = Objects.isNull(param.getChunkSize()) ? defaultChunkSize * 1024 * 1024</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          : param.getChunkSize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //写入该分片数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      long offset = chunkSize * param.getChunk();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      byte[] fileData = param.getFile().getBytes();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      mappedByteBuffer = fileChannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          .map(FileChannel.MapMode.READ_WRITE, offset, fileData.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      mappedByteBuffer.put(fileData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      boolean isOk = super.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return isOk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUtil.freedMappedByteBuffer(mappedByteBuffer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUtil.close(fileChannel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUtil.close(tempRaf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="文件操作核心模板类代码">文件操作核心模板类代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public abstract class SliceUploadTemplate implements SliceUploadStrategy &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public abstract boolean upload(FileUploadRequestDTO param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  protected File createTmpFile(FileUploadRequestDTO param) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FilePathUtil filePathUtil = SpringContextHolder.getBean(FilePathUtil.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    param.setPath(FileUtil.withoutHeadAndTailDiagonal(param.getPath()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String fileName = param.getFile().getOriginalFilename();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String tempFileName = fileName + &quot;_tmp&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    File tmpDir = new File(uploadDirPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    File tmpFile = new File(uploadDirPath, tempFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (!tmpDir.exists()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      tmpDir.mkdirs();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return tmpFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public FileUploadDTO sliceUpload(FileUploadRequestDTO param) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boolean isOk = this.upload(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (isOk) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      File tmpFile = this.createTmpFile(param);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUploadDTO fileUploadDTO = this.saveAndFileUploadDTO(param.getFile().getOriginalFilename(), tmpFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return fileUploadDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String md5 = FileMD5Util.getFileMD5(param.getFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    map.put(param.getChunk(), md5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return FileUploadDTO.builder().chunkMd5Info(map).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * 检查并修改文件上传进度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public boolean checkAndSetUploadProgress(FileUploadRequestDTO param, String uploadDirPath) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String fileName = param.getFile().getOriginalFilename();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    File confFile = new File(uploadDirPath, fileName + &quot;.conf&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    byte isComplete = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RandomAccessFile accessConfFile = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessConfFile = new RandomAccessFile(confFile, &quot;rw&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //把该分段标记为 true 表示完成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;set part &quot; + param.getChunk() + &quot; complete&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //创建conf文件文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认0,已上传的就是Byte.MAX_VALUE 127</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessConfFile.setLength(param.getChunks());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessConfFile.seek(param.getChunk());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      accessConfFile.write(Byte.MAX_VALUE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //completeList 检查是否全部完成,如果数组里是否全部都是127(全部分片都成功上传)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      byte[] completeList = FileUtils.readFileToByteArray(confFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      isComplete = Byte.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      for (int i = 0; i &lt; completeList.length &amp;&amp; isComplete == Byte.MAX_VALUE; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //与运算, 如果有部分没有完成则 isComplete 不是 Byte.MAX_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        isComplete = (byte) (isComplete &amp; completeList[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;check part &quot; + i + &quot; complete?:&quot; + completeList[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      FileUtil.close(accessConfFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boolean isOk = setUploadProgress2Redis(param, uploadDirPath, fileName, confFile, isComplete);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return isOk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * 把上传进度信息存进redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private boolean setUploadProgress2Redis(FileUploadRequestDTO param, String uploadDirPath,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String fileName, File confFile, byte isComplete) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RedisUtil redisUtil = SpringContextHolder.getBean(RedisUtil.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (isComplete == Byte.MAX_VALUE) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), &quot;true&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      redisUtil.del(FileConstant.FILE_MD5_KEY + param.getMd5());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      confFile.delete();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (!redisUtil.hHasKey(FileConstant.FILE_UPLOAD_STATUS, param.getMd5())) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), &quot;false&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisUtil.set(FileConstant.FILE_MD5_KEY + param.getMd5(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            uploadDirPath + FileConstant.FILE_SEPARATORCHAR + fileName + &quot;.conf&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * 保存文件操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public FileUploadDTO saveAndFileUploadDTO(String fileName, File tmpFile) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FileUploadDTO fileUploadDTO = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      fileUploadDTO = renameFile(tmpFile, fileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (fileUploadDTO.isUploadComplete()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            .println(&quot;upload complete !!&quot; + fileUploadDTO.isUploadComplete() + &quot; name=&quot; + fileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //TODO 保存文件信息到数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return fileUploadDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * 文件重命名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * @param toBeRenamed 将要修改名字的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   * @param toFileNewName 新的名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private FileUploadDTO renameFile(File toBeRenamed, String toFileNewName) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //检查要重命名的文件是否存在，是否是文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FileUploadDTO fileUploadDTO = new FileUploadDTO();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (!toBeRenamed.exists() || toBeRenamed.isDirectory()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.info(&quot;File does not exist: &#123;&#125;&quot;, toBeRenamed.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      fileUploadDTO.setUploadComplete(false);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return fileUploadDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String ext = FileUtil.getExtension(toFileNewName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String p = toBeRenamed.getParent();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String filePath = p + FileConstant.FILE_SEPARATORCHAR + toFileNewName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    File newFile = new File(filePath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //修改文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boolean uploadFlag = toBeRenamed.renameTo(newFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setMtime(DateUtil.getCurrentTimeStamp());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setUploadComplete(uploadFlag);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setPath(filePath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setSize(newFile.length());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setFileExt(ext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setFileId(toFileNewName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return fileUploadDTO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上传接口">上传接口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/upload&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @ResponseBody</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public Result&lt;FileUploadDTO&gt; upload(FileUploadRequestDTO fileUploadRequestDTO) throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boolean isMultipart = ServletFileUpload.isMultipartContent(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FileUploadDTO fileUploadDTO = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (isMultipart) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      StopWatch stopWatch = new StopWatch();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      stopWatch.start(&quot;upload&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (fileUploadRequestDTO.getChunk() != null &amp;&amp; fileUploadRequestDTO.getChunks() &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fileUploadDTO = fileService.sliceUpload(fileUploadRequestDTO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fileUploadDTO = fileService.upload(fileUploadRequestDTO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      stopWatch.stop();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      log.info(&quot;&#123;&#125;&quot;,stopWatch.prettyPrint());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return new Result&lt;FileUploadDTO&gt;().setData(fileUploadDTO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    throw new BizException(&quot;上传失败&quot;, 406);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-秒传">4.秒传</h3><h4 id="4-1-什么是秒传">4.1 什么是秒传</h4><p>通俗的说，你把要上传的东西上传，服务器会先做MD5校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让MD5改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5就变了，就不会秒传了。</p><h4 id="4-2-实现的秒传核心逻辑">4.2 实现的秒传核心逻辑</h4><p>利用redis的set方法存放文件上传状态，其中key为文件上传的md5，value为是否上传完成的标志位，<br>当标志位true为上传已经完成，此时如果有相同文件上传，则进入秒传逻辑。<br>如果标志位为false，则说明还没上传完成，此时需要在调用set的方法，保存块号文件记录的路径，其中</p><ul><li>key为上传文件md5加一个固定前缀</li><li>value为块号文件记录路径</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712582178331-aab462cd-25cb-43b0-b798-9410d91fcc78.png#averageHue=%23f9f9f9&amp;clientId=uc5c94c19-e777-4&amp;from=paste&amp;id=u2e7860c8&amp;originHeight=833&amp;originWidth=1080&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46544&amp;status=done&amp;style=none&amp;taskId=u9d115be6-fc57-4a9d-9b6b-b7e37db1d50&amp;title=" alt="image.jpg"></p><h4 id="4-3-核心代码">4.3 核心代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">private boolean setUploadProgress2Redis(FileUploadRequestDTO param, String uploadDirPath,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      String fileName, File confFile, byte isComplete) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RedisUtil redisUtil = SpringContextHolder.getBean(RedisUtil.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (isComplete == Byte.MAX_VALUE) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), &quot;true&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      redisUtil.del(FileConstant.FILE_MD5_KEY + param.getMd5());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      confFile.delete();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (!redisUtil.hHasKey(FileConstant.FILE_UPLOAD_STATUS, param.getMd5())) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), &quot;false&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisUtil.set(FileConstant.FILE_MD5_KEY + param.getMd5(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            uploadDirPath + FileConstant.FILE_SEPARATORCHAR + fileName + &quot;.conf&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="5-总结">5.总结</h3><p>在实现分片上传的过程，需要前端和后端配合，比如前后端的上传块号的文件大小，前后端必须得要一致，否则上传就会有问题。<br>其次文件相关操作正常都是要搭建一个文件服务器的，比如使用fastdfs、hdfs等。<br>如果项目组觉得自建文件服务器太花费时间，且项目的需求仅仅只是上传下载，那么推荐使用阿里的oss服务器，其介绍可以查看官网:</p><ul><li><a href="https://help.aliyun.com/product/31815.html">https://help.aliyun.com/product/31815.html</a></li></ul><p>阿里的oss它本质是一个对象存储服务器，而非文件服务器，因此如果有涉及到大量删除或者修改文件的需求，oss可能就不是一个好的选择。</p><h6 id="项目地址：">项目地址：</h6><ul><li><a href="https://gitee.com/ninesuntec/large-file-upload">https://gitee.com/ninesuntec/large-file-upload</a></li></ul><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件上传是一个老生常谈的话题了，在文件相对比较小的情况下，可以直接把文件转化为&lt;a href=&quot;https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E6%B5%81&amp;amp;spm=1001.2101.3001.7020&quot;&gt;</summary>
      
    
    
    
    <category term="springboot2" scheme="http://www.bojiboqi.fun/categories/springboot2/"/>
    
    
    <category term="spring" scheme="http://www.bojiboqi.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>高并发Nginx部署</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/%E9%AB%98%E5%B9%B6%E5%8F%91Nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/%E9%AB%98%E5%B9%B6%E5%8F%91Nginx%E9%83%A8%E7%BD%B2/</id>
    <published>2024-04-09T02:33:45.268Z</published>
    <updated>2024-04-09T04:01:43.572Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要搭建nginx的双机热备搭建，实现Nginx的高可用。<br><strong>以下介绍LVS+keepalived+nginx部署。</strong><br>先来简单介绍下nginx吧：<br>nginx以占用内存小，并发高著称，常用作反向代理和负载均衡。<br>nginx高可用方案使用最广的是LVS+keepalived+双机热备，接下来说下怎么部署。<br><a href="https://img2023.cnblogs.com/blog/2135247/202303/2135247-20230320230309626-739935221.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712585779046-53cd06a6-4c44-41b3-a334-ba68b44888fc.png#averageHue=%23fefefe&amp;clientId=u180e7d0e-ff53-4&amp;from=paste&amp;id=ud1888981&amp;originHeight=587&amp;originWidth=1218&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52378&amp;status=done&amp;style=none&amp;taskId=uf4cdfb62-3221-435e-8432-a80f8ece8f7&amp;title=" alt="image.jpg"></a><br>上图为nginx的负载均衡架构图，解决了web容器的的单点故障和高并发的问题，当LVS的master节点故障时，LVS的backup节点会替代主节点；但是当一台nginx故障时，请求将会打到另一台上。<br>LVS（Linux Virtual Server）即Linux虚拟服务器，实现了基于IP的数据请求负载均衡调度方案；是四层负载均衡。<br>流程是：客户端发出请求，会先到DNS服务器上，之后解析到LVS负载均衡调度器上，LVS会虚拟出来一个外网IP（即VIP），此时客户端用户会连接到这个VIP，LVS会根据指定的调度算法确定具体要连接到哪一台nginx服务器上。如下图：<br><a href="https://img2023.cnblogs.com/blog/2135247/202212/2135247-20221212105006900-1588262131.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/28066124/1712585779440-07288248-4569-4751-b8d2-2a3cdfcc0071.png#averageHue=%23fefefe&amp;clientId=u180e7d0e-ff53-4&amp;from=paste&amp;id=ufedda100&amp;originHeight=646&amp;originWidth=1100&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37658&amp;status=done&amp;style=none&amp;taskId=u050855b5-920a-4b08-8cab-12e2fae7e2f&amp;title=" alt="image.jpg"></a><br>主要使用keepalived来做nginx的健康检测和高可用，keepalived的高可用是通过VRRP协议实现的。VRRP协议保证当主机的下一个路由器出现故障时，由另外一个路由器代替出现故障的路由器进行工作，从而保证网络通信的连续性和可靠性。<br>LVS实现负载均衡，但他并不知道nginx是否正常运行，即使nginx挂掉，LVS依旧会把请求发送到挂掉的服务器。<br>keepalived实现了真机故障隔离和负载均衡器间的失败切换，防止单点故障。<br>双机热备是指一台服务器提供服务，另一台处于备用状态，当主机挂掉后，备用机器会代替主机继续服务。双机热备主要解决nginx单点故障问题。<br>主机：192.168.2.130，做nginx1；<br>主机：192.168.2.131，做nginx2；<br>主机：192.168.2.132，做keepalived的master节点；<br>主机：192.168.2.133，做keepalived的backup节点；<br>虚拟IP（VIP）：192.168.2.150<br>服务器安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">yum install -y libnl libnl-devel</span><br><span class="line">yum install -y libnfnetlink-devel</span><br></pre></td></tr></table></figure><p>在192.168.2.130和192.168.2.131两台机器上安装nginx，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建文件夹</span><br><span class="line">mkdir /usr/local/nginx</span><br><span class="line">#复制nginx安装包到文件中</span><br><span class="line">cp nginx-1.22.1.tar.gz /usr/local/nginx/</span><br><span class="line">#解压缩</span><br><span class="line">cd /usr/local/nginx/</span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line">#执行安装命令</span><br><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">#启动nginx服务</span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line">#查看nginx服务</span><br><span class="line">ps -ef|grep nginx</span><br><span class="line">#要想访问需要开放nginx接口，或者关闭防火墙，关闭防火墙命令如下</span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>在192.168.2.132和192.168.2.133两台机器上安装keepalived，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#解压缩</span><br><span class="line">tar -zxvf keepalived-2.0.20.tar.gz</span><br><span class="line">#安装</span><br><span class="line">./configure --prefix=/usr/local/keepalived --sysconf=/etc</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">#启动</span><br><span class="line">cd /usr/local/keepalived/sbin/</span><br><span class="line">./keepalived</span><br><span class="line">#为了方便启动，将Keepalived注册到Linux系统，进入到解压的keepalived目录（注意：这里是一开始解压的目录，不是keepalived安装目录）</span><br><span class="line">#进到文件夹下</span><br><span class="line">cd keepalived-2.0.20/keepalived/etc/</span><br><span class="line">#执行如下命令，若提示重复，直接覆盖即可</span><br><span class="line">sudo cp init.d/keepalived /etc/init.d/</span><br><span class="line">sudo cp sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">#使配置生效</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">#启动keepalived</span><br><span class="line">systemctl start keepalived.service</span><br><span class="line">#停止keepalived</span><br><span class="line">systemctl stop keepalived.service</span><br><span class="line">#重启keepalived</span><br><span class="line">systemctl restart keepalived.service</span><br></pre></td></tr></table></figure><p>用于查看lvs转发及代理情况的工具，只需要在 192.168.2.132和 192.168.2.133上安装即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行</span><br><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure><p>在 192.168.2.130和 192.168.2.131构建虚拟网络接口子接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#进到/etc/sysconfig/network-scripts文件夹中</span><br><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">#复制ifcfg-lo并命令为ifcfg-lo:1</span><br><span class="line">cp ifcfg-lo ifcfg-lo:1</span><br><span class="line">#修改复制的文件</span><br><span class="line">vi ifcfg-lo:1</span><br><span class="line">#修改内容如下</span><br><span class="line">DEVICE=lo:1</span><br><span class="line">IPADDR=192.168.2.150</span><br><span class="line">NETMASK=255.255.255.255</span><br><span class="line">#重启网络</span><br><span class="line">service network restart</span><br><span class="line">#配置ARP</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">#添加如下配置</span><br><span class="line">net.ipv4.conf.all.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.default.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.lo.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="line">#刷新文件</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>添加一个host，去接收报文交给lo:1处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#这样添加重启后会失效</span><br><span class="line">route add -host 192.168.2.150 dev lo:1</span><br><span class="line">#查看</span><br><span class="line">route -n</span><br><span class="line">#添加开启自启动</span><br><span class="line">echo &quot;route add -host 192.168.2.150 dev lo:1&quot; &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><p>配置keepalived的mater节点</p><p>修改keepalived文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><p>修改内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_132  # 设置lvs的id，在一个网络内唯一标识</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER   #指定Keepalived的角色，MASTER为主，BACKUP为备 记得大写</span><br><span class="line">    interface ens33  #网卡id 换成你自己电脑的网卡id，查看:ip addr</span><br><span class="line">    virtual_router_id 41  #虚拟id，主备要一致</span><br><span class="line">    priority 100  #定义优先级，数字越大，优先级越高，主DR必须大于备用DR</span><br><span class="line">    advert_int 1  #检查间隔，默认为1s</span><br><span class="line">    authentication &#123; </span><br><span class="line">#密码主备一致</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.150  #设置虚拟IP(VIP)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#配置集群地址访问的IP+端口，端口和nginx保持一致，都是80</span><br><span class="line">virtual_server 192.168.2.150 80 &#123;</span><br><span class="line">    delay_loop 6 #健康检查时间，单位：秒</span><br><span class="line">    lb_algo rr # 配置负载均衡的算法，默认为轮询</span><br><span class="line">    lb_kind DR # 配置LVS的模式，有NAT、TUN、DR三个模式</span><br><span class="line">    persistence_timeout 5 #设置会话持久化的时间</span><br><span class="line">    protocol TCP #协议 -t</span><br><span class="line">    #负载均衡的真实服务器，也就是nginx节点的具体的真实ip地址</span><br><span class="line">    real_server 192.168.2.130 80 &#123;  </span><br><span class="line">        weight 1    #轮询的默认权重配比设置为1</span><br><span class="line">#设置健康检查</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">           #检查的80端口</span><br><span class="line">   connect_port 80</span><br><span class="line">   #检查超时时间</span><br><span class="line">           connect_timeout 2</span><br><span class="line">   #重试的次数</span><br><span class="line">           nb_get_retry 3</span><br><span class="line">   #间隔时间</span><br><span class="line">           delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #负载均衡的真实服务器，也就是nginx节点的具体的真实ip地址</span><br><span class="line">    real_server 192.168.2.131 80 &#123;  </span><br><span class="line">        weight 1    #轮询的默认权重配比设置为1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">   #检查的80端口</span><br><span class="line">   connect_port 80</span><br><span class="line">   #检查超时时间</span><br><span class="line">           connect_timeout 2</span><br><span class="line">   #重试的次数</span><br><span class="line">           nb_get_retry 3</span><br><span class="line">   #间隔时间</span><br><span class="line">           delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出，重启keepalived服务</p><p><code>systemctl restart keepalived</code><br>配置keepalived的backup节点,操作如上，配置文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_133  # 设置lvs的id，在一个网络内唯一标识</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP     #指定Keepalived的角色，MASTER为主，BACKUP为备 记得大写</span><br><span class="line">    interface ens33  #网卡id 换成你自己电脑的网卡id，查看:ip addr</span><br><span class="line">    virtual_router_id 41  #虚拟id，主备要一致</span><br><span class="line">    priority 50  #定义优先级，数字越大，优先级越高，主DR必须大于备用DR</span><br><span class="line">    advert_int 1  #检查间隔，默认为1s</span><br><span class="line">    authentication &#123; </span><br><span class="line">#密码主备一致</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.150  #设置虚拟IP(VIP)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#配置集群地址访问的IP+端口，端口和nginx保持一致，都是80</span><br><span class="line">virtual_server 192.168.2.150 80 &#123;</span><br><span class="line">    delay_loop 6 #健康检查时间，单位：秒</span><br><span class="line">    lb_algo rr # 配置负载均衡的算法，默认为轮询</span><br><span class="line">    lb_kind DR # 配置LVS的模式，有NAT、TUN、DR三个模式</span><br><span class="line">    persistence_timeout 5 #设置会话持久化的时间</span><br><span class="line">    protocol TCP #协议 -t</span><br><span class="line">    #负载均衡的真实服务器，也就是nginx节点的具体的真实ip地址</span><br><span class="line">    real_server 192.168.2.130 80 &#123;  </span><br><span class="line">        weight 1    #轮询的默认权重配比设置为1</span><br><span class="line">#设置健康检查</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">           #检查的80端口</span><br><span class="line">   connect_port 80</span><br><span class="line">   #检查超时时间</span><br><span class="line">           connect_timeout 2</span><br><span class="line">   #重试的次数</span><br><span class="line">           nb_get_retry 3</span><br><span class="line">   #间隔时间</span><br><span class="line">           delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #负载均衡的真实服务器，也就是nginx节点的具体的真实ip地址</span><br><span class="line">    real_server 192.168.2.131 80 &#123;  </span><br><span class="line">        weight 1    #轮询的默认权重配比设置为1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">   #检查的80端口</span><br><span class="line">   connect_port 80</span><br><span class="line">   #检查超时时间</span><br><span class="line">           connect_timeout 2</span><br><span class="line">   #重试的次数</span><br><span class="line">           nb_get_retry 3</span><br><span class="line">   #间隔时间</span><br><span class="line">           delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看当前配置的虚拟服务和各个RS的权重</p><p><code>ipvsadm -Ln</code><br>查看当前ipvs模块中记录的连接<br><code>ipvsadm -Lnc</code><br>访问VIP，即192.168.2.150，可看到展示nginx访问页面，多刷新几次，可看到nginx两台机器在轮询访问。<br>将nginx服务停掉一台，看到访问会都到还运行的机器上；将keepalived的master节点停掉，请求依然好用，说明backup起作用了。</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章主要搭建nginx的双机热备搭建，实现Nginx的高可用。&lt;br&gt;
&lt;strong&gt;以下介绍LVS+keepalived+nginx部署。&lt;/strong&gt;&lt;br&gt;
先来简单介绍下nginx吧：&lt;br&gt;
nginx以占用内存小，并发高著称，常用作反向代理和负载均衡。</summary>
      
    
    
    
    <category term="分布式" scheme="http://www.bojiboqi.fun/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="nginx" scheme="http://www.bojiboqi.fun/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Jenkis入门：</title>
    <link href="http://www.bojiboqi.fun/2024/04/09/Jenkis%E5%85%A5%E9%97%A8%EF%BC%9A/"/>
    <id>http://www.bojiboqi.fun/2024/04/09/Jenkis%E5%85%A5%E9%97%A8%EF%BC%9A/</id>
    <published>2024-04-09T02:29:00.585Z</published>
    <updated>2024-04-09T04:00:33.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><ul><li><strong>在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试；</strong></li><li><strong>前后端分离后，经常会修改接口，然后重新部署；这些情况都会涉及到频繁的打包部署；</strong></li></ul><h2 id="手动打包常规步骤：">手动打包常规步骤：</h2><ol><li>git commit + git push 提交代码</li><li>问一下同组小伙伴有没有要提交的代码</li><li>拉取代码并打包（war包，或者jar包）</li><li>上传到Linux服务器</li><li>查看当前程序是否在运行</li><li>关闭当前程序</li><li>启动新的jar包</li><li>观察日志看是否启动成功</li><li>如果有同事说，自己还有代码没有提交…再次重复1到8的步骤。</li></ol><blockquote><p><strong>基于以上的痛点，有一种工具能够实现，将代码提交到git后就自动打包部署勒，答案是肯定的：现在这里主要介绍jenkins</strong></p></blockquote><blockquote><p><strong>当然除了Jenkins以外，也还有其他的工具可以实现自动化部署，如Hudson、gitlab CI/CD等。只是Jenkins相对来说，使用得更广泛。</strong></p></blockquote><h2 id="文章结构：">文章结构：</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629063948-9504d9f1-eac9-435a-8d81-07e35e6bcf69.webp#averageHue=%23454d4f&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u859b9eee&amp;originHeight=340&amp;originWidth=713&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11982&amp;status=done&amp;style=none&amp;taskId=u5f1696bc-0c8c-4e71-afc8-e5f294f6359&amp;title=" alt="image.jpg"></p><h3 id="Jenkins服务器搭建及基本配置">Jenkins服务器搭建及基本配置</h3><h4 id="简介">简介</h4><blockquote><p><strong>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</strong></p></blockquote><h3 id="Jenkins自动化部署实现原理">Jenkins自动化部署实现原理</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629063999-6e96929b-bb7f-4182-9665-6a263f8526c1.webp#averageHue=%23e1e8d7&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u06bc4e3b&amp;originHeight=507&amp;originWidth=982&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26310&amp;status=done&amp;style=none&amp;taskId=u14a8093b-6398-415c-bc6f-672f2b6a08a&amp;title=" alt="image.jpg"></p><h3 id="Jenkins部署环境">Jenkins部署环境</h3><h4 id="基本环境">基本环境</h4><ol><li><strong>jdk环境，Jenkins是java语言开发的，因需要jdk环境</strong>。</li><li><strong>git/svn客户端，因一般代码是放在git/svn服务器上的，我们需要拉取代码</strong>。</li><li><strong>maven客户端，因一般java程序是由maven工程，需要maven打包，当然也有其他打包方式，如：gradle</strong></li></ol><blockquote><p><strong>以上是自动化部署java程序jenkins需要的基本环境，请自己提前安装好，下面着重讲解Jenkins的安装部署配置</strong>。</p></blockquote><h3 id="Jenkins安装">Jenkins安装</h3><ol><li>下载安装包jenkins.war；</li><li>在安装包根路径下，运行命令 java -jar jenkins.war --httpPort=8080，（linux环境、Windows环境都一样）；</li><li>打开浏览器进入链接 <a href="https://link.juejin.cn/?target=http%3A%2F%2Flocalhost%3A8080">http://localhost:8080</a>.</li><li>填写初始密码，激活系统</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064062-b4d2adef-6276-43ba-8be6-2ead0644f501.webp#averageHue=%23f8f8f5&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u335fb3f7&amp;originHeight=262&amp;originWidth=706&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19522&amp;status=done&amp;style=none&amp;taskId=u486f5326-834d-4f04-94b2-f88b7b8b7b5&amp;title=" alt="image.jpg"></p><ol><li>进入插件安装选择</li></ol><p>这里建议选择，推荐安装的插件，保证基本常用的功能可以使用。<br>中文版 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064055-0fabb1cd-23f3-46ca-bf1e-2b8b8daeb69d.webp#averageHue=%23e1e2df&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u8373f4c6&amp;originHeight=368&amp;originWidth=686&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14294&amp;status=done&amp;style=none&amp;taskId=u329af1ea-47fe-4c30-be8e-18591461379&amp;title=" alt="image.jpg"><br>英文版 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064156-c5bd2a16-8f97-4064-b4bf-3ee2cd8ab865.webp#averageHue=%23e3e0da&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=uec1555da&amp;originHeight=535&amp;originWidth=988&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21832&amp;status=done&amp;style=none&amp;taskId=ud8788271-3366-46a6-bd44-a4546d8d53f&amp;title=" alt="image.jpg"></p><hr><ol><li>选择后，进入插件安装页面 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064208-10ab38e6-9cd6-4c95-b66c-5a3c5a0f3014.webp#averageHue=%23ededed&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=uf5a98ca2&amp;originHeight=318&amp;originWidth=871&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12960&amp;status=done&amp;style=none&amp;taskId=u4f0141c4-2422-43e2-b085-aafe8422797&amp;title=" alt="image.jpg"></li><li>设置初始用户和密码 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064287-962ae611-09c6-472f-99c2-127feae22304.webp#averageHue=%23f6f6f5&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=ufa308ff5&amp;originHeight=256&amp;originWidth=633&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6356&amp;status=done&amp;style=none&amp;taskId=u4743602e-a08b-41a5-b4da-152f0b60d7a&amp;title=" alt="image.jpg"></li><li>进入系统，安装完成 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064292-b565c714-170d-4927-9a19-ba5942758678.webp#averageHue=%23f1f0e6&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u5ea421ab&amp;originHeight=400&amp;originWidth=1340&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27416&amp;status=done&amp;style=none&amp;taskId=u87ca7c0e-120f-47eb-bf5f-cb803e57d3c&amp;title=" alt="image.jpg"></li></ol><h3 id="Jenkins基本配置">Jenkins基本配置</h3><h4 id="系统初始化配置">系统初始化配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064344-15614142-5e7d-4b31-b99d-50835e727cd5.webp#averageHue=%23ebe8d9&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u7af8414a&amp;originHeight=550&amp;originWidth=812&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39868&amp;status=done&amp;style=none&amp;taskId=u30ff5c31-a579-470c-bf9d-691d2a162cd&amp;title=" alt="image.jpg"></p><ol><li>Configure System (系统设置)</li></ol><ul><li>在系统设置这里，我们只需要设置最后面的一项，配置远程服务器地址，</li><li>即我们代码最终运行的服务器地址信息，就像我们之前手动部署时使用xshell登录Linux服务器一样，</li><li>当然这里是可以配置多台远程Linux服务器的，配置完成后点击保存即可，为后面我们配置自动化部署做准备，配置如下图</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064410-10bbcd8d-5ca8-48cc-8450-963388bf80ef.webp#averageHue=%23faf8f5&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u1eca511f&amp;originHeight=409&amp;originWidth=1051&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20238&amp;status=done&amp;style=none&amp;taskId=u20ef42b6-0c7b-482c-b3c9-c24a5d9a698&amp;title=" alt="image.jpg"></p><ol><li>Configure Global Security (全局安全配置)</li></ol><p>配置用户相关的权限<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064538-bde6ace9-1100-4722-8739-7934aa1b59b4.webp#averageHue=%23f7f6f5&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=uff814975&amp;originHeight=316&amp;originWidth=465&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12298&amp;status=done&amp;style=none&amp;taskId=ub2f5a6a6-7dfa-4c98-87a4-b88cb54acfc&amp;title=" alt="image.jpg"><br>配置钩子程序（当用代码更新时通知）访问权限，避免报403错误<br>默认是勾选上了的，这里去掉勾选 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064552-f4c76348-3aaa-41f5-9018-b871a5d9fcad.webp#averageHue=%23f1f0f0&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u4d057ebd&amp;originHeight=55&amp;originWidth=509&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2548&amp;status=done&amp;style=none&amp;taskId=uda093f1d-3b94-43c7-87a0-efd0f98505d&amp;title=" alt="image.jpg"></p><ol><li><strong>Global Tool Configuration (全局工具配置 )</strong></li></ol><p>配置maven的全局settings路径<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064560-c932e43f-b978-41d6-85d4-c457b226bf75.webp#averageHue=%23f5f4f3&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u8ba949bf&amp;originHeight=201&amp;originWidth=560&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11170&amp;status=done&amp;style=none&amp;taskId=u0187bc20-1143-4cfe-9a7c-fb15a3aef08&amp;title=" alt="image.jpg"><br>配置jdk<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064636-ffc38dbd-bc79-4322-83c9-e5726a01ae01.webp#averageHue=%23f7f7f6&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u786ea06d&amp;originHeight=167&amp;originWidth=555&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4866&amp;status=done&amp;style=none&amp;taskId=udb231371-c1e5-488c-860e-033ce5b9dc7&amp;title=" alt="image.jpg"><br>配置git<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064674-457b1328-0964-4b15-918c-5f61f7fbace8.webp#averageHue=%23f7f7f6&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u0ec97dbe&amp;originHeight=141&amp;originWidth=603&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4722&amp;status=done&amp;style=none&amp;taskId=uf87e09cf-2bfa-4ba2-a4aa-49a5519b3ab&amp;title=" alt="image.jpg"><br>配置maven的安装路径<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064795-3ec9e965-5979-4279-affe-4b6b4fe26e2f.webp#averageHue=%23f7f7f7&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u379672ec&amp;originHeight=160&amp;originWidth=515&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5042&amp;status=done&amp;style=none&amp;taskId=u6b974a79-bb83-426b-8f58-b1747480207&amp;title=" alt="image.jpg"><br>配置必要插件<br>主要是检查如下这两个插件是否已安装</p><ul><li>插件1：Publish over SSH</li><li>插件2：Deploy to container Plugin</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064832-f22468b3-86c4-4088-9c8d-13e00e2f2bde.webp#averageHue=%23e1e9eb&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=ubc9facd1&amp;originHeight=401&amp;originWidth=1050&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31410&amp;status=done&amp;style=none&amp;taskId=u538f303b-2ffc-4f05-b8f9-058a93c0aac&amp;title=" alt="image.jpg"></p><h3 id="Jenkins自动化部署">Jenkins自动化部署</h3><blockquote><p><strong>我们配置一个自动化部署的的java程序（springBoot+maven+gitHub），基本必要配置就差不多了，后面配置过程中如果需要在配置</strong>。</p></blockquote><h4 id="Jenkins服务器上创建项目和配置">Jenkins服务器上创建项目和配置</h4><blockquote><p><strong>大体步骤：General(基础配置)–》源码管理–》构建触发器–》构建环境–》构建–》构建后操作</strong></p></blockquote><ol><li>创建一个工程</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064817-266f30c8-d8b2-4335-8b9a-492893645bf7.webp#averageHue=%23d2d0c8&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u66a927b2&amp;originHeight=157&amp;originWidth=302&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4038&amp;status=done&amp;style=none&amp;taskId=u6aa17877-400d-4ce3-9667-149b91f70a9&amp;title=" alt="image.jpg"></p><ol><li>General(基础配置)</li></ol><p><strong>仅需填写标准部分，其他可不填写</strong><br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064945-7d7dc39a-1932-4008-ba03-411a976a67a1.webp#averageHue=%23f4f3f3&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=ud1352169&amp;originHeight=452&amp;originWidth=753&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14254&amp;status=done&amp;style=none&amp;taskId=u47916bce-291f-40b1-bc5a-cf06967b88d&amp;title=" alt="image.jpg"></p><ol><li>源码管理</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629064957-add7fa6e-fd09-4d58-890c-a0771a2bb75f.webp#averageHue=%23f0eeee&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u665f18b1&amp;originHeight=436&amp;originWidth=951&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18442&amp;status=done&amp;style=none&amp;taskId=u498c59c3-992e-4126-b55a-624c1ea7a32&amp;title=" alt="image.jpg"><br>上图中点击“添加”按钮添加一组账号和密码<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065102-bf36bd05-dc41-4317-aba9-679c3d4e0f05.webp#averageHue=%23ececc3&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u88e2baf1&amp;originHeight=332&amp;originWidth=494&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10924&amp;status=done&amp;style=none&amp;taskId=u675f46a8-41e8-44e4-aea2-55e7b66c52a&amp;title=" alt="image.jpg"></p><ol><li>构建触发器</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065086-0194ed5f-ffc6-4d06-92ea-0c70af646d84.webp#averageHue=%23e2ded7&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u976830e2&amp;originHeight=233&amp;originWidth=943&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20152&amp;status=done&amp;style=none&amp;taskId=uc0ea2806-4b98-473e-abd9-68f232334d2&amp;title=" alt="image.jpg"><br>如上图：当前项目的回调地址为：</p><blockquote><p><a href="https://link.juejin.cn/?target=http%3A%2F%2Flocalhost%3A8080%2Fjob%2FjenkinsSpringBootDemo%2Fbuild%3Ftoken%3Dtoken_demo2">http://localhost:8080/job/jenkinsSpringBootDemo/build?token=token_demo2</a></p></blockquote><blockquote><p>只要执行这个地址（在浏览器上访问改地址），该项目就会发起一次构建项目，即拉取代码打包部署操作，在实际中，是由git服务器回调该地址。</p></blockquote><ol><li>构建环境（无需配置）</li><li>构建 <img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065187-deeadf9e-ac1b-4062-8b8c-8089db52f8d9.webp#averageHue=%23f1efef&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u820aa94b&amp;originHeight=190&amp;originWidth=942&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7528&amp;status=done&amp;style=none&amp;taskId=ua04890e2-0ae2-4e59-8209-18b05e33c8b&amp;title=" alt="image.jpg"></li><li>构建后操作<ul><li>构建后操作的意思是，jar打包好后，要将jar发送到哪里去，发送后去和启动等。</li><li>这里需要提前在需要部署的服务器上配置好路径，写好启动和停止项目的脚本，并设置为可以执行的脚本，</li><li>其实就是我们平时在Linux上手动部署项目操作的脚本。</li></ul></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065190-485713bc-48c0-4579-88d5-4c11eb78a11a.webp#averageHue=%23e5d9d2&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=u4d484ec4&amp;originHeight=399&amp;originWidth=709&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24968&amp;status=done&amp;style=none&amp;taskId=u748a17a8-f265-4625-a677-4327576c828&amp;title=" alt="image.jpg"><br>案例中给出的start.sh脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">echo $&#123;JAVA_HOME&#125;</span><br><span class="line">echo &#x27;Start the program : demo2-0.0.1-SNAPSHOT.jar&#x27;</span><br><span class="line">chmod 777 /home/ldp/app/demo2-0.0.1-SNAPSHOT.jar</span><br><span class="line">echo &#x27;-------Starting-------&#x27;</span><br><span class="line">cd /home/ldp/app/</span><br><span class="line">nohup $&#123;JAVA_HOME&#125;/bin/java -jar demo2-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line">echo &#x27;start success&#x27;</span><br></pre></td></tr></table></figure><p>案例中给出的stop.sh脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;Stop Procedure : demo2-0.0.1-SNAPSHOT.jar&quot;</span><br><span class="line">pid=`ps -ef | grep java | grep demo2-0.0.1-SNAPSHOT.jar | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">echo &#x27;old Procedure pid:&#x27;$pid</span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">kill -9 $pid</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="Linux服务器配置">Linux服务器配置</h3><p>在Linux 服务上，上传上文中的两个脚本，用于启动和停止<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065250-75eb9072-89bd-40d4-b2ef-eda2ba4495b1.webp#averageHue=%23484a3e&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=ue184d256&amp;originHeight=97&amp;originWidth=348&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7346&amp;status=done&amp;style=none&amp;taskId=uf257bc7e-7ec7-453b-8b6c-87069ea4532&amp;title=" alt="image.jpg"></p><h3 id="GitHub服务器配置">GitHub服务器配置</h3><p>在GitHub服务器上的指定项目里面配置上文中提到的回调地址<br>特别注意：为了保证回调地址网可以使用，<br>所以，下面配置的是外网映射地址。<br><img src="https://cdn.nlark.com/yuque/0/2024/webp/28066124/1712629065355-121b340c-8957-455b-b0f8-75dd986c52fa.webp#averageHue=%23f3f3ee&amp;clientId=uff901451-5ac0-4&amp;from=paste&amp;id=ude6404cb&amp;originHeight=556&amp;originWidth=739&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33532&amp;status=done&amp;style=none&amp;taskId=u642cbe8f-da9c-4742-9e58-6766a207960&amp;title=" alt="image.jpg"><br>可以参考：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fjenkins.io%2Fzh%2Fdoc%2F">官方文档</a></p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前后端分离后，经</summary>
      
    
    
    
    <category term="运维" scheme="http://www.bojiboqi.fun/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="流水线" scheme="http://www.bojiboqi.fun/tags/%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>知识点拾遗：</title>
    <link href="http://www.bojiboqi.fun/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97%EF%BC%9A/"/>
    <id>http://www.bojiboqi.fun/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97%EF%BC%9A/</id>
    <published>2024-02-28T13:02:28.586Z</published>
    <updated>2024-03-09T12:04:39.310Z</updated>
    
    <content type="html"><![CDATA[<p><a name="w1c60"></a></p><h2 id="什么是服务器？">什么是服务器？</h2><p>服务器是指一种计算机硬件或软件，它为其他计算机或设备提供数据或服务。Web服务器是一种特殊的服务器，它主要用于接收客户端请求并返回网页内容。Web服务器可以处理HTTP请求并返回HTML、CSS、JavaScript等文件，以便在浏览器中显示网页。<br />简单来说，Web服务器主要负责处理向浏览器发送HTML以供浏览<a href="https://zhuanlan.zhihu.com/p/351999922">1</a><em><strong>服务器不仅可以是硬件，也可以是软件。服务器软件运行在计算机硬件上，它能够接收客户端请求并提供相应的服务。</strong></em><br />服务器可以运行多种操作系统，包括Windows Server、Linux和Unix等。选择哪种操作系统取决于服务器的用途和管理员的喜好。不同的操作系统有不同的特点和优势，例如Linux和Unix通常被认为更稳定且更安全，而Windows Server则提供了更好的图形用户界面。机房是一个专门用于存放服务器和其他计算机设备的房间。它通常配备了空调、电源、防火和安全措施，以确保服务器能够在安全、稳定的环境中运行。<br />服务器通常会被安装在机房内的机架上，并通过网络连接到其他设备。这样，管理员就可以在一个集中的位置管理和维护所有服务器。<br><a name="Z58oN"></a></p><h2 id="浏览器上面搜索框和下面的搜索框有什么区别？">浏览器上面搜索框和下面的搜索框有什么区别？</h2><p><a href="https://www.zhihu.com/question/20341979">浏览器上面的搜索框又叫地址栏或Omnibox，它可以输入网址或者搜索关键词，也可以设置不同的搜索引擎和快捷键</a><a href="https://www.zhihu.com/question/20341979">1</a><a href="https://sspai.com/post/44922">2</a>。<a href="https://zhuanlan.zhihu.com/p/363343360">浏览器下面的搜索框一般是指网页中嵌入的搜索框，它只能输入搜索关键词，并且使用固定的搜索引擎</a><a href="https://zhuanlan.zhihu.com/p/363343360">3</a><br><a name="w1yHa"></a></p><h4 id="input-class-itxt-type-password-placeholder-请输入密码-autocomplete-off-tabindex-1-name-password-id-password-这里的placeholder和autocomplete-tabindex是什么？"><input class="itxt" type="password" placeholder="请输入密码" autocomplete="off" tabindex="1" name="password" id="password" />这里的placeholder和autocomplete,tabindex是什么？</h4><p>In the <strong>input</strong> element you provided:</p><ul><li>The <strong>placeholder</strong> attribute specifies a short hint that describes the expected value of the input field. The hint is displayed in the input field before the user enters a value. In this case, the placeholder text is <strong>“请输入密码”</strong>, which means “Please enter password” in English.</li><li>The <strong>autocomplete</strong> attribute specifies whether or not an input field should have autocomplete enabled. When autocomplete is enabled, the browser will automatically fill in values that the user has previously entered in similar fields. In this case, <strong>autocomplete=“off”</strong> means that autocomplete is disabled for this input field.</li><li>The <strong>tabindex</strong> attribute specifies the tab order of an element when using the “Tab” key to navigate through a form. Elements with a higher <strong>tabindex</strong> value will be visited later than elements with a lower <strong>tabindex</strong> value. In this case, <strong>tabindex=“1”</strong> means that this input field will be the first element to receive focus when navigating through the form using the “Tab” key.<br><a name="O0BJ5"></a></li></ul><h4 id="…-…-static-css-style-css这段代码的…-是什么意思？">…/…/static/css/style.css这段代码的…/是什么意思？</h4><p>In the file path <strong>‘…/…/static/css/style.css’</strong> that you provided, the <strong>‘…/’</strong> is a relative path notation that means “go up one directory level”.<br />In this case, the <strong>‘…/…/’</strong> at the beginning of the file path means to go up two directory levels from the current location of the HTML file. From there, it navigates down into the <strong>‘static/css/’</strong> directories to locate the <strong>‘style.css’</strong> file.<br />For example, if your HTML file is located at <strong>‘/myproject/pages/home/index.html’</strong>, then <strong>‘…/…/static/css/style.css’</strong> would resolve to <strong>‘/myproject/static/css/style.css’</strong>.<br><a name="EYu2J"></a></p><h4 id="IDEA实现多行不间断选择：">IDEA实现多行不间断选择：</h4><p>按住alt然后鼠标上下移动选择。<br><a name="PHf1j"></a></p><h4 id="spring-boot-starter-web里面的spring-boot-starter是什么">spring-boot-starter-web里面的spring-boot-starter是什么</h4><p>spring-boot-starter-web里面的spring-boot-starter是一个起步依赖，它可以帮助我们引入Web开发所需要的相关jar包，包括嵌入的Servlet容器和SpringMVC的依赖。它也为SpringMVC提供了大量的自动配置，可以适用于大多数Web开发场景。spring-boot-starter-web是官方提供的starter，后面跟的单词就是场景，比如说后面跟web,就是导入web场景的所有依赖。<br><a name="gfabt"></a></p><h4 id="命令行参数的java和javac的区别">命令行参数的java和javac的区别</h4><p>java和javac是Java开发工具包（JDK）中的两个命令行工具，它们分别用于运行Java程序和编译Java源代码。<br />javac命令用于将Java源代码编译为Java字节码文件（.class文件）。编译后的字节码文件可以在Java虚拟机（JVM）上运行，以执行Java程序。要使用javac命令编译Java源代码，您需要在命令行中指定Java源代码文件的路径，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Main.java</span><br></pre></td></tr></table></figure><p>该命令会将当前目录下的Main.java文件编译为Main.class文件。<br />java命令用于运行Java程序。它将编译后的Java字节码文件加载到JVM中，并执行程序的入口点（通常是main方法）。要使用java命令运行Java程序，您需要在命令行中指定要运行的Java类的名称，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Main</span><br></pre></td></tr></table></figure><p>该命令会在JVM中加载Main.class文件，并执行其中的main方法。<br />需要注意的是，javac和java命令行参数的语法略有不同。javac命令行参数通常包括要编译的Java源代码文件的路径，以及一些编译选项。而java命令行参数通常包括要运行的Java类的名称，以及一些运行时参数。例如，要向java命令传递命令行参数，可以在类名后面加上参数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Main arg1 arg2</span><br></pre></td></tr></table></figure><p>该命令会在JVM中加载Main.class文件，并执行其中的main方法，同时将arg1和arg2作为命令行参数传递给程序。</p><meta name="referrer" content="no-referrer">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;w1c60&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是服务器？&quot;&gt;什么是服务器？&lt;/h2&gt;
&lt;p&gt;服务器是指一种计算机硬件或软件，它为其他计算机或设备提供数据或服务。Web服务器是一种特殊的服务器，它主要用于接收客户端请求并返回网页内容。Web服务器可以处</summary>
      
    
    
    
    <category term="web" scheme="http://www.bojiboqi.fun/categories/web/"/>
    
    
    <category term="零散知识点" scheme="http://www.bojiboqi.fun/tags/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="web" scheme="http://www.bojiboqi.fun/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>知识点</title>
    <link href="http://www.bojiboqi.fun/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%EF%BC%88BUG%EF%BC%89/"/>
    <id>http://www.bojiboqi.fun/2024/02/28/%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A%EF%BC%88BUG%EF%BC%89/</id>
    <published>2024-02-28T13:02:28.583Z</published>
    <updated>2024-02-28T10:44:05.259Z</updated>
    
    <content type="html"><![CDATA[ <meta name="referrer" content="no-referrer"><h4 id="找不到mybatis文件：java-io-IOException-Could-not-find-resource-mybatis-config-xml">找不到mybatis文件：java.io.IOException: Could not find resource mybatis.config.xml</h4><p>bug:<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688470269608-4fd3e82c-3631-4e0b-8beb-476c4d5ecdac.png#averageHue=%23080302&amp;clientId=u485c1c2b-dc00-4&amp;from=paste&amp;height=144&amp;id=u3d173d10&amp;originHeight=180&amp;originWidth=824&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=28618&amp;status=done&amp;style=none&amp;taskId=uaf61014d-875b-4936-b7c1-15aa27842ac&amp;title=&amp;width=659.2" alt="image.png"><br>原因：mybatis中的<mapper>映射不正确外加生成sqlssesion的文件引用不正确<br>修改后：这里的mybatis-config.xm;和com在同一个目录下的，EmpMapper.xml使用相对路径表示为：com/example/demo/mapper/EmpMapper<img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688469950619-71023303-ad70-4420-b551-9f37823c8a45.png#averageHue=%231f5043&amp;clientId=u485c1c2b-dc00-4&amp;from=paste&amp;height=214&amp;id=uaf338d14&amp;originHeight=268&amp;originWidth=1191&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=57097&amp;status=done&amp;style=none&amp;taskId=u9ac5034a-e989-49c8-a528-373d7d2ca32&amp;title=&amp;width=952.8" alt="image.png"><br>修改文件引用：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688470214376-cfb36d91-a17c-4da4-98e9-fbd48850bf9e.png#averageHue=%23141624&amp;clientId=u485c1c2b-dc00-4&amp;from=paste&amp;height=160&amp;id=u03f0c4f0&amp;originHeight=200&amp;originWidth=939&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=47710&amp;status=done&amp;style=none&amp;taskId=u723765e0-d52d-4b36-97d7-098d7693021&amp;title=&amp;width=751.2" alt="image.png"></p><h4 id="复制代码出现NBSP乱码解决：">复制代码出现NBSP乱码解决：</h4><p>现象：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688525778810-d3623e70-93ba-442d-ac3d-927546917921.png#averageHue=%23141618&amp;clientId=uac13984f-90f3-4&amp;from=paste&amp;height=282&amp;id=u8819c1e9&amp;originHeight=352&amp;originWidth=515&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=47152&amp;status=done&amp;style=none&amp;taskId=u3db9185b-8b9b-4a40-ac2b-c41dd916243&amp;title=&amp;width=412" alt="image.png"><br>分析：NBSP（Non-Breaking SPace）是一个不换行的空格字符，它的 Unicode 编码是 U+00A0。有时候，当我们从其他地方复制文本到 IDEA 中，可能会出现 NBSP 字符<br>解决方法：<br>按下ctrl+shift+r打开全局替换：在全局替换中找到有问题的地方，可能直接输入\u00A0查找无法查找，这个时候可以找到有问题的内容（也就是刚刚复制过来的），选择NBSP复制后（复制后粘贴在第一个搜索框中，这个时候显示的是空格）在第二个搜索框中输入空格。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688525869991-7e4727b9-4297-412c-9bd3-fc66dcce6ae8.png#averageHue=%23628d64&amp;clientId=uac13984f-90f3-4&amp;from=paste&amp;height=711&amp;id=u9d096788&amp;originHeight=889&amp;originWidth=704&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=103409&amp;status=done&amp;style=none&amp;taskId=u33a200ee-a893-457e-b8cd-4c945c924fd&amp;title=&amp;width=563.2" alt="image.png"></p><h4 id="org-springframework-beans-factory-xml-XmlBeanDefinitionStoreException-Line-6-in-XML-document-from-class-path-resource-spring-datasource-xml-is-invalid-nested-exception-is-org-xml-sax-SAXParseException-lineNumber-6-columnNumber-62-cvc-complex-type-2-4-c-通配符的匹配很全面-但无法找到元素-‘context-property-placeholder’-的声明。">org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 6 in XML document from class path resource [spring-datasource.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 6; columnNumber: 62; cvc-complex-type.2.4.c: 通配符的匹配很全面, 但无法找到元素 ‘context:property-placeholder’ 的声明。</h4><p>原因：Spring配置文件中的xsi:schemaLocation不全，上面是差context标签的<img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688547837996-e5cb89c8-82d1-4a26-9861-9ee5261fa7ec.png#averageHue=%23131317&amp;clientId=ua2de3bac-fb89-4&amp;from=paste&amp;height=119&amp;id=u5b2faab4&amp;originHeight=149&amp;originWidth=1170&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=36135&amp;status=done&amp;style=none&amp;taskId=ud3fe35d5-0254-47d1-adb9-919a77e9882&amp;title=&amp;width=936" alt="image.png"><br>解决方法：添加<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br><a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a><br><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688547915036-3729279c-19a4-4b3a-9bf8-787bdd66c6fe.png#averageHue=%23102128&amp;clientId=ua2de3bac-fb89-4&amp;from=paste&amp;height=218&amp;id=ubd390c4e&amp;originHeight=273&amp;originWidth=1088&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=51474&amp;status=done&amp;style=none&amp;taskId=ue9a6a315-d7c6-442a-9ab7-52019860091&amp;title=&amp;width=870.4" alt="image.png"></p><h4 id="编译失败-内部java编译器错误：打开设置对照下面图片">编译失败:内部java编译器错误：打开设置对照下面图片</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/28066124/1688988544489-1206a90e-2389-4eba-ac69-e911b209fc40.png#averageHue=%23090808&amp;clientId=ud1bacd7a-acda-4&amp;from=paste&amp;height=364&amp;id=u68d27fb0&amp;originHeight=455&amp;originWidth=1192&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=46683&amp;status=done&amp;style=none&amp;taskId=uee17bef8-9089-45af-9356-97ccc8ea041&amp;title=&amp;width=953.6" alt="image.png"></p><h4 id="ctrl点击类可以进入类内部">ctrl点击类可以进入类内部</h4><p><a href="https://blog.csdn.net/BingTaiLi/article/details/109735778">解决Maven ‘parent.relativePath‘ of POM_BingTaiLi的博客-CSDN博客</a><br><parent>标签中加上<relativePath />是用来指定父级pom文件的相对路径为空的，也就是说，不会在本地文件系统中查找父级pom文件，而是直接从本地仓库或远程仓库中查找。这样可以避免一些不必要的错误或警告，</p><h4 id="class-lombok-javac-apt-LombokProcessor-in-unnamed-module-0x7be1ce6a-cannot-access-class-com-sun-tools-javac-processing-JavacProcessingEnvironment-in-module-jdk-compiler-because-module-jdk-compiler-does-not-export-com-sun-tools-javac-processing-to-unnamed-module-0x7be1ce6a">class lombok.javac.apt.LombokProcessor (in unnamed module @0x7be1ce6a) cannot access class com.sun.tools.javac.processing.JavacProcessingEnvironment (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.processing to unnamed module @0x7be1ce6a</h4><p>原因分析：lombok的版本太低了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="IDEA鼠标光标变成了白色粗条，无法正常换行">IDEA鼠标光标变成了白色粗条，无法正常换行</h4><p>原因分析：按住了insert进入覆盖模式了。再次按insert就可以变成原本的模式。</p>]]></content>
    
    
      
      
    <summary type="html"> &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
&lt;h4 id=&quot;找不到mybatis文件：java-io-IOException-Could-not-find-resource-mybatis-config-xml&quot;&gt;找不到mybati</summary>
      
    
    
    
    
    <category term="bug" scheme="http://www.bojiboqi.fun/tags/bug/"/>
    
  </entry>
  
</feed>
